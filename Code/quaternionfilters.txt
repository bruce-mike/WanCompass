; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\quaternionfilters.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\quaternionfilters.d --apcs=interwork --diag_suppress=9931 -IC:\Keil_v5\ARM\INC\Phillips -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -DDEVELOPMENT --omf_browse=.\obj\quaternionfilters.crf quaternionFilters.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  QuaternionInit PROC
;;;46     
;;;47     void QuaternionInit(void)
000000  e92d4010          PUSH     {r4,lr}
;;;48     {
;;;49     	beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
000004  e59f1fa0          LDR      r1,|L1.4012|
000008  e3a00000          MOV      r0,#0
00000c  ebfffffe          BL       sqrt
000010  e59f3f98          LDR      r3,|L1.4016|
000014  e3a02101          MOV      r2,#0x40000000
000018  ebfffffe          BL       __aeabi_dmul
00001c  ebfffffe          BL       __aeabi_d2f
000020  e59f1f8c          LDR      r1,|L1.4020|
000024  e5810000          STR      r0,[r1,#0]  ; beta
;;;50     }
000028  e8bd4010          POP      {r4,lr}
00002c  e12fff1e          BX       lr
;;;51     
                          ENDP

                  MadgwickQuaternionUpdate PROC
;;;52     void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
000030  e92d4fff          PUSH     {r0-r11,lr}
;;;53     {
;;;54       // short name local variable for readability
;;;55       float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
000034  e59f5f7c          LDR      r5,|L1.4024|
000038  e1a09000          MOV      r9,r0                 ;53
00003c  e5950000          LDR      r0,[r5,#0]  ; q
000040  e24dd064          SUB      sp,sp,#0x64           ;53
000044  e58d000c          STR      r0,[sp,#0xc]
000048  e5950008          LDR      r0,[r5,#8]  ; q, q
00004c  e5956004          LDR      r6,[r5,#4]
000050  e58d0004          STR      r0,[sp,#4]
000054  e595000c          LDR      r0,[r5,#0xc]  ; q
000058  e59d70a0          LDR      r7,[sp,#0xa0]
00005c  e1a08001          MOV      r8,r1                 ;53
;;;56       float norm;
;;;57       float hx, hy, _2bx, _2bz;
;;;58       float s1, s2, s3, s4;
;;;59       float qDot1, qDot2, qDot3, qDot4;
;;;60     
;;;61       // Auxiliary variables to avoid repeated arithmetic
;;;62       float _2q1mx;
;;;63       float _2q1my;
;;;64       float _2q1mz;
;;;65       float _2q2mx;
;;;66       float _4bx;
;;;67       float _4bz;
;;;68       float _2q1 = 2.0f * q1;
000060  e58d0000          STR      r0,[sp,#0]
000064  e59d000c          LDR      r0,[sp,#0xc]
000068  e1a04002          MOV      r4,r2                 ;53
00006c  e3a01001          MOV      r1,#1
000070  ebfffffe          BL       __ARM_scalbnf
000074  e1a0b000          MOV      r11,r0
000078  e58d0034          STR      r0,[sp,#0x34]
;;;69       float _2q2 = 2.0f * q2;
00007c  e58d0050          STR      r0,[sp,#0x50]
000080  e3a01001          MOV      r1,#1
000084  e1a00006          MOV      r0,r6
000088  ebfffffe          BL       __ARM_scalbnf
00008c  e58d001c          STR      r0,[sp,#0x1c]
;;;70       float _2q3 = 2.0f * q3;
000090  e58d0020          STR      r0,[sp,#0x20]
000094  e59d0004          LDR      r0,[sp,#4]
000098  e3a01001          MOV      r1,#1
00009c  ebfffffe          BL       __ARM_scalbnf
0000a0  e1a0a000          MOV      r10,r0
;;;71       float _2q4 = 2.0f * q4;
0000a4  e58d0030          STR      r0,[sp,#0x30]
0000a8  e59d0000          LDR      r0,[sp,#0]
0000ac  e3a01001          MOV      r1,#1
0000b0  ebfffffe          BL       __ARM_scalbnf
0000b4  e58d004c          STR      r0,[sp,#0x4c]
;;;72       float _2q1q3 = 2.0f * q1 * q3;
0000b8  e59d1004          LDR      r1,[sp,#4]
0000bc  e1a0000b          MOV      r0,r11                ;71
0000c0  ebfffffe          BL       __aeabi_fmul
0000c4  e58d0058          STR      r0,[sp,#0x58]
;;;73       float _2q3q4 = 2.0f * q3 * q4;
0000c8  e59d1000          LDR      r1,[sp,#0]
0000cc  e1a0000a          MOV      r0,r10                ;72
0000d0  ebfffffe          BL       __aeabi_fmul
;;;74       float q1q1 = q1 * q1;
0000d4  e59d100c          LDR      r1,[sp,#0xc]
0000d8  e58d0018          STR      r0,[sp,#0x18]
0000dc  e1a00001          MOV      r0,r1
0000e0  ebfffffe          BL       __aeabi_fmul
;;;75       float q1q2 = q1 * q2;
0000e4  e58d002c          STR      r0,[sp,#0x2c]
0000e8  e59d000c          LDR      r0,[sp,#0xc]
0000ec  e1a01006          MOV      r1,r6
0000f0  ebfffffe          BL       __aeabi_fmul
;;;76       float q1q3 = q1 * q3;
0000f4  e58d003c          STR      r0,[sp,#0x3c]
0000f8  e59d000c          LDR      r0,[sp,#0xc]
0000fc  e59d1004          LDR      r1,[sp,#4]
000100  ebfffffe          BL       __aeabi_fmul
;;;77       float q1q4 = q1 * q4;
000104  e58d0010          STR      r0,[sp,#0x10]
000108  e59d000c          LDR      r0,[sp,#0xc]
00010c  e59d1000          LDR      r1,[sp,#0]
000110  ebfffffe          BL       __aeabi_fmul
;;;78       float q2q2 = q2 * q2;
000114  e1a01006          MOV      r1,r6
000118  e58d0040          STR      r0,[sp,#0x40]
00011c  e1a00001          MOV      r0,r1
000120  ebfffffe          BL       __aeabi_fmul
;;;79       float q2q3 = q2 * q3;
000124  e58d0024          STR      r0,[sp,#0x24]
000128  e59d1004          LDR      r1,[sp,#4]
00012c  e1a00006          MOV      r0,r6
000130  ebfffffe          BL       __aeabi_fmul
;;;80       float q2q4 = q2 * q4;
000134  e58d0044          STR      r0,[sp,#0x44]
000138  e59d1000          LDR      r1,[sp,#0]
00013c  e1a00006          MOV      r0,r6
000140  ebfffffe          BL       __aeabi_fmul
;;;81       float q3q3 = q3 * q3;
000144  e59d1004          LDR      r1,[sp,#4]
000148  e58d0014          STR      r0,[sp,#0x14]
00014c  e1a00001          MOV      r0,r1
000150  ebfffffe          BL       __aeabi_fmul
;;;82       float q3q4 = q3 * q4;
000154  e58d0008          STR      r0,[sp,#8]
000158  e59d0004          LDR      r0,[sp,#4]
00015c  e59d1000          LDR      r1,[sp,#0]
000160  ebfffffe          BL       __aeabi_fmul
;;;83       float q4q4 = q4 * q4;
000164  e59d1000          LDR      r1,[sp,#0]
000168  e58d0038          STR      r0,[sp,#0x38]
00016c  e1a00001          MOV      r0,r1
000170  ebfffffe          BL       __aeabi_fmul
;;;84     
;;;85       // Normalise accelerometer measurement
;;;86       norm = sqrt(ax * ax + ay * ay + az * az);
000174  e1a01004          MOV      r1,r4
000178  e58d0028          STR      r0,[sp,#0x28]
00017c  e1a00001          MOV      r0,r1
000180  ebfffffe          BL       __aeabi_fmul
000184  e1a0b000          MOV      r11,r0
000188  e1a01008          MOV      r1,r8
00018c  e1a00001          MOV      r0,r1
000190  ebfffffe          BL       __aeabi_fmul
000194  e1a0a000          MOV      r10,r0
000198  e1a01009          MOV      r1,r9
00019c  e1a00001          MOV      r0,r1
0001a0  ebfffffe          BL       __aeabi_fmul
0001a4  e1a0100a          MOV      r1,r10
0001a8  ebfffffe          BL       __aeabi_fadd
0001ac  e1a0100b          MOV      r1,r11
0001b0  ebfffffe          BL       __aeabi_fadd
0001b4  ebfffffe          BL       __aeabi_f2d
0001b8  ebfffffe          BL       sqrt
0001bc  ebfffffe          BL       __aeabi_d2f
0001c0  e1a01000          MOV      r1,r0
;;;87       if (norm == 0.0f) return; // handle NaN
0001c4  e1a00080          LSL      r0,r0,#1
0001c8  e1b00c20          LSRS     r0,r0,#24
0001cc  0a0002cd          BEQ      |L1.3336|
;;;88       norm = 1.0f/norm;
0001d0  e3a005fe          MOV      r0,#0x3f800000
0001d4  ebfffffe          BL       __aeabi_fdiv
0001d8  e1a0a000          MOV      r10,r0
;;;89       ax *= norm;
0001dc  e1a01000          MOV      r1,r0
0001e0  e1a00009          MOV      r0,r9
0001e4  ebfffffe          BL       __aeabi_fmul
;;;90       ay *= norm;
0001e8  e58d0064          STR      r0,[sp,#0x64]
0001ec  e1a0100a          MOV      r1,r10
0001f0  e1a00008          MOV      r0,r8
0001f4  ebfffffe          BL       __aeabi_fmul
;;;91       az *= norm;
0001f8  e58d0068          STR      r0,[sp,#0x68]
0001fc  e1a0100a          MOV      r1,r10
000200  e1a00004          MOV      r0,r4
000204  ebfffffe          BL       __aeabi_fmul
;;;92     
;;;93       // Normalise magnetometer measurement
;;;94       norm = sqrt(mx * mx + my * my + mz * mz);
000208  e58d006c          STR      r0,[sp,#0x6c]
00020c  e59d10a8          LDR      r1,[sp,#0xa8]
000210  e1a00001          MOV      r0,r1
000214  ebfffffe          BL       __aeabi_fmul
000218  e59d10a4          LDR      r1,[sp,#0xa4]
00021c  e1a04000          MOV      r4,r0
000220  e1a00001          MOV      r0,r1
000224  ebfffffe          BL       __aeabi_fmul
000228  e1a08000          MOV      r8,r0
00022c  e1a01007          MOV      r1,r7
000230  e1a00001          MOV      r0,r1
000234  ebfffffe          BL       __aeabi_fmul
000238  e1a01008          MOV      r1,r8
00023c  ebfffffe          BL       __aeabi_fadd
000240  e1a01004          MOV      r1,r4
000244  ebfffffe          BL       __aeabi_fadd
000248  ebfffffe          BL       __aeabi_f2d
00024c  ebfffffe          BL       sqrt
000250  ebfffffe          BL       __aeabi_d2f
000254  e1a01000          MOV      r1,r0
;;;95       if (norm == 0.0f) return; // handle NaN
000258  e1a00080          LSL      r0,r0,#1
00025c  e1b00c20          LSRS     r0,r0,#24
000260  0a0002a8          BEQ      |L1.3336|
;;;96       norm = 1.0f/norm;
000264  e3a005fe          MOV      r0,#0x3f800000
000268  ebfffffe          BL       __aeabi_fdiv
00026c  e1a04000          MOV      r4,r0
;;;97       mx *= norm;
000270  e1a01000          MOV      r1,r0
000274  e1a00007          MOV      r0,r7
000278  ebfffffe          BL       __aeabi_fmul
;;;98       my *= norm;
00027c  e58d00a0          STR      r0,[sp,#0xa0]
000280  e59d00a4          LDR      r0,[sp,#0xa4]
000284  e1a01004          MOV      r1,r4
000288  ebfffffe          BL       __aeabi_fmul
;;;99       mz *= norm;
00028c  e58d00a4          STR      r0,[sp,#0xa4]
000290  e59d00a8          LDR      r0,[sp,#0xa8]
000294  e1a01004          MOV      r1,r4
000298  ebfffffe          BL       __aeabi_fmul
00029c  e58d00a8          STR      r0,[sp,#0xa8]
;;;100    
;;;101      // Reference direction of Earth's magnetic field
;;;102      _2q1mx = 2.0f * q1 * mx;
0002a0  e59d0034          LDR      r0,[sp,#0x34]
0002a4  e59d10a0          LDR      r1,[sp,#0xa0]
0002a8  ebfffffe          BL       __aeabi_fmul
0002ac  e1a0a000          MOV      r10,r0
;;;103      _2q1my = 2.0f * q1 * my;
0002b0  e59d0034          LDR      r0,[sp,#0x34]
0002b4  e59d10a4          LDR      r1,[sp,#0xa4]
0002b8  ebfffffe          BL       __aeabi_fmul
0002bc  e1a09000          MOV      r9,r0
;;;104      _2q1mz = 2.0f * q1 * mz;
0002c0  e59d0034          LDR      r0,[sp,#0x34]
0002c4  e59d10a8          LDR      r1,[sp,#0xa8]
0002c8  ebfffffe          BL       __aeabi_fmul
0002cc  e1a0b000          MOV      r11,r0
;;;105      _2q2mx = 2.0f * q2 * mx;
0002d0  e59d001c          LDR      r0,[sp,#0x1c]
0002d4  e59d10a0          LDR      r1,[sp,#0xa0]
0002d8  ebfffffe          BL       __aeabi_fmul
0002dc  e1a08000          MOV      r8,r0
;;;106      hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 +
0002e0  e59d00a0          LDR      r0,[sp,#0xa0]
0002e4  e59d1028          LDR      r1,[sp,#0x28]
0002e8  ebfffffe          BL       __aeabi_fmul
0002ec  e58d005c          STR      r0,[sp,#0x5c]
0002f0  e59d00a0          LDR      r0,[sp,#0xa0]
0002f4  e59d1008          LDR      r1,[sp,#8]
0002f8  ebfffffe          BL       __aeabi_fmul
0002fc  e58d0054          STR      r0,[sp,#0x54]
000300  e59d0020          LDR      r0,[sp,#0x20]
000304  e59d10a8          LDR      r1,[sp,#0xa8]
000308  ebfffffe          BL       __aeabi_fmul
00030c  e59d1000          LDR      r1,[sp,#0]
000310  ebfffffe          BL       __aeabi_fmul
000314  e1a07000          MOV      r7,r0
000318  e59d0020          LDR      r0,[sp,#0x20]
00031c  e59d10a4          LDR      r1,[sp,#0xa4]
000320  ebfffffe          BL       __aeabi_fmul
000324  e59d1004          LDR      r1,[sp,#4]
000328  ebfffffe          BL       __aeabi_fmul
00032c  e1a04000          MOV      r4,r0
000330  e59d00a0          LDR      r0,[sp,#0xa0]
000334  e59d1024          LDR      r1,[sp,#0x24]
000338  ebfffffe          BL       __aeabi_fmul
00033c  e58d0048          STR      r0,[sp,#0x48]
000340  e59d1004          LDR      r1,[sp,#4]
000344  e1a0000b          MOV      r0,r11
000348  ebfffffe          BL       __aeabi_fmul
00034c  e58d0034          STR      r0,[sp,#0x34]
000350  e59d1000          LDR      r1,[sp,#0]
000354  e1a00009          MOV      r0,r9
000358  ebfffffe          BL       __aeabi_fmul
00035c  e58d001c          STR      r0,[sp,#0x1c]
000360  e59d00a0          LDR      r0,[sp,#0xa0]
000364  e59d102c          LDR      r1,[sp,#0x2c]
000368  ebfffffe          BL       __aeabi_fmul
00036c  e59d101c          LDR      r1,[sp,#0x1c]
000370  ebfffffe          BL       __aeabi_fsub
000374  e59d1034          LDR      r1,[sp,#0x34]
000378  ebfffffe          BL       __aeabi_fadd
00037c  e59d1048          LDR      r1,[sp,#0x48]
000380  ebfffffe          BL       __aeabi_fadd
000384  e1a01004          MOV      r1,r4
000388  ebfffffe          BL       __aeabi_fadd
00038c  e1a01007          MOV      r1,r7
000390  ebfffffe          BL       __aeabi_fadd
000394  e59d1054          LDR      r1,[sp,#0x54]
000398  ebfffffe          BL       __aeabi_fsub
00039c  e59d105c          LDR      r1,[sp,#0x5c]
0003a0  ebfffffe          BL       __aeabi_fsub
0003a4  e1a04000          MOV      r4,r0
;;;107           _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
;;;108      hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
0003a8  e59d00a4          LDR      r0,[sp,#0xa4]
0003ac  e59d1028          LDR      r1,[sp,#0x28]
0003b0  ebfffffe          BL       __aeabi_fmul
0003b4  e58d005c          STR      r0,[sp,#0x5c]
0003b8  e59d0030          LDR      r0,[sp,#0x30]
0003bc  e59d10a8          LDR      r1,[sp,#0xa8]
0003c0  ebfffffe          BL       __aeabi_fmul
0003c4  e59d1000          LDR      r1,[sp,#0]
0003c8  ebfffffe          BL       __aeabi_fmul
0003cc  e1a07000          MOV      r7,r0
0003d0  e59d00a4          LDR      r0,[sp,#0xa4]
0003d4  e59d1008          LDR      r1,[sp,#8]
0003d8  ebfffffe          BL       __aeabi_fmul
0003dc  e58d0054          STR      r0,[sp,#0x54]
0003e0  e59d00a4          LDR      r0,[sp,#0xa4]
0003e4  e59d1024          LDR      r1,[sp,#0x24]
0003e8  ebfffffe          BL       __aeabi_fmul
0003ec  e58d0048          STR      r0,[sp,#0x48]
0003f0  e59d1004          LDR      r1,[sp,#4]
0003f4  e1a00008          MOV      r0,r8
0003f8  ebfffffe          BL       __aeabi_fmul
0003fc  e58d0034          STR      r0,[sp,#0x34]
000400  e1a01006          MOV      r1,r6
000404  e1a0000b          MOV      r0,r11
000408  ebfffffe          BL       __aeabi_fmul
00040c  e58d001c          STR      r0,[sp,#0x1c]
000410  e59d00a4          LDR      r0,[sp,#0xa4]
000414  e59d102c          LDR      r1,[sp,#0x2c]
000418  ebfffffe          BL       __aeabi_fmul
00041c  e1a0b000          MOV      r11,r0
000420  e59d1000          LDR      r1,[sp,#0]
000424  e1a0000a          MOV      r0,r10
000428  ebfffffe          BL       __aeabi_fmul
00042c  e1a0100b          MOV      r1,r11
000430  ebfffffe          BL       __aeabi_fadd
000434  e59d101c          LDR      r1,[sp,#0x1c]
000438  ebfffffe          BL       __aeabi_fsub
00043c  e59d1034          LDR      r1,[sp,#0x34]
000440  ebfffffe          BL       __aeabi_fadd
000444  e59d1048          LDR      r1,[sp,#0x48]
000448  ebfffffe          BL       __aeabi_fsub
00044c  e59d1054          LDR      r1,[sp,#0x54]
000450  ebfffffe          BL       __aeabi_fadd
000454  e1a01007          MOV      r1,r7
000458  ebfffffe          BL       __aeabi_fadd
00045c  e59d105c          LDR      r1,[sp,#0x5c]
000460  ebfffffe          BL       __aeabi_fsub
;;;109      _2bx = sqrt(hx * hx + hy * hy);
000464  e1a01000          MOV      r1,r0
000468  ebfffffe          BL       __aeabi_fmul
00046c  e1a07000          MOV      r7,r0
000470  e1a01004          MOV      r1,r4
000474  e1a00001          MOV      r0,r1
000478  ebfffffe          BL       __aeabi_fmul
00047c  e1a01007          MOV      r1,r7
000480  ebfffffe          BL       __aeabi_fadd
000484  ebfffffe          BL       __aeabi_f2d
000488  ebfffffe          BL       sqrt
00048c  ebfffffe          BL       __aeabi_d2f
;;;110      _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
000490  e58d001c          STR      r0,[sp,#0x1c]
000494  e59d00a8          LDR      r0,[sp,#0xa8]
000498  e59d1028          LDR      r1,[sp,#0x28]
00049c  ebfffffe          BL       __aeabi_fmul
0004a0  e58d0048          STR      r0,[sp,#0x48]
0004a4  e59d00a8          LDR      r0,[sp,#0xa8]
0004a8  e59d1008          LDR      r1,[sp,#8]
0004ac  ebfffffe          BL       __aeabi_fmul
0004b0  e58d0034          STR      r0,[sp,#0x34]
0004b4  e59d0030          LDR      r0,[sp,#0x30]
0004b8  e59d10a4          LDR      r1,[sp,#0xa4]
0004bc  ebfffffe          BL       __aeabi_fmul
0004c0  e59d1000          LDR      r1,[sp,#0]
0004c4  ebfffffe          BL       __aeabi_fmul
0004c8  e1a04000          MOV      r4,r0
0004cc  e59d00a8          LDR      r0,[sp,#0xa8]
0004d0  e59d1024          LDR      r1,[sp,#0x24]
0004d4  ebfffffe          BL       __aeabi_fmul
0004d8  e1a0b000          MOV      r11,r0
0004dc  e59d1000          LDR      r1,[sp,#0]
0004e0  e1a00008          MOV      r0,r8
0004e4  ebfffffe          BL       __aeabi_fmul
0004e8  e1a08000          MOV      r8,r0
0004ec  e59d00a8          LDR      r0,[sp,#0xa8]
0004f0  e59d102c          LDR      r1,[sp,#0x2c]
0004f4  ebfffffe          BL       __aeabi_fmul
0004f8  e1a07000          MOV      r7,r0
0004fc  e59d1004          LDR      r1,[sp,#4]
000500  e1a0000a          MOV      r0,r10
000504  ebfffffe          BL       __aeabi_fmul
000508  e1a0a000          MOV      r10,r0
00050c  e1a01006          MOV      r1,r6
000510  e1a00009          MOV      r0,r9
000514  ebfffffe          BL       __aeabi_fmul
000518  e1a0100a          MOV      r1,r10
00051c  ebfffffe          BL       __aeabi_fsub
000520  e1a01007          MOV      r1,r7
000524  ebfffffe          BL       __aeabi_fadd
000528  e1a01008          MOV      r1,r8
00052c  ebfffffe          BL       __aeabi_fadd
000530  e1a0100b          MOV      r1,r11
000534  ebfffffe          BL       __aeabi_fsub
000538  e1a01004          MOV      r1,r4
00053c  ebfffffe          BL       __aeabi_fadd
000540  e59d1034          LDR      r1,[sp,#0x34]
000544  ebfffffe          BL       __aeabi_fsub
000548  e59d1048          LDR      r1,[sp,#0x48]
00054c  ebfffffe          BL       __aeabi_fadd
000550  e1a08000          MOV      r8,r0
;;;111      _4bx = 2.0f * _2bx;
000554  e59d001c          LDR      r0,[sp,#0x1c]
000558  e3a01001          MOV      r1,#1
00055c  ebfffffe          BL       __ARM_scalbnf
;;;112      _4bz = 2.0f * _2bz;
000560  e58d002c          STR      r0,[sp,#0x2c]
000564  e3a01001          MOV      r1,#1
000568  e1a00008          MOV      r0,r8
00056c  ebfffffe          BL       __ARM_scalbnf
;;;113    
;;;114      // Gradient decent algorithm corrective step
;;;115      s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
000570  e58d0034          STR      r0,[sp,#0x34]
000574  e59d1024          LDR      r1,[sp,#0x24]
000578  e3a0043f          MOV      r0,#0x3f000000
00057c  ebfffffe          BL       __aeabi_fsub
000580  e59d1008          LDR      r1,[sp,#8]
000584  ebfffffe          BL       __aeabi_fsub
000588  e1a01008          MOV      r1,r8
00058c  ebfffffe          BL       __aeabi_fmul
000590  e1a04000          MOV      r4,r0
000594  e28d1010          ADD      r1,sp,#0x10
000598  e8910003          LDM      r1,{r0,r1}
00059c  ebfffffe          BL       __aeabi_fadd
0005a0  e59d101c          LDR      r1,[sp,#0x1c]
0005a4  ebfffffe          BL       __aeabi_fmul
0005a8  e1a01004          MOV      r1,r4
0005ac  ebfffffe          BL       __aeabi_fadd
0005b0  e59d10a8          LDR      r1,[sp,#0xa8]
0005b4  ebfffffe          BL       __aeabi_fsub
0005b8  e1a04000          MOV      r4,r0
0005bc  e58d0048          STR      r0,[sp,#0x48]
0005c0  e59d001c          LDR      r0,[sp,#0x1c]
0005c4  e59d1004          LDR      r1,[sp,#4]
0005c8  ebfffffe          BL       __aeabi_fmul
0005cc  e1a01004          MOV      r1,r4
0005d0  e58d0054          STR      r0,[sp,#0x54]
0005d4  ebfffffe          BL       __aeabi_fmul
0005d8  e1a07000          MOV      r7,r0
0005dc  e59d003c          LDR      r0,[sp,#0x3c]
0005e0  e59d1038          LDR      r1,[sp,#0x38]
0005e4  ebfffffe          BL       __aeabi_fadd
0005e8  e1a01008          MOV      r1,r8
0005ec  ebfffffe          BL       __aeabi_fmul
0005f0  e1a04000          MOV      r4,r0
0005f4  e59d0044          LDR      r0,[sp,#0x44]
0005f8  e59d1040          LDR      r1,[sp,#0x40]
0005fc  ebfffffe          BL       __aeabi_fsub
000600  e59d101c          LDR      r1,[sp,#0x1c]
000604  ebfffffe          BL       __aeabi_fmul
000608  e1a01004          MOV      r1,r4
00060c  ebfffffe          BL       __aeabi_fadd
000610  e59d10a4          LDR      r1,[sp,#0xa4]
000614  ebfffffe          BL       __aeabi_fsub
000618  e1a04000          MOV      r4,r0
00061c  e58d0038          STR      r0,[sp,#0x38]
000620  e59d001c          LDR      r0,[sp,#0x1c]
000624  e59d1000          LDR      r1,[sp,#0]
000628  ebfffffe          BL       __aeabi_fmul
00062c  e1a09000          MOV      r9,r0
000630  e1a01006          MOV      r1,r6
000634  e1a00008          MOV      r0,r8
000638  ebfffffe          BL       __aeabi_fmul
00063c  e1a01009          MOV      r1,r9
000640  e58d0040          STR      r0,[sp,#0x40]
000644  ebfffffe          BL       __aeabi_fsub
000648  e1a01004          MOV      r1,r4
00064c  ebfffffe          BL       __aeabi_fmul
000650  e1a0a000          MOV      r10,r0
000654  e59d0014          LDR      r0,[sp,#0x14]
000658  e59d1010          LDR      r1,[sp,#0x10]
00065c  ebfffffe          BL       __aeabi_fsub
000660  e1a01008          MOV      r1,r8
000664  ebfffffe          BL       __aeabi_fmul
000668  e1a04000          MOV      r4,r0
00066c  e59d1008          LDR      r1,[sp,#8]
000670  e3a0043f          MOV      r0,#0x3f000000
000674  ebfffffe          BL       __aeabi_fsub
000678  e59d1028          LDR      r1,[sp,#0x28]
00067c  ebfffffe          BL       __aeabi_fsub
000680  e59d101c          LDR      r1,[sp,#0x1c]
000684  ebfffffe          BL       __aeabi_fmul
000688  e1a01004          MOV      r1,r4
00068c  ebfffffe          BL       __aeabi_fadd
000690  e59d10a0          LDR      r1,[sp,#0xa0]
000694  ebfffffe          BL       __aeabi_fsub
000698  e1a04000          MOV      r4,r0
00069c  e58d0010          STR      r0,[sp,#0x10]
0006a0  e59d1004          LDR      r1,[sp,#4]
0006a4  e1a00008          MOV      r0,r8
0006a8  ebfffffe          BL       __aeabi_fmul
0006ac  e1a01004          MOV      r1,r4
0006b0  e58d0044          STR      r0,[sp,#0x44]
0006b4  ebfffffe          BL       __aeabi_fmul
0006b8  e1a0b000          MOV      r11,r0
0006bc  e59d0014          LDR      r0,[sp,#0x14]
0006c0  e3a01001          MOV      r1,#1
0006c4  ebfffffe          BL       __ARM_scalbnf
0006c8  e59d1058          LDR      r1,[sp,#0x58]
0006cc  ebfffffe          BL       __aeabi_fsub
0006d0  e59d1064          LDR      r1,[sp,#0x64]
0006d4  ebfffffe          BL       __aeabi_fsub
0006d8  e59d1030          LDR      r1,[sp,#0x30]
0006dc  e58d0014          STR      r0,[sp,#0x14]
0006e0  ebfffffe          BL       __aeabi_fmul
0006e4  e1a04000          MOV      r4,r0
0006e8  e59d003c          LDR      r0,[sp,#0x3c]
0006ec  e3a01001          MOV      r1,#1
0006f0  ebfffffe          BL       __ARM_scalbnf
0006f4  e59d1018          LDR      r1,[sp,#0x18]
0006f8  ebfffffe          BL       __aeabi_fadd
0006fc  e59d1068          LDR      r1,[sp,#0x68]
000700  ebfffffe          BL       __aeabi_fsub
000704  e59d1020          LDR      r1,[sp,#0x20]
000708  e58d0018          STR      r0,[sp,#0x18]
00070c  ebfffffe          BL       __aeabi_fmul
000710  e1a01004          MOV      r1,r4
000714  ebfffffe          BL       __aeabi_fsub
000718  e1a0100b          MOV      r1,r11
00071c  ebfffffe          BL       __aeabi_fsub
000720  e1a0100a          MOV      r1,r10
000724  ebfffffe          BL       __aeabi_fadd
000728  e1a01007          MOV      r1,r7
00072c  ebfffffe          BL       __aeabi_fadd
000730  e58d0028          STR      r0,[sp,#0x28]
;;;116      s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
000734  e59d0034          LDR      r0,[sp,#0x34]
000738  e59d4048          LDR      r4,[sp,#0x48]
00073c  e1a01006          MOV      r1,r6
000740  ebfffffe          BL       __aeabi_fmul
000744  e1a01000          MOV      r1,r0
000748  e1a00009          MOV      r0,r9
00074c  ebfffffe          BL       __aeabi_fsub
000750  e1a01004          MOV      r1,r4
000754  ebfffffe          BL       __aeabi_fmul
000758  e1a09000          MOV      r9,r0
00075c  e59d100c          LDR      r1,[sp,#0xc]
000760  e59d4038          LDR      r4,[sp,#0x38]
000764  e1a00008          MOV      r0,r8
000768  ebfffffe          BL       __aeabi_fmul
00076c  e1a07000          MOV      r7,r0
000770  e59d0054          LDR      r0,[sp,#0x54]
000774  e1a01007          MOV      r1,r7
000778  ebfffffe          BL       __aeabi_fadd
00077c  e1a01004          MOV      r1,r4
000780  ebfffffe          BL       __aeabi_fmul
000784  e1a0a000          MOV      r10,r0
000788  e59d1000          LDR      r1,[sp,#0]
00078c  e59d4010          LDR      r4,[sp,#0x10]
000790  e1a00008          MOV      r0,r8
000794  ebfffffe          BL       __aeabi_fmul
000798  e1a01004          MOV      r1,r4
00079c  e58d003c          STR      r0,[sp,#0x3c]
0007a0  ebfffffe          BL       __aeabi_fmul
0007a4  e1a08000          MOV      r8,r0
0007a8  e59d0008          LDR      r0,[sp,#8]
0007ac  e3a01001          MOV      r1,#1
0007b0  ebfffffe          BL       __ARM_scalbnf
0007b4  e1a04000          MOV      r4,r0
0007b8  e59d0024          LDR      r0,[sp,#0x24]
0007bc  e3a01001          MOV      r1,#1
0007c0  ebfffffe          BL       __ARM_scalbnf
0007c4  e3a015fe          MOV      r1,#0x3f800000
0007c8  ebfffffe          BL       __aeabi_frsub
0007cc  e1a01004          MOV      r1,r4
0007d0  ebfffffe          BL       __aeabi_fsub
0007d4  e59d106c          LDR      r1,[sp,#0x6c]
0007d8  ebfffffe          BL       __aeabi_fsub
0007dc  e1a04000          MOV      r4,r0
0007e0  e58d0024          STR      r0,[sp,#0x24]
0007e4  e3a01002          MOV      r1,#2
0007e8  e1a00006          MOV      r0,r6
0007ec  ebfffffe          BL       __ARM_scalbnf
0007f0  e1a01004          MOV      r1,r4
0007f4  ebfffffe          BL       __aeabi_fmul
0007f8  e1a0b000          MOV      r11,r0
0007fc  e59d0018          LDR      r0,[sp,#0x18]
000800  e59d1050          LDR      r1,[sp,#0x50]
000804  ebfffffe          BL       __aeabi_fmul
000808  e1a04000          MOV      r4,r0
00080c  e59d0014          LDR      r0,[sp,#0x14]
000810  e59d104c          LDR      r1,[sp,#0x4c]
000814  ebfffffe          BL       __aeabi_fmul
000818  e1a01004          MOV      r1,r4
00081c  ebfffffe          BL       __aeabi_fadd
000820  e1a0100b          MOV      r1,r11
000824  ebfffffe          BL       __aeabi_fsub
000828  e1a01008          MOV      r1,r8
00082c  ebfffffe          BL       __aeabi_fadd
000830  e1a0100a          MOV      r1,r10
000834  ebfffffe          BL       __aeabi_fadd
000838  e1a01009          MOV      r1,r9
00083c  ebfffffe          BL       __aeabi_fadd
000840  e58d0008          STR      r0,[sp,#8]
;;;117      s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
000844  e59d0034          LDR      r0,[sp,#0x34]
000848  e59d1004          LDR      r1,[sp,#4]
00084c  e59d4048          LDR      r4,[sp,#0x48]
000850  ebfffffe          BL       __aeabi_fmul
000854  e1a08000          MOV      r8,r0
000858  e59d001c          LDR      r0,[sp,#0x1c]
00085c  e59d100c          LDR      r1,[sp,#0xc]
000860  ebfffffe          BL       __aeabi_fmul
000864  e1a01008          MOV      r1,r8
000868  e58d0034          STR      r0,[sp,#0x34]
00086c  ebfffffe          BL       __aeabi_fsub
000870  e1a01004          MOV      r1,r4
000874  ebfffffe          BL       __aeabi_fmul
000878  e28d9038          ADD      r9,sp,#0x38
00087c  e8990210          LDM      r9,{r4,r9}
000880  e1a08000          MOV      r8,r0
000884  e59d001c          LDR      r0,[sp,#0x1c]
000888  e1a01006          MOV      r1,r6
00088c  ebfffffe          BL       __aeabi_fmul
000890  e1a0b000          MOV      r11,r0
000894  e1a01009          MOV      r1,r9
000898  ebfffffe          BL       __aeabi_fadd
00089c  e1a01004          MOV      r1,r4
0008a0  ebfffffe          BL       __aeabi_fmul
0008a4  e1a09000          MOV      r9,r0
0008a8  e59d002c          LDR      r0,[sp,#0x2c]
0008ac  e59d1004          LDR      r1,[sp,#4]
0008b0  e59d4010          LDR      r4,[sp,#0x10]
0008b4  e2200102          EOR      r0,r0,#0x80000000
0008b8  ebfffffe          BL       __aeabi_fmul
0008bc  e1a01007          MOV      r1,r7
0008c0  ebfffffe          BL       __aeabi_fsub
0008c4  e1a01004          MOV      r1,r4
0008c8  ebfffffe          BL       __aeabi_fmul
0008cc  e1a04000          MOV      r4,r0
0008d0  e59d0004          LDR      r0,[sp,#4]
0008d4  e59d7024          LDR      r7,[sp,#0x24]
0008d8  e3a01002          MOV      r1,#2
0008dc  ebfffffe          BL       __ARM_scalbnf
0008e0  e1a01007          MOV      r1,r7
0008e4  ebfffffe          BL       __aeabi_fmul
0008e8  e1a0a000          MOV      r10,r0
0008ec  e59d0014          LDR      r0,[sp,#0x14]
0008f0  e59d1050          LDR      r1,[sp,#0x50]
0008f4  ebfffffe          BL       __aeabi_fmul
0008f8  e1a07000          MOV      r7,r0
0008fc  e59d0018          LDR      r0,[sp,#0x18]
000900  e59d104c          LDR      r1,[sp,#0x4c]
000904  ebfffffe          BL       __aeabi_fmul
000908  e1a01007          MOV      r1,r7
00090c  ebfffffe          BL       __aeabi_fsub
000910  e1a0100a          MOV      r1,r10
000914  ebfffffe          BL       __aeabi_fsub
000918  e1a01004          MOV      r1,r4
00091c  ebfffffe          BL       __aeabi_fadd
000920  e1a01009          MOV      r1,r9
000924  ebfffffe          BL       __aeabi_fadd
000928  e1a01008          MOV      r1,r8
00092c  ebfffffe          BL       __aeabi_fadd
000930  e1a0a000          MOV      r10,r0
000934  e59d1048          LDR      r1,[sp,#0x48]
000938  e1a0000b          MOV      r0,r11
;;;118      s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
00093c  ebfffffe          BL       __aeabi_fmul
000940  e28d7034          ADD      r7,sp,#0x34
000944  e8970082          LDM      r7,{r1,r7}
000948  e1a04000          MOV      r4,r0
00094c  e59d0044          LDR      r0,[sp,#0x44]
000950  ebfffffe          BL       __aeabi_fsub
000954  e1a01007          MOV      r1,r7
000958  ebfffffe          BL       __aeabi_fmul
00095c  e1a09000          MOV      r9,r0
000960  e59d002c          LDR      r0,[sp,#0x2c]
000964  e59d1000          LDR      r1,[sp,#0]
000968  e59d7010          LDR      r7,[sp,#0x10]
00096c  ebfffffe          BL       __aeabi_fmul
000970  e1a01000          MOV      r1,r0
000974  e59d0040          LDR      r0,[sp,#0x40]
000978  ebfffffe          BL       __aeabi_fsub
00097c  e1a01007          MOV      r1,r7
000980  ebfffffe          BL       __aeabi_fmul
000984  e1a08000          MOV      r8,r0
000988  e59d0018          LDR      r0,[sp,#0x18]
00098c  e59d1030          LDR      r1,[sp,#0x30]
000990  ebfffffe          BL       __aeabi_fmul
000994  e1a07000          MOV      r7,r0
000998  e59d0014          LDR      r0,[sp,#0x14]
00099c  e59d1020          LDR      r1,[sp,#0x20]
0009a0  ebfffffe          BL       __aeabi_fmul
0009a4  e1a01007          MOV      r1,r7
0009a8  ebfffffe          BL       __aeabi_fadd
0009ac  e1a01008          MOV      r1,r8
0009b0  ebfffffe          BL       __aeabi_fadd
0009b4  e1a01009          MOV      r1,r9
0009b8  ebfffffe          BL       __aeabi_fadd
0009bc  e1a01004          MOV      r1,r4
0009c0  ebfffffe          BL       __aeabi_fadd
0009c4  e1a04000          MOV      r4,r0
;;;119      norm = sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
0009c8  e1a01000          MOV      r1,r0
0009cc  ebfffffe          BL       __aeabi_fmul
0009d0  e1a07000          MOV      r7,r0
0009d4  e1a0100a          MOV      r1,r10
0009d8  e1a00001          MOV      r0,r1
0009dc  ebfffffe          BL       __aeabi_fmul
0009e0  e59d1008          LDR      r1,[sp,#8]
0009e4  e1a08000          MOV      r8,r0
0009e8  e1a00001          MOV      r0,r1
0009ec  ebfffffe          BL       __aeabi_fmul
0009f0  e59d1028          LDR      r1,[sp,#0x28]
0009f4  e1a09000          MOV      r9,r0
0009f8  e1a00001          MOV      r0,r1
0009fc  ebfffffe          BL       __aeabi_fmul
000a00  e1a01009          MOV      r1,r9
000a04  ebfffffe          BL       __aeabi_fadd
000a08  e1a01008          MOV      r1,r8
000a0c  ebfffffe          BL       __aeabi_fadd
000a10  e1a01007          MOV      r1,r7
000a14  ebfffffe          BL       __aeabi_fadd
000a18  ebfffffe          BL       __aeabi_f2d
000a1c  ebfffffe          BL       sqrt
000a20  ebfffffe          BL       __aeabi_d2f
000a24  e1a01000          MOV      r1,r0
;;;120      norm = 1.0f/norm;
000a28  e3a005fe          MOV      r0,#0x3f800000
000a2c  ebfffffe          BL       __aeabi_fdiv
000a30  e1a0b000          MOV      r11,r0
;;;121      s1 *= norm;
000a34  e1a01000          MOV      r1,r0
000a38  e59d0028          LDR      r0,[sp,#0x28]
000a3c  ebfffffe          BL       __aeabi_fmul
000a40  e1a09000          MOV      r9,r0
;;;122      s2 *= norm;
000a44  e59d0008          LDR      r0,[sp,#8]
000a48  e1a0100b          MOV      r1,r11
000a4c  ebfffffe          BL       __aeabi_fmul
000a50  e1a07000          MOV      r7,r0
;;;123      s3 *= norm;
000a54  e1a0100b          MOV      r1,r11
000a58  e1a0000a          MOV      r0,r10
000a5c  ebfffffe          BL       __aeabi_fmul
000a60  e1a08000          MOV      r8,r0
;;;124      s4 *= norm;
000a64  e1a0100b          MOV      r1,r11
000a68  e1a00004          MOV      r0,r4
000a6c  ebfffffe          BL       __aeabi_fmul
000a70  e1a0a000          MOV      r10,r0
;;;125    
;;;126      // Compute rate of change of quaternion
;;;127      qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
000a74  e2450004          SUB      r0,r5,#4
000a78  e5900000          LDR      r0,[r0,#0]  ; beta
000a7c  e1a01009          MOV      r1,r9
000a80  e58d0008          STR      r0,[sp,#8]
000a84  ebfffffe          BL       __aeabi_fmul
000a88  e1a04000          MOV      r4,r0
000a8c  e59d0000          LDR      r0,[sp,#0]
000a90  e59d109c          LDR      r1,[sp,#0x9c]
000a94  ebfffffe          BL       __aeabi_fmul
000a98  e1a0b000          MOV      r11,r0
000a9c  e59d0004          LDR      r0,[sp,#4]
000aa0  e59d1098          LDR      r1,[sp,#0x98]
000aa4  ebfffffe          BL       __aeabi_fmul
000aa8  e1a09000          MOV      r9,r0
000aac  e59d1070          LDR      r1,[sp,#0x70]
000ab0  e2260102          EOR      r0,r6,#0x80000000
000ab4  ebfffffe          BL       __aeabi_fmul
000ab8  e1a01009          MOV      r1,r9
000abc  ebfffffe          BL       __aeabi_fsub
000ac0  e1a0100b          MOV      r1,r11
000ac4  ebfffffe          BL       __aeabi_fsub
000ac8  e3e01000          MVN      r1,#0
000acc  ebfffffe          BL       __ARM_scalbnf
000ad0  e1a01004          MOV      r1,r4
000ad4  ebfffffe          BL       __aeabi_fsub
000ad8  e1a04000          MOV      r4,r0
;;;128      qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
000adc  e59d0008          LDR      r0,[sp,#8]
000ae0  e1a01007          MOV      r1,r7
000ae4  ebfffffe          BL       __aeabi_fmul
000ae8  e1a0b000          MOV      r11,r0
000aec  e59d0000          LDR      r0,[sp,#0]
000af0  e59d1098          LDR      r1,[sp,#0x98]
000af4  ebfffffe          BL       __aeabi_fmul
000af8  e1a09000          MOV      r9,r0
000afc  e59d0004          LDR      r0,[sp,#4]
000b00  e59d109c          LDR      r1,[sp,#0x9c]
000b04  ebfffffe          BL       __aeabi_fmul
000b08  e1a07000          MOV      r7,r0
000b0c  e59d000c          LDR      r0,[sp,#0xc]
000b10  e59d1070          LDR      r1,[sp,#0x70]
000b14  ebfffffe          BL       __aeabi_fmul
000b18  e1a01007          MOV      r1,r7
000b1c  ebfffffe          BL       __aeabi_fadd
000b20  e1a01009          MOV      r1,r9
000b24  ebfffffe          BL       __aeabi_fsub
000b28  e3e01000          MVN      r1,#0
000b2c  ebfffffe          BL       __ARM_scalbnf
000b30  e1a0100b          MOV      r1,r11
000b34  ebfffffe          BL       __aeabi_fsub
000b38  e1a09000          MOV      r9,r0
;;;129      qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
000b3c  e59d0008          LDR      r0,[sp,#8]
000b40  e1a01008          MOV      r1,r8
000b44  ebfffffe          BL       __aeabi_fmul
000b48  e1a08000          MOV      r8,r0
000b4c  e59d0000          LDR      r0,[sp,#0]
000b50  e59d1070          LDR      r1,[sp,#0x70]
000b54  ebfffffe          BL       __aeabi_fmul
000b58  e1a07000          MOV      r7,r0
000b5c  e59d109c          LDR      r1,[sp,#0x9c]
000b60  e1a00006          MOV      r0,r6
000b64  ebfffffe          BL       __aeabi_fmul
000b68  e1a0b000          MOV      r11,r0
000b6c  e59d000c          LDR      r0,[sp,#0xc]
000b70  e59d1098          LDR      r1,[sp,#0x98]
000b74  ebfffffe          BL       __aeabi_fmul
000b78  e1a0100b          MOV      r1,r11
000b7c  ebfffffe          BL       __aeabi_fsub
000b80  e1a01007          MOV      r1,r7
000b84  ebfffffe          BL       __aeabi_fadd
000b88  e3e01000          MVN      r1,#0
000b8c  ebfffffe          BL       __ARM_scalbnf
000b90  e1a01008          MOV      r1,r8
000b94  ebfffffe          BL       __aeabi_fsub
000b98  e1a07000          MOV      r7,r0
;;;130      qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
000b9c  e59d0008          LDR      r0,[sp,#8]
000ba0  e1a0100a          MOV      r1,r10
000ba4  ebfffffe          BL       __aeabi_fmul
000ba8  e1a0b000          MOV      r11,r0
000bac  e59d0004          LDR      r0,[sp,#4]
000bb0  e59d1070          LDR      r1,[sp,#0x70]
000bb4  ebfffffe          BL       __aeabi_fmul
000bb8  e1a0a000          MOV      r10,r0
000bbc  e59d1098          LDR      r1,[sp,#0x98]
000bc0  e1a00006          MOV      r0,r6
000bc4  ebfffffe          BL       __aeabi_fmul
000bc8  e1a08000          MOV      r8,r0
000bcc  e59d000c          LDR      r0,[sp,#0xc]
000bd0  e59d109c          LDR      r1,[sp,#0x9c]
000bd4  ebfffffe          BL       __aeabi_fmul
000bd8  e1a01008          MOV      r1,r8
000bdc  ebfffffe          BL       __aeabi_fadd
000be0  e1a0100a          MOV      r1,r10
000be4  ebfffffe          BL       __aeabi_fsub
000be8  e3e01000          MVN      r1,#0
000bec  ebfffffe          BL       __ARM_scalbnf
000bf0  e1a0100b          MOV      r1,r11
000bf4  ebfffffe          BL       __aeabi_fsub
000bf8  e1a08000          MOV      r8,r0
;;;131    
;;;132      // Integrate to yield quaternion
;;;133      q1 += qDot1 * deltat;
000bfc  e59d10ac          LDR      r1,[sp,#0xac]
000c00  e1a00004          MOV      r0,r4
000c04  ebfffffe          BL       __aeabi_fmul
000c08  e59d100c          LDR      r1,[sp,#0xc]
000c0c  ebfffffe          BL       __aeabi_fadd
000c10  e1a04000          MOV      r4,r0
;;;134      q2 += qDot2 * deltat;
000c14  e59d10ac          LDR      r1,[sp,#0xac]
000c18  e1a00009          MOV      r0,r9
000c1c  ebfffffe          BL       __aeabi_fmul
000c20  e1a01006          MOV      r1,r6
000c24  ebfffffe          BL       __aeabi_fadd
000c28  e1a06000          MOV      r6,r0
;;;135      q3 += qDot3 * deltat;
000c2c  e59d10ac          LDR      r1,[sp,#0xac]
000c30  e1a00007          MOV      r0,r7
000c34  ebfffffe          BL       __aeabi_fmul
000c38  e59d1004          LDR      r1,[sp,#4]
000c3c  ebfffffe          BL       __aeabi_fadd
000c40  e1a07000          MOV      r7,r0
;;;136      q4 += qDot4 * deltat;
000c44  e59d10ac          LDR      r1,[sp,#0xac]
000c48  e1a00008          MOV      r0,r8
000c4c  ebfffffe          BL       __aeabi_fmul
000c50  e59d1000          LDR      r1,[sp,#0]
000c54  ebfffffe          BL       __aeabi_fadd
000c58  e1a08000          MOV      r8,r0
;;;137      norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
000c5c  e1a01000          MOV      r1,r0
000c60  ebfffffe          BL       __aeabi_fmul
000c64  e1a0b000          MOV      r11,r0
000c68  e1a01007          MOV      r1,r7
000c6c  e1a00001          MOV      r0,r1
000c70  ebfffffe          BL       __aeabi_fmul
000c74  e1a0a000          MOV      r10,r0
000c78  e1a01006          MOV      r1,r6
000c7c  e1a00001          MOV      r0,r1
000c80  ebfffffe          BL       __aeabi_fmul
000c84  e1a09000          MOV      r9,r0
000c88  e1a01004          MOV      r1,r4
000c8c  e1a00001          MOV      r0,r1
000c90  ebfffffe          BL       __aeabi_fmul
000c94  e1a01009          MOV      r1,r9
000c98  ebfffffe          BL       __aeabi_fadd
000c9c  e1a0100a          MOV      r1,r10
000ca0  ebfffffe          BL       __aeabi_fadd
000ca4  e1a0100b          MOV      r1,r11
000ca8  ebfffffe          BL       __aeabi_fadd
000cac  ebfffffe          BL       __aeabi_f2d
000cb0  ebfffffe          BL       sqrt
000cb4  ebfffffe          BL       __aeabi_d2f
000cb8  e1a01000          MOV      r1,r0
;;;138      norm = 1.0f/norm;
000cbc  e3a005fe          MOV      r0,#0x3f800000
000cc0  ebfffffe          BL       __aeabi_fdiv
000cc4  e1a09000          MOV      r9,r0
;;;139      q[0] = q1 * norm;
000cc8  e1a01000          MOV      r1,r0
000ccc  e1a00004          MOV      r0,r4
000cd0  ebfffffe          BL       __aeabi_fmul
;;;140      q[1] = q2 * norm;
000cd4  e5850000          STR      r0,[r5,#0]  ; q
000cd8  e1a01009          MOV      r1,r9
000cdc  e1a00006          MOV      r0,r6
000ce0  ebfffffe          BL       __aeabi_fmul
;;;141      q[2] = q3 * norm;
000ce4  e5850004          STR      r0,[r5,#4]  ; q
000ce8  e1a01009          MOV      r1,r9
000cec  e1a00007          MOV      r0,r7
000cf0  ebfffffe          BL       __aeabi_fmul
;;;142      q[3] = q4 * norm;
000cf4  e5850008          STR      r0,[r5,#8]  ; q
000cf8  e1a01009          MOV      r1,r9
000cfc  e1a00008          MOV      r0,r8
000d00  ebfffffe          BL       __aeabi_fmul
000d04  e585000c          STR      r0,[r5,#0xc]  ; q
                  |L1.3336|
;;;143    }
000d08  e28dd074          ADD      sp,sp,#0x74
000d0c  e8bd4ff0          POP      {r4-r11,lr}
000d10  e12fff1e          BX       lr
;;;144    
                          ENDP

                  MahonyQuaternionUpdate PROC
;;;149    // the error between estimated reference vectors and measured ones.
;;;150    void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
000d14  e92d4fff          PUSH     {r0-r11,lr}
;;;151    {
000d18  e1a09000          MOV      r9,r0
;;;152      // short name local variable for readability
;;;153      float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
000d1c  e59f0294          LDR      r0,|L1.4024|
000d20  e1a08001          MOV      r8,r1                 ;151
000d24  e5901000          LDR      r1,[r0,#0]  ; q
000d28  e24dd044          SUB      sp,sp,#0x44           ;151
000d2c  e58d1000          STR      r1,[sp,#0]
000d30  e9b00050          LDMIB    r0!,{r4,r6}  ; q, q, q
000d34  e5905004          LDR      r5,[r0,#4]
000d38  e1a07002          MOV      r7,r2                 ;151
;;;154      float norm;
;;;155      float hx, hy, bx, bz;
;;;156      float vx, vy, vz, wx, wy, wz;
;;;157      float ex, ey, ez;
;;;158      float pa, pb, pc;
;;;159    					
;;;160      // Auxiliary variables to avoid repeated arithmetic
;;;161      float q1q1 = q1 * q1;
000d3c  e1a00001          MOV      r0,r1
000d40  ebfffffe          BL       __aeabi_fmul
;;;162      float q1q2 = q1 * q2;
000d44  e58d0028          STR      r0,[sp,#0x28]
000d48  e59d0000          LDR      r0,[sp,#0]
000d4c  e1a01004          MOV      r1,r4
000d50  ebfffffe          BL       __aeabi_fmul
;;;163      float q1q3 = q1 * q3;
000d54  e58d000c          STR      r0,[sp,#0xc]
000d58  e59d0000          LDR      r0,[sp,#0]
000d5c  e1a01006          MOV      r1,r6
000d60  ebfffffe          BL       __aeabi_fmul
;;;164      float q1q4 = q1 * q4;
000d64  e58d001c          STR      r0,[sp,#0x1c]
000d68  e59d0000          LDR      r0,[sp,#0]
000d6c  e1a01005          MOV      r1,r5
000d70  ebfffffe          BL       __aeabi_fmul
;;;165      float q2q2 = q2 * q2;
000d74  e1a01004          MOV      r1,r4
000d78  e58d0014          STR      r0,[sp,#0x14]
000d7c  e1a00001          MOV      r0,r1
000d80  ebfffffe          BL       __aeabi_fmul
;;;166      float q2q3 = q2 * q3;
000d84  e58d0024          STR      r0,[sp,#0x24]
000d88  e1a01006          MOV      r1,r6
000d8c  e1a00004          MOV      r0,r4
000d90  ebfffffe          BL       __aeabi_fmul
;;;167      float q2q4 = q2 * q4;
000d94  e58d0018          STR      r0,[sp,#0x18]
000d98  e1a01005          MOV      r1,r5
000d9c  e1a00004          MOV      r0,r4
000da0  ebfffffe          BL       __aeabi_fmul
;;;168      float q3q3 = q3 * q3;
000da4  e1a01006          MOV      r1,r6
000da8  e58d0020          STR      r0,[sp,#0x20]
000dac  e1a00001          MOV      r0,r1
000db0  ebfffffe          BL       __aeabi_fmul
;;;169      float q3q4 = q3 * q4;
000db4  e58d0008          STR      r0,[sp,#8]
000db8  e1a01005          MOV      r1,r5
000dbc  e1a00006          MOV      r0,r6
000dc0  ebfffffe          BL       __aeabi_fmul
;;;170      float q4q4 = q4 * q4;
000dc4  e1a01005          MOV      r1,r5
000dc8  e58d0010          STR      r0,[sp,#0x10]
000dcc  e1a00001          MOV      r0,r1
000dd0  ebfffffe          BL       __aeabi_fmul
;;;171    	
;;;172      // Normalise accelerometer measurement
;;;173      norm = sqrt(ax * ax + ay * ay + az * az);
000dd4  e1a01007          MOV      r1,r7
000dd8  e58d002c          STR      r0,[sp,#0x2c]
000ddc  e1a00001          MOV      r0,r1
000de0  ebfffffe          BL       __aeabi_fmul
000de4  e1a0b000          MOV      r11,r0
000de8  e1a01008          MOV      r1,r8
000dec  e1a00001          MOV      r0,r1
000df0  ebfffffe          BL       __aeabi_fmul
000df4  e1a0a000          MOV      r10,r0
000df8  e1a01009          MOV      r1,r9
000dfc  e1a00001          MOV      r0,r1
000e00  ebfffffe          BL       __aeabi_fmul
000e04  e1a0100a          MOV      r1,r10
000e08  ebfffffe          BL       __aeabi_fadd
000e0c  e1a0100b          MOV      r1,r11
000e10  ebfffffe          BL       __aeabi_fadd
000e14  ebfffffe          BL       __aeabi_f2d
000e18  ebfffffe          BL       sqrt
000e1c  ebfffffe          BL       __aeabi_d2f
000e20  e1a01000          MOV      r1,r0
;;;174      if (norm == 0.0f) return; // Handle NaN
000e24  e1a00080          LSL      r0,r0,#1
000e28  e1b00c20          LSRS     r0,r0,#24
000e2c  0a0001b9          BEQ      |L1.5400|
;;;175      norm = 1.0f / norm;       // Use reciprocal for division
000e30  e3a005fe          MOV      r0,#0x3f800000
000e34  ebfffffe          BL       __aeabi_fdiv
000e38  e1a0a000          MOV      r10,r0
;;;176      ax *= norm;
000e3c  e1a01000          MOV      r1,r0
000e40  e1a00009          MOV      r0,r9
000e44  ebfffffe          BL       __aeabi_fmul
;;;177      ay *= norm;
000e48  e58d0044          STR      r0,[sp,#0x44]
000e4c  e1a0100a          MOV      r1,r10
000e50  e1a00008          MOV      r0,r8
000e54  ebfffffe          BL       __aeabi_fmul
;;;178      az *= norm;
000e58  e58d0048          STR      r0,[sp,#0x48]
000e5c  e1a0100a          MOV      r1,r10
000e60  e1a00007          MOV      r0,r7
000e64  ebfffffe          BL       __aeabi_fmul
;;;179    
;;;180      // Normalise magnetometer measurement
;;;181      norm = sqrt(mx * mx + my * my + mz * mz);
000e68  e58d004c          STR      r0,[sp,#0x4c]
000e6c  e59d1088          LDR      r1,[sp,#0x88]
000e70  e1a00001          MOV      r0,r1
000e74  ebfffffe          BL       __aeabi_fmul
000e78  e59d1084          LDR      r1,[sp,#0x84]
000e7c  e1a07000          MOV      r7,r0
000e80  e1a00001          MOV      r0,r1
000e84  ebfffffe          BL       __aeabi_fmul
000e88  e59d1080          LDR      r1,[sp,#0x80]
000e8c  e1a08000          MOV      r8,r0
000e90  e1a00001          MOV      r0,r1
000e94  ebfffffe          BL       __aeabi_fmul
000e98  e1a01008          MOV      r1,r8
000e9c  ebfffffe          BL       __aeabi_fadd
000ea0  e1a01007          MOV      r1,r7
000ea4  ebfffffe          BL       __aeabi_fadd
000ea8  ebfffffe          BL       __aeabi_f2d
000eac  ebfffffe          BL       sqrt
000eb0  ebfffffe          BL       __aeabi_d2f
000eb4  e1a01000          MOV      r1,r0
;;;182      if (norm == 0.0f) return; // Handle NaN
000eb8  e1a00080          LSL      r0,r0,#1
000ebc  e1b00c20          LSRS     r0,r0,#24
000ec0  0a000194          BEQ      |L1.5400|
;;;183      norm = 1.0f / norm;       // Use reciprocal for division
000ec4  e3a005fe          MOV      r0,#0x3f800000
000ec8  ebfffffe          BL       __aeabi_fdiv
000ecc  e1a07000          MOV      r7,r0
;;;184      mx *= norm;
000ed0  e1a01000          MOV      r1,r0
000ed4  e59d0080          LDR      r0,[sp,#0x80]
000ed8  ebfffffe          BL       __aeabi_fmul
;;;185      my *= norm;
000edc  e58d0080          STR      r0,[sp,#0x80]
000ee0  e59d0084          LDR      r0,[sp,#0x84]
000ee4  e1a01007          MOV      r1,r7
000ee8  ebfffffe          BL       __aeabi_fmul
;;;186      mz *= norm;
000eec  e58d0084          STR      r0,[sp,#0x84]
000ef0  e59d0088          LDR      r0,[sp,#0x88]
000ef4  e1a01007          MOV      r1,r7
000ef8  ebfffffe          BL       __aeabi_fmul
;;;187    
;;;188      // Reference direction of Earth's magnetic field
;;;189      hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
000efc  e58d0088          STR      r0,[sp,#0x88]
000f00  e59d0020          LDR      r0,[sp,#0x20]
000f04  e59d101c          LDR      r1,[sp,#0x1c]
000f08  ebfffffe          BL       __aeabi_fadd
000f0c  e1a07000          MOV      r7,r0
000f10  e58d003c          STR      r0,[sp,#0x3c]
000f14  e59d0088          LDR      r0,[sp,#0x88]
000f18  e3a01001          MOV      r1,#1
000f1c  ebfffffe          BL       __ARM_scalbnf
000f20  e1a09000          MOV      r9,r0
000f24  e1a01007          MOV      r1,r7
000f28  ebfffffe          BL       __aeabi_fmul
000f2c  e1a0b000          MOV      r11,r0
000f30  e59d0018          LDR      r0,[sp,#0x18]
000f34  e59d1014          LDR      r1,[sp,#0x14]
000f38  ebfffffe          BL       __aeabi_fsub
000f3c  e1a07000          MOV      r7,r0
000f40  e58d0038          STR      r0,[sp,#0x38]
000f44  e59d0084          LDR      r0,[sp,#0x84]
000f48  e3a01001          MOV      r1,#1
000f4c  ebfffffe          BL       __ARM_scalbnf
000f50  e1a08000          MOV      r8,r0
000f54  e1a01007          MOV      r1,r7
000f58  ebfffffe          BL       __aeabi_fmul
000f5c  e1a0a000          MOV      r10,r0
000f60  e59d1008          LDR      r1,[sp,#8]
000f64  e3a0043f          MOV      r0,#0x3f000000
000f68  ebfffffe          BL       __aeabi_fsub
000f6c  e59d102c          LDR      r1,[sp,#0x2c]
000f70  ebfffffe          BL       __aeabi_fsub
000f74  e1a07000          MOV      r7,r0
000f78  e58d0034          STR      r0,[sp,#0x34]
000f7c  e59d0080          LDR      r0,[sp,#0x80]
000f80  e3a01001          MOV      r1,#1
000f84  ebfffffe          BL       __ARM_scalbnf
000f88  e1a01007          MOV      r1,r7
000f8c  e58d0030          STR      r0,[sp,#0x30]
000f90  ebfffffe          BL       __aeabi_fmul
000f94  e1a0100a          MOV      r1,r10
000f98  ebfffffe          BL       __aeabi_fadd
000f9c  e1a0100b          MOV      r1,r11
000fa0  ebfffffe          BL       __aeabi_fadd
000fa4  e1a07000          MOV      r7,r0
;;;190      hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
000fa8  ea000003          B        |L1.4028|
                  |L1.4012|
                          DCD      0x3fe80000
                  |L1.4016|
                          DCD      0x3fe65718
                  |L1.4020|
                          DCD      ||.data||
                  |L1.4024|
                          DCD      ||.data||+0x4
                  |L1.4028|
000fbc  e59d0010          LDR      r0,[sp,#0x10]
000fc0  e59d100c          LDR      r1,[sp,#0xc]
000fc4  ebfffffe          BL       __aeabi_fsub
000fc8  e1a01000          MOV      r1,r0
000fcc  e1a00009          MOV      r0,r9
000fd0  ebfffffe          BL       __aeabi_fmul
000fd4  e1a0b000          MOV      r11,r0
000fd8  e59d1024          LDR      r1,[sp,#0x24]
000fdc  e3a0043f          MOV      r0,#0x3f000000
000fe0  ebfffffe          BL       __aeabi_fsub
000fe4  e58d0004          STR      r0,[sp,#4]
000fe8  e59d102c          LDR      r1,[sp,#0x2c]
000fec  ebfffffe          BL       __aeabi_fsub
000ff0  e1a01000          MOV      r1,r0
000ff4  e1a00008          MOV      r0,r8
000ff8  ebfffffe          BL       __aeabi_fmul
000ffc  e1a0a000          MOV      r10,r0
001000  e59d0018          LDR      r0,[sp,#0x18]
001004  e59d1014          LDR      r1,[sp,#0x14]
001008  ebfffffe          BL       __aeabi_fadd
00100c  e1a01000          MOV      r1,r0
001010  e59d0030          LDR      r0,[sp,#0x30]
001014  ebfffffe          BL       __aeabi_fmul
001018  e1a0100a          MOV      r1,r10
00101c  ebfffffe          BL       __aeabi_fadd
001020  e1a0100b          MOV      r1,r11
001024  ebfffffe          BL       __aeabi_fadd
;;;191      bx = sqrt((hx * hx) + (hy * hy));
001028  e1a01000          MOV      r1,r0
00102c  ebfffffe          BL       __aeabi_fmul
001030  e1a0a000          MOV      r10,r0
001034  e1a01007          MOV      r1,r7
001038  e1a00001          MOV      r0,r1
00103c  ebfffffe          BL       __aeabi_fmul
001040  e1a0100a          MOV      r1,r10
001044  ebfffffe          BL       __aeabi_fadd
001048  ebfffffe          BL       __aeabi_f2d
00104c  ebfffffe          BL       sqrt
001050  ebfffffe          BL       __aeabi_d2f
001054  e1a07000          MOV      r7,r0
;;;192      bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);
001058  e99d0003          LDMIB    sp,{r0,r1}
00105c  ebfffffe          BL       __aeabi_fsub
001060  e1a01000          MOV      r1,r0
001064  e58d0014          STR      r0,[sp,#0x14]
001068  e1a00009          MOV      r0,r9
00106c  ebfffffe          BL       __aeabi_fmul
001070  e1a09000          MOV      r9,r0
001074  e59d0010          LDR      r0,[sp,#0x10]
001078  e59d100c          LDR      r1,[sp,#0xc]
00107c  ebfffffe          BL       __aeabi_fadd
001080  e1a01000          MOV      r1,r0
001084  e58d0004          STR      r0,[sp,#4]
001088  e1a00008          MOV      r0,r8
00108c  ebfffffe          BL       __aeabi_fmul
001090  e1a08000          MOV      r8,r0
001094  e59d0020          LDR      r0,[sp,#0x20]
001098  e59d101c          LDR      r1,[sp,#0x1c]
00109c  ebfffffe          BL       __aeabi_fsub
0010a0  e1a0b000          MOV      r11,r0
0010a4  e59d0030          LDR      r0,[sp,#0x30]
0010a8  e1a0100b          MOV      r1,r11
0010ac  ebfffffe          BL       __aeabi_fmul
0010b0  e1a01008          MOV      r1,r8
0010b4  ebfffffe          BL       __aeabi_fadd
0010b8  e1a01009          MOV      r1,r9
0010bc  ebfffffe          BL       __aeabi_fadd
0010c0  e1a08000          MOV      r8,r0
0010c4  e1a0000b          MOV      r0,r11
;;;193    
;;;194      // Estimated direction of gravity and magnetic field
;;;195      vx = 2.0f * (q2q4 - q1q3);
0010c8  e3a01001          MOV      r1,#1
0010cc  ebfffffe          BL       __ARM_scalbnf
0010d0  e1a0a000          MOV      r10,r0
;;;196      vy = 2.0f * (q1q2 + q3q4);
0010d4  e59d0004          LDR      r0,[sp,#4]
0010d8  e3a01001          MOV      r1,#1
0010dc  ebfffffe          BL       __ARM_scalbnf
;;;197      vz = q1q1 - q2q2 - q3q3 + q4q4;
0010e0  e58d000c          STR      r0,[sp,#0xc]
0010e4  e59d0028          LDR      r0,[sp,#0x28]
0010e8  e59d1024          LDR      r1,[sp,#0x24]
0010ec  ebfffffe          BL       __aeabi_fsub
0010f0  e59d1008          LDR      r1,[sp,#8]
0010f4  ebfffffe          BL       __aeabi_fsub
0010f8  e59d102c          LDR      r1,[sp,#0x2c]
0010fc  ebfffffe          BL       __aeabi_fadd
;;;198      wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
001100  e58d0010          STR      r0,[sp,#0x10]
001104  e1a0900b          MOV      r9,r11
001108  e3a01001          MOV      r1,#1
00110c  e1a00008          MOV      r0,r8
001110  ebfffffe          BL       __ARM_scalbnf
001114  e1a01009          MOV      r1,r9
001118  e58d0008          STR      r0,[sp,#8]
00111c  ebfffffe          BL       __aeabi_fmul
001120  e1a09000          MOV      r9,r0
001124  e59d8034          LDR      r8,[sp,#0x34]
001128  e3a01001          MOV      r1,#1
00112c  e1a00007          MOV      r0,r7
001130  ebfffffe          BL       __ARM_scalbnf
001134  e1a0b000          MOV      r11,r0
001138  e1a01008          MOV      r1,r8
00113c  ebfffffe          BL       __aeabi_fmul
001140  e1a01009          MOV      r1,r9
001144  ebfffffe          BL       __aeabi_fadd
001148  e1a09000          MOV      r9,r0
00114c  e59d0008          LDR      r0,[sp,#8]
001150  e59d1004          LDR      r1,[sp,#4]
;;;199      wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
001154  ebfffffe          BL       __aeabi_fmul
001158  e1a07000          MOV      r7,r0
00115c  e59d1038          LDR      r1,[sp,#0x38]
001160  e1a0000b          MOV      r0,r11
001164  ebfffffe          BL       __aeabi_fmul
001168  e1a01007          MOV      r1,r7
00116c  ebfffffe          BL       __aeabi_fadd
001170  e1a08000          MOV      r8,r0
001174  e59d0008          LDR      r0,[sp,#8]
001178  e59d1014          LDR      r1,[sp,#0x14]
;;;200      wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
00117c  ebfffffe          BL       __aeabi_fmul
001180  e1a07000          MOV      r7,r0
001184  e59d103c          LDR      r1,[sp,#0x3c]
001188  e1a0000b          MOV      r0,r11
00118c  ebfffffe          BL       __aeabi_fmul
001190  e1a01007          MOV      r1,r7
001194  ebfffffe          BL       __aeabi_fadd
001198  e1a0b000          MOV      r11,r0
;;;201    
;;;202      // Error is cross product between estimated direction and measured direction of gravity
;;;203      ex = (ay * vz - az * vy) + (my * wz - mz * wy);
00119c  e59d0088          LDR      r0,[sp,#0x88]
0011a0  e1a01008          MOV      r1,r8
0011a4  ebfffffe          BL       __aeabi_fmul
0011a8  e1a07000          MOV      r7,r0
0011ac  e59d0084          LDR      r0,[sp,#0x84]
0011b0  e1a0100b          MOV      r1,r11
0011b4  ebfffffe          BL       __aeabi_fmul
0011b8  e1a01007          MOV      r1,r7
0011bc  ebfffffe          BL       __aeabi_fsub
0011c0  e1a07000          MOV      r7,r0
0011c4  e59d004c          LDR      r0,[sp,#0x4c]
0011c8  e59d100c          LDR      r1,[sp,#0xc]
0011cc  ebfffffe          BL       __aeabi_fmul
0011d0  e58d0004          STR      r0,[sp,#4]
0011d4  e59d0048          LDR      r0,[sp,#0x48]
0011d8  e59d1010          LDR      r1,[sp,#0x10]
0011dc  ebfffffe          BL       __aeabi_fmul
0011e0  e59d1004          LDR      r1,[sp,#4]
0011e4  ebfffffe          BL       __aeabi_fsub
0011e8  e1a01007          MOV      r1,r7
0011ec  ebfffffe          BL       __aeabi_fadd
;;;204      ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
0011f0  e58d0004          STR      r0,[sp,#4]
0011f4  e59d0080          LDR      r0,[sp,#0x80]
0011f8  e1a0100b          MOV      r1,r11
0011fc  ebfffffe          BL       __aeabi_fmul
001200  e1a07000          MOV      r7,r0
001204  e59d0088          LDR      r0,[sp,#0x88]
001208  e1a01009          MOV      r1,r9
00120c  ebfffffe          BL       __aeabi_fmul
001210  e1a01007          MOV      r1,r7
001214  ebfffffe          BL       __aeabi_fsub
001218  e1a07000          MOV      r7,r0
00121c  e59d0044          LDR      r0,[sp,#0x44]
001220  e59d1010          LDR      r1,[sp,#0x10]
001224  ebfffffe          BL       __aeabi_fmul
001228  e1a0b000          MOV      r11,r0
00122c  e59d004c          LDR      r0,[sp,#0x4c]
001230  e1a0100a          MOV      r1,r10
001234  ebfffffe          BL       __aeabi_fmul
001238  e1a0100b          MOV      r1,r11
00123c  ebfffffe          BL       __aeabi_fsub
001240  e1a01007          MOV      r1,r7
001244  ebfffffe          BL       __aeabi_fadd
001248  e1a07000          MOV      r7,r0
;;;205      ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
00124c  e59d0084          LDR      r0,[sp,#0x84]
001250  e1a01009          MOV      r1,r9
001254  ebfffffe          BL       __aeabi_fmul
001258  e1a09000          MOV      r9,r0
00125c  e59d0080          LDR      r0,[sp,#0x80]
001260  e1a01008          MOV      r1,r8
001264  ebfffffe          BL       __aeabi_fmul
001268  e1a01009          MOV      r1,r9
00126c  ebfffffe          BL       __aeabi_fsub
001270  e1a08000          MOV      r8,r0
001274  e59d0048          LDR      r0,[sp,#0x48]
001278  e1a0100a          MOV      r1,r10
00127c  ebfffffe          BL       __aeabi_fmul
001280  e1a09000          MOV      r9,r0
001284  e59d0044          LDR      r0,[sp,#0x44]
001288  e59d100c          LDR      r1,[sp,#0xc]
00128c  ebfffffe          BL       __aeabi_fmul
001290  e1a01009          MOV      r1,r9
001294  ebfffffe          BL       __aeabi_fsub
001298  e1a01008          MOV      r1,r8
00129c  ebfffffe          BL       __aeabi_fadd
;;;206      if (Ki > 0.0f)
;;;207      {
;;;208        eInt[0] += ex;      // accumulate integral error
;;;209        eInt[1] += ey;
;;;210        eInt[2] += ez;
;;;211      }
;;;212      else
;;;213      {
;;;214        eInt[0] = 0.0f;     // prevent integral wind up
0012a0  e59f1284          LDR      r1,|L1.5420|
0012a4  e1a09000          MOV      r9,r0                 ;205
0012a8  e3a00000          MOV      r0,#0
;;;215        eInt[1] = 0.0f;
0012ac  e5810000          STR      r0,[r1,#0]  ; eInt
;;;216        eInt[2] = 0.0f;
0012b0  e5810004          STR      r0,[r1,#4]  ; eInt
;;;217      }
;;;218    
;;;219      // Apply feedback terms
;;;220      gx = gx + Kp * ex + Ki * eInt[0];
0012b4  e59fa274          LDR      r10,|L1.5424|
0012b8  e5810008          STR      r0,[r1,#8]  ; eInt
0012bc  e59d0004          LDR      r0,[sp,#4]
0012c0  e1a0100a          MOV      r1,r10
0012c4  ebfffffe          BL       __aeabi_fmul
0012c8  e59d1050          LDR      r1,[sp,#0x50]
0012cc  ebfffffe          BL       __aeabi_fadd
;;;221      gy = gy + Kp * ey + Ki * eInt[1];
0012d0  e58d0050          STR      r0,[sp,#0x50]
0012d4  e1a0100a          MOV      r1,r10
0012d8  e1a00007          MOV      r0,r7
0012dc  ebfffffe          BL       __aeabi_fmul
0012e0  e59d1078          LDR      r1,[sp,#0x78]
0012e4  ebfffffe          BL       __aeabi_fadd
0012e8  e1a08000          MOV      r8,r0
;;;222      gz = gz + Kp * ez + Ki * eInt[2];
0012ec  e1a0100a          MOV      r1,r10
0012f0  e1a00009          MOV      r0,r9
0012f4  ebfffffe          BL       __aeabi_fmul
0012f8  e59d107c          LDR      r1,[sp,#0x7c]
0012fc  ebfffffe          BL       __aeabi_fadd
001300  e1a07000          MOV      r7,r0
;;;223     
;;;224      // Integrate rate of change of quaternion
;;;225      pa = q2;
;;;226      pb = q3;
;;;227      pc = q4;
;;;228      q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
001304  e59d008c          LDR      r0,[sp,#0x8c]
001308  e3e01000          MVN      r1,#0
00130c  ebfffffe          BL       __ARM_scalbnf
001310  e1a09000          MOV      r9,r0
001314  e58d0004          STR      r0,[sp,#4]
001318  e1a01007          MOV      r1,r7
00131c  e1a00005          MOV      r0,r5
001320  ebfffffe          BL       __aeabi_fmul
001324  e1a0b000          MOV      r11,r0
001328  e1a01008          MOV      r1,r8
00132c  e1a00006          MOV      r0,r6
001330  ebfffffe          BL       __aeabi_fmul
001334  e1a0a000          MOV      r10,r0
001338  e59d1050          LDR      r1,[sp,#0x50]
00133c  e2240102          EOR      r0,r4,#0x80000000
001340  ebfffffe          BL       __aeabi_fmul
001344  e1a0100a          MOV      r1,r10
001348  ebfffffe          BL       __aeabi_fsub
00134c  e1a0100b          MOV      r1,r11
001350  ebfffffe          BL       __aeabi_fsub
001354  e1a01009          MOV      r1,r9
001358  ebfffffe          BL       __aeabi_fmul
00135c  e59d1000          LDR      r1,[sp,#0]
001360  ebfffffe          BL       __aeabi_fadd
001364  e1a0b000          MOV      r11,r0
;;;229      q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
001368  e59d9004          LDR      r9,[sp,#4]
00136c  e1a01008          MOV      r1,r8
001370  e1a00005          MOV      r0,r5
001374  ebfffffe          BL       __aeabi_fmul
001378  e58d0000          STR      r0,[sp,#0]
00137c  e1a01007          MOV      r1,r7
001380  e1a00006          MOV      r0,r6
001384  ebfffffe          BL       __aeabi_fmul
001388  e1a0a000          MOV      r10,r0
00138c  e59d1050          LDR      r1,[sp,#0x50]
001390  e1a0000b          MOV      r0,r11
001394  ebfffffe          BL       __aeabi_fmul
001398  e1a0100a          MOV      r1,r10
00139c  ebfffffe          BL       __aeabi_fadd
0013a0  e59d1000          LDR      r1,[sp,#0]
0013a4  ebfffffe          BL       __aeabi_fsub
0013a8  e1a01009          MOV      r1,r9
0013ac  ebfffffe          BL       __aeabi_fmul
0013b0  e1a01004          MOV      r1,r4
0013b4  ebfffffe          BL       __aeabi_fadd
0013b8  e1a09000          MOV      r9,r0
;;;230      q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
0013bc  e59d1050          LDR      r1,[sp,#0x50]
0013c0  e59da004          LDR      r10,[sp,#4]
0013c4  e1a00005          MOV      r0,r5
0013c8  ebfffffe          BL       __aeabi_fmul
0013cc  e58d0008          STR      r0,[sp,#8]
0013d0  e1a01007          MOV      r1,r7
0013d4  e1a00004          MOV      r0,r4
0013d8  ebfffffe          BL       __aeabi_fmul
0013dc  e58d0000          STR      r0,[sp,#0]
0013e0  e1a01008          MOV      r1,r8
0013e4  e1a0000b          MOV      r0,r11
0013e8  ebfffffe          BL       __aeabi_fmul
0013ec  e59d1000          LDR      r1,[sp,#0]
0013f0  ebfffffe          BL       __aeabi_fsub
0013f4  e59d1008          LDR      r1,[sp,#8]
0013f8  ebfffffe          BL       __aeabi_fadd
0013fc  e1a0100a          MOV      r1,r10
001400  ebfffffe          BL       __aeabi_fmul
001404  e1a01006          MOV      r1,r6
001408  ebfffffe          BL       __aeabi_fadd
00140c  e1a0a000          MOV      r10,r0
;;;231      q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
001410  e59d0004          LDR      r0,[sp,#4]
001414  e58d0000          STR      r0,[sp,#0]
001418  e59d1050          LDR      r1,[sp,#0x50]
00141c  e1a00006          MOV      r0,r6
001420  ebfffffe          BL       __aeabi_fmul
001424  e1a06000          MOV      r6,r0
001428  e1a01008          MOV      r1,r8
00142c  e1a00004          MOV      r0,r4
001430  ebfffffe          BL       __aeabi_fmul
001434  e1a04000          MOV      r4,r0
001438  e1a01007          MOV      r1,r7
00143c  e1a0000b          MOV      r0,r11
001440  ebfffffe          BL       __aeabi_fmul
001444  e1a01004          MOV      r1,r4
001448  ebfffffe          BL       __aeabi_fadd
00144c  e1a01006          MOV      r1,r6
001450  ebfffffe          BL       __aeabi_fsub
001454  e59d1000          LDR      r1,[sp,#0]
001458  ebfffffe          BL       __aeabi_fmul
00145c  e1a01005          MOV      r1,r5
001460  ebfffffe          BL       __aeabi_fadd
001464  e1a05000          MOV      r5,r0
;;;232    
;;;233      // Normalise quaternion
;;;234      norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
001468  e1a01000          MOV      r1,r0
00146c  ebfffffe          BL       __aeabi_fmul
001470  e1a04000          MOV      r4,r0
001474  e1a0100a          MOV      r1,r10
001478  e1a00001          MOV      r0,r1
00147c  ebfffffe          BL       __aeabi_fmul
001480  e1a06000          MOV      r6,r0
001484  e1a01009          MOV      r1,r9
001488  e1a00001          MOV      r0,r1
00148c  ebfffffe          BL       __aeabi_fmul
001490  e1a07000          MOV      r7,r0
001494  e1a0100b          MOV      r1,r11
001498  e1a00001          MOV      r0,r1
00149c  ebfffffe          BL       __aeabi_fmul
0014a0  e1a01007          MOV      r1,r7
0014a4  ebfffffe          BL       __aeabi_fadd
0014a8  e1a01006          MOV      r1,r6
0014ac  ebfffffe          BL       __aeabi_fadd
0014b0  e1a01004          MOV      r1,r4
0014b4  ebfffffe          BL       __aeabi_fadd
0014b8  ebfffffe          BL       __aeabi_f2d
0014bc  ebfffffe          BL       sqrt
0014c0  ebfffffe          BL       __aeabi_d2f
0014c4  e1a01000          MOV      r1,r0
;;;235      norm = 1.0f / norm;
0014c8  e3a005fe          MOV      r0,#0x3f800000
0014cc  ebfffffe          BL       __aeabi_fdiv
0014d0  e1a06000          MOV      r6,r0
;;;236      q[0] = q1 * norm;
0014d4  e1a01000          MOV      r1,r0
0014d8  e1a0000b          MOV      r0,r11
0014dc  ebfffffe          BL       __aeabi_fmul
0014e0  e51f4530          LDR      r4,|L1.4024|
;;;237      q[1] = q2 * norm;
0014e4  e1a01006          MOV      r1,r6
0014e8  e5840000          STR      r0,[r4,#0]  ; q
0014ec  e1a00009          MOV      r0,r9
0014f0  ebfffffe          BL       __aeabi_fmul
;;;238      q[2] = q3 * norm;
0014f4  e5840004          STR      r0,[r4,#4]  ; q
0014f8  e1a01006          MOV      r1,r6
0014fc  e1a0000a          MOV      r0,r10
001500  ebfffffe          BL       __aeabi_fmul
;;;239      q[3] = q4 * norm;
001504  e5840008          STR      r0,[r4,#8]  ; q
001508  e1a01006          MOV      r1,r6
00150c  e1a00005          MOV      r0,r5
001510  ebfffffe          BL       __aeabi_fmul
001514  e584000c          STR      r0,[r4,#0xc]  ; q
                  |L1.5400|
;;;240    }
001518  e28dd054          ADD      sp,sp,#0x54
00151c  e8bd4ff0          POP      {r4-r11,lr}
001520  e12fff1e          BX       lr
;;;241    
                          ENDP

                  getQ PROC
;;;242    
;;;243    const float * getQ(void)
001524  e51f0574          LDR      r0,|L1.4024|
;;;244    {
;;;245    return q;
;;;246    }
001528  e12fff1e          BX       lr
;;;247    
                          ENDP

                  |L1.5420|
                          DCD      ||.bss||
                  |L1.5424|
                          DCD      0x41200000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  eInt
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GyroMeasError
000000  3f32b8c2          DCFS     0x3f32b8c2 ; 0.69813168048858643

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.constdata||
                  GyroMeasDrift
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||.data||, DATA, ALIGN=2

                  beta
                          DCD      0x00000000
                  q
000004  3f800000          DCFS     0x3f800000 ; 1
000008  00000000          DCFS     0x00000000 ; 0
00000c  00000000          DCFS     0x00000000 ; 0
000010  00000000          DCFS     0x00000000 ; 0
