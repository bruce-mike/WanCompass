; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pll.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\pll.d --apcs=interwork --diag_suppress=9931 -IC:\Keil_v5\ARM\INC\Phillips -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -DDEVELOPMENT --omf_browse=.\obj\pll.crf PLL.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PLL_CONFIG PROC
;;;5      
;;;6      void PLL_CONFIG(BOOL speed)
000000  e92d0070          PUSH     {r4-r6}
;;;7      {
;;;8      	static BOOL initDone = FALSE;
;;;9      	
;;;10     // FROM DATASHEET:
;;;11     // 1 DISCONNECT PLL WITH FEED
;;;12     // 2 DISABLE PLL WITH FEED
;;;13     // 3 CHANGE CPU CLK DIVIDER (W/O PLL)
;;;14     // 4 WRITE CLK SOURCE SEL REG
;;;15     // 5 WRITE PLLCFG AND FEED			
;;;16     // 6 ENABLE PLL WITH FEED
;;;17     // 7 CHANGE CPPU CLK DIVIDER (W/PLL)
;;;18     // 8 WAIT FOR LOCK
;;;19     // 9 CONNECT PLL WITH FEED
;;;20     					
;;;21     //************************************	
;;;22     	if(initDone == FALSE)
000004  e59f40e0          LDR      r4,|L1.236|
;;;23     	{
;;;24     		// step 1 - disconnect
;;;25     		PLLCON &= ~(1 << PLLC);
000008  e59f10e0          LDR      r1,|L1.240|
00000c  e5d42000          LDRB     r2,[r4,#0]            ;22  ; initDone
000010  e3a05000          MOV      r5,#0                 ;22
;;;26     
;;;27     		// feed
;;;28     		PLLFEED = 0xAA;
000014  e3a030aa          MOV      r3,#0xaa
000018  e3520000          CMP      r2,#0                 ;22
;;;29     		PLLFEED = 0x55;
00001c  e3a0c055          MOV      r12,#0x55
000020  1a00000c          BNE      |L1.88|
000024  e5912080          LDR      r2,[r1,#0x80]         ;25
000028  e3c22002          BIC      r2,r2,#2              ;25
00002c  e5812080          STR      r2,[r1,#0x80]         ;25
000030  e581308c          STR      r3,[r1,#0x8c]         ;28
000034  e581c08c          STR      r12,[r1,#0x8c]
;;;30     		
;;;31     		// step 2 - disable
;;;32     		PLLCON &= ~(1 << PLLE);
000038  e5912080          LDR      r2,[r1,#0x80]
00003c  e3c22001          BIC      r2,r2,#1
000040  e5812080          STR      r2,[r1,#0x80]
;;;33     
;;;34     		// feed
;;;35     		PLLFEED = 0xAA;
000044  e581308c          STR      r3,[r1,#0x8c]
;;;36     		PLLFEED = 0x55;
000048  e581c08c          STR      r12,[r1,#0x8c]
;;;37     		
;;;38     		//change cpu clk divider to 4: (N + 1) = 4 --> N = 3
;;;39     		// OUT OF ORDER? STEP  3
;;;40     		USBCLKCFG = 4;
00004c  e3a02004          MOV      r2,#4
000050  e5812108          STR      r2,[r1,#0x108]
;;;41     		
;;;42     		// reconfigure clocking
;;;43     		// select IRC step 4
;;;44     		CLKSRCSEL = 0x00;
000054  e581510c          STR      r5,[r1,#0x10c]
                  |L1.88|
;;;45     	}
;;;46     
;;;47     	if(speed == TRUE)
000058  e3500001          CMP      r0,#1
;;;48     	{
;;;49     		// write PLLCFG.  (multiplier val) STEP 5
;;;50     		PLLCFG =  (PLL_MULT << MSEL) | (PLL_DIV_72MHZ << NSEL);			
00005c  059f2090          LDREQ    r2,|L1.244|
;;;51     	}
;;;52     	else
;;;53     	{
;;;54     		// write PLLCFG.  (multiplier val) STEP 5
;;;55     		PLLCFG =  (PLL_MULT_SLOW << MSEL) | (PLL_DIV_72MHZ_SLOW << NSEL);			
000060  159f2090          LDRNE    r2,|L1.248|
;;;56     		CCLKCFG = CCLKSEL_72MHZ_SLOW;
000064  e3a06019          MOV      r6,#0x19
000068  e5812084          STR      r2,[r1,#0x84]         ;55
00006c  15816104          STRNE    r6,[r1,#0x104]
;;;57     	}
;;;58     		
;;;59     	// feed
;;;60     	PLLFEED = 0xAA;
000070  e581308c          STR      r3,[r1,#0x8c]
;;;61     	PLLFEED = 0x55;
000074  e581c08c          STR      r12,[r1,#0x8c]
;;;62     
;;;63     	// enable PLL STEP 6
;;;64     	PLLCON = (1 << PLLE) | (1 << PLLC);
000078  e3a02003          MOV      r2,#3
00007c  e5812080          STR      r2,[r1,#0x80]
;;;65     
;;;66     	// feed
;;;67     	PLLFEED = 0xAA;
000080  e581308c          STR      r3,[r1,#0x8c]
;;;68     	PLLFEED = 0x55;
000084  e581c08c          STR      r12,[r1,#0x8c]
                  |L1.136|
;;;69     		
;;;70     //	// STEP 7
;;;71     //	// CHANGE CPU CLK DIV FOR OPERATION W/PLL
;;;72     //	CCLKCFG = CCLKSEL_72MHZ; 
;;;73     	
;;;74     	// STEP 8
;;;75     	// wait for lock
;;;76     	while(!(PLLSTAT & (1 << PLLSTAT_PLOCK))) {}
000088  e5912088          LDR      r2,[r1,#0x88]
00008c  e3120301          TST      r2,#0x4000000
000090  0afffffc          BEQ      |L1.136|
;;;77     	
;;;78     	// 	STEP 9
;;;79     	// connect with feed
;;;80     	PLLFEED = 0xAA;
000094  e581308c          STR      r3,[r1,#0x8c]
;;;81     	PLLFEED = 0x55;
000098  e581c08c          STR      r12,[r1,#0x8c]
;;;82     
;;;83     	if(speed == TRUE)
00009c  e3500001          CMP      r0,#1
;;;84     	{
;;;85     		CCLKCFG = CCLKSEL_72MHZ;
0000a0  05815104          STREQ    r5,[r1,#0x104]
;;;86     	}
;;;87     	else
;;;88     	{
;;;89     		CCLKCFG = CCLKSEL_72MHZ_SLOW;
0000a4  15816104          STRNE    r6,[r1,#0x104]
;;;90     
;;;91     	}
;;;92     	
;;;93     	// done
;;;94     	//************************************	
;;;95     	initDone = TRUE;
0000a8  e3a00001          MOV      r0,#1
0000ac  e5c40000          STRB     r0,[r4,#0]  ; initDone
;;;96     }
0000b0  e8bd0070          POP      {r4-r6}
0000b4  e12fff1e          BX       lr
;;;97     
                          ENDP

                  PLL_CLOCK_SETUP PROC
;;;98     void PLL_CLOCK_SETUP(void)
0000b8  e59f0030          LDR      r0,|L1.240|
;;;99     {
;;;100    	PCLKSEL0 = (CCLK_OVER_1 << PCLK_UART0); // DEBUG
0000bc  e3a01040          MOV      r1,#0x40
0000c0  e58011a8          STR      r1,[r0,#0x1a8]
;;;101    	PCLKSEL0 |= (CCLK_OVER_1 << PCLK_UART1); // 485
0000c4  e59011a8          LDR      r1,[r0,#0x1a8]
0000c8  e3811c01          ORR      r1,r1,#0x100
0000cc  e58011a8          STR      r1,[r0,#0x1a8]
;;;102    	PCLKSEL1 = (CCLK_OVER_1 << PCLK_UART2); // 485
0000d0  e3a01801          MOV      r1,#0x10000
0000d4  e58011ac          STR      r1,[r0,#0x1ac]
;;;103    	PCLKSEL1 |= (CCLK_OVER_1 << PCLK_UART3); // 485
0000d8  e59011ac          LDR      r1,[r0,#0x1ac]
0000dc  e3811701          ORR      r1,r1,#0x40000
0000e0  e58011ac          STR      r1,[r0,#0x1ac]
;;;104    
;;;105    	/////
;;;106    	// configure the PLL
;;;107    	/////
;;;108    	PLL_CONFIG(FALSE);
0000e4  e3a00000          MOV      r0,#0
0000e8  eafffffe          B        PLL_CONFIG
;;;109    }
                          ENDP

                  |L1.236|
                          DCD      ||.data||
                  |L1.240|
                          DCD      0xe01fc000
                  |L1.244|
                          DCD      0x00030023
                  |L1.248|
                          DCD      0x000f019e

                          AREA ||.data||, DATA, ALIGN=0

                  initDone
000000  00                DCB      0x00
