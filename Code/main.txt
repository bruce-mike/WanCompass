; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\main.d --apcs=interwork --diag_suppress=9931 -IC:\Keil_v5\ARM\INC\Phillips -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -DDEVELOPMENT --omf_browse=.\obj\main.crf main.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  WatchdogTimerInit PROC
;;;26     
;;;27     void WatchdogTimerInit(void)
000000  e3a01000          MOV      r1,#0
;;;28     {
;;;29     	WDCLKSEL = 0x0; // input clock is 4MHz, divided by 4 is 1MHz
000004  e3a0020e          MOV      r0,#0xe0000000
000008  e5801010          STR      r1,[r0,#0x10]
;;;30     	WDTC = 30000000; // set watchdog to 30seconds, 30e6 clocks
00000c  e59f1174          LDR      r1,|L1.392|
000010  e5801004          STR      r1,[r0,#4]
;;;31     	WDMOD = 0x03;
000014  e3a01003          MOV      r1,#3
000018  e5801000          STR      r1,[r0,#0]
;;;32     }
00001c  e12fff1e          BX       lr
;;;33     
                          ENDP

                  main PROC
;;;34     int main(void)
000020  e59f0164          LDR      r0,|L1.396|
;;;35     {
;;;36     	int k; // no C program complete without an int
;;;37     	int theResetSource = RSIR;
000024  e5907180          LDR      r7,[r0,#0x180]
;;;38     	BOOL resetInit = TRUE; // for a POR
;;;39     	BOOL initDone = FALSE;
;;;40     	
;;;41     	RSIR = 0x000F; // reset the reset source flags
000028  e3a0100f          MOV      r1,#0xf
00002c  e3a06001          MOV      r6,#1                 ;38
000030  e3a04000          MOV      r4,#0                 ;39
000034  e5801180          STR      r1,[r0,#0x180]
;;;42     	PCONP = 0;
000038  e58040c4          STR      r4,[r0,#0xc4]
;;;43     
;;;44     	// delay for JTAG to catch the processor and put it in reset	
;;;45     	for(k = 0; k < 10000; k++)
00003c  e59f514c          LDR      r5,|L1.400|
000040  e1a00004          MOV      r0,r4
                  |L1.68|
000044  e2800001          ADD      r0,r0,#1
000048  e1500005          CMP      r0,r5
00004c  bafffffc          BLT      |L1.68|
;;;46     	{}
;;;47     
;;;48     	/////
;;;49     	// setup the clocks
;;;50     	/////
;;;51     	PLL_CLOCK_SETUP();
000050  ebfffffe          BL       PLL_CLOCK_SETUP
;;;52     		
;;;53     	/////
;;;54     	// initialize miscellaneous hardware
;;;55     	/////
;;;56     	hwGPIOConfig();
000054  ebfffffe          BL       hwGPIOConfig
;;;57     	
;;;58     	// init vic
;;;59     	init_VIC();
000058  ebfffffe          BL       init_VIC
;;;60     
;;;61     	/////
;;;62     	// initialize the timer system
;;;63     	/////
;;;64     	timerInit();
00005c  ebfffffe          BL       timerInit
;;;65     
;;;66     	// init the spi bus
;;;67     	SSPInit();
000060  ebfffffe          BL       SSPInit
;;;68     	storedConfigInit();
000064  ebfffffe          BL       storedConfigInit
;;;69     	I2CInitialize();
000068  ebfffffe          BL       I2CInitialize
;;;70     
;;;71     	/////
;;;72     	// initialize the watchdog timer
;;;73     	// timeout in 2 seconds
;;;74     	/////
;;;75     	initTimer(&watchdogFeedingTimer);
00006c  e59f0120          LDR      r0,|L1.404|
000070  ebfffffe          BL       initTimer
;;;76     	startTimer(&watchdogFeedingTimer, WATCHDOG_FEEDING_TIME_MS);
000074  e59f0118          LDR      r0,|L1.404|
000078  e1a01005          MOV      r1,r5
00007c  ebfffffe          BL       startTimer
;;;77     
;;;78     	/////
;;;79     	// show heartbeat for debug
;;;80     	/////
;;;81     	timerShowLEDHeartbeat(1000);
000080  e3a00ffa          MOV      r0,#0x3e8
000084  ebfffffe          BL       timerShowLEDHeartbeat
;;;82     
;;;83     	/////
;;;84     	// initialize serial debug port
;;;85     	/////
;;;86     	serialDebugInit();
000088  ebfffffe          BL       serialDebugInit
;;;87     		
;;;88     	/////
;;;89     	// initialize serial port
;;;90     	/////
;;;91     	serialInit();
00008c  ebfffffe          BL       serialInit
;;;92     
;;;93     	if((theResetSource & POR) == POR) 
000090  e3170001          TST      r7,#1
000094  0a00000a          BEQ      |L1.196|
;;;94     	{
;;;95     		// then a power on reset
;;;96     		printf("\nPOR\n\n");
000098  e28f00f8          ADR      r0,|L1.408|
00009c  ebfffffe          BL       __2printf
                  |L1.160|
;;;97     	}
;;;98     	else if((WDMOD & 0x04) == 0x04)
;;;99     	{
;;;100    		WDMOD = 0x03;
;;;101    		// a watchdog reset
;;;102    		printf("\nWDT\n\n");
;;;103    		
;;;104    		resetInit = FALSE;
;;;105    	}
;;;106    	else
;;;107    	{
;;;108    		// a wake on motion reset
;;;109    		printf("\nINT\n\n");
;;;110    		
;;;111    		resetInit = FALSE;
;;;112    	}
;;;113    	
;;;114    	WatchdogTimerInit();
0000a0  ebfffffe          BL       WatchdogTimerInit
;;;115    	
;;;116    	/////
;;;117    	// feed the watchdog
;;;118    	/////		
;;;119    	hwPetWatchDog();
0000a4  ebfffffe          BL       hwPetWatchDog
;;;120    	printf("hwGetRevNumber: %d\n", hwGetRevNumber());
0000a8  ebfffffe          BL       hwGetRevNumber
0000ac  e1a01000          MOV      r1,r0
0000b0  e28f00e8          ADR      r0,|L1.416|
0000b4  ebfffffe          BL       __2printf
                  |L1.184|
;;;121    	
;;;122    	while(1)
;;;123    	{
;;;124    		if(initDone == FALSE)
0000b8  e3540000          CMP      r4,#0
0000bc  1a00000d          BNE      |L1.248|
0000c0  ea000009          B        |L1.236|
                  |L1.196|
0000c4  e3a0020e          MOV      r0,#0xe0000000        ;98
0000c8  e5901000          LDR      r1,[r0,#0]            ;98
0000cc  e3110004          TST      r1,#4                 ;98
0000d0  13a01003          MOVNE    r1,#3                 ;100
0000d4  15801000          STRNE    r1,[r0,#0]            ;100
0000d8  128f00d4          ADRNE    r0,|L1.436|
0000dc  028f00d8          ADREQ    r0,|L1.444|
0000e0  ebfffffe          BL       __2printf
0000e4  e3a06000          MOV      r6,#0                 ;104
0000e8  eaffffec          B        |L1.160|
                  |L1.236|
;;;125    		{
;;;126    			if(MPU9250() == TRUE)
0000ec  ebfffffe          BL       MPU9250
0000f0  e3500001          CMP      r0,#1
;;;127    			{
;;;128    				initDone = TRUE;
0000f4  03a04001          MOVEQ    r4,#1
                  |L1.248|
;;;129    			}
;;;130    		}
;;;131    		
;;;132    		if(isTimerExpired(&watchdogFeedingTimer))
0000f8  e59f0094          LDR      r0,|L1.404|
0000fc  ebfffffe          BL       isTimerExpired
000100  e3500000          CMP      r0,#0
000104  0a000003          BEQ      |L1.280|
;;;133    		{
;;;134    			/////
;;;135    			// feed the watchdog
;;;136    			/////		
;;;137    			hwPetWatchDog();
000108  ebfffffe          BL       hwPetWatchDog
;;;138    
;;;139    			/////
;;;140    			// and restart the feeding timer
;;;141    			/////
;;;142    			startTimer(&watchdogFeedingTimer, WATCHDOG_FEEDING_TIME_MS);
00010c  e59f0080          LDR      r0,|L1.404|
000110  e1a01005          MOV      r1,r5
000114  ebfffffe          BL       startTimer
                  |L1.280|
;;;143    		}
;;;144    		
;;;145    		serialDebugDoWork();
000118  ebfffffe          BL       serialDebugDoWork
;;;146    		serialDoWork();
00011c  ebfffffe          BL       serialDoWork
;;;147    		
;;;148    		compassRun(resetInit);
000120  e1a00006          MOV      r0,r6
000124  ebfffffe          BL       compassRun
;;;149    
;;;150    		if(serialDebugFifoEmtpy() == TRUE && serialFifoEmtpy() == TRUE && getCompassState() == COMPASS_BOARD_STATE_IDLE && getReadContinuous() == FALSE)
000128  ebfffffe          BL       serialDebugFifoEmtpy
00012c  e3500001          CMP      r0,#1
000130  1affffe0          BNE      |L1.184|
000134  ebfffffe          BL       serialFifoEmtpy
000138  e3500001          CMP      r0,#1
00013c  1affffdd          BNE      |L1.184|
000140  ebfffffe          BL       getCompassState
000144  e3500002          CMP      r0,#2
000148  1affffda          BNE      |L1.184|
00014c  ebfffffe          BL       getReadContinuous
000150  e3500000          CMP      r0,#0
000154  1affffd7          BNE      |L1.184|
;;;151    		{
;;;152    			initTimer(&stayAwakeTimer);
000158  e59f0064          LDR      r0,|L1.452|
00015c  ebfffffe          BL       initTimer
;;;153    			startTimer(&stayAwakeTimer, WAIT_TIME_MS);
000160  e59f005c          LDR      r0,|L1.452|
000164  e3a0100a          MOV      r1,#0xa
000168  ebfffffe          BL       startTimer
                  |L1.364|
;;;154    			while(isTimerExpired(&stayAwakeTimer) == FALSE);
00016c  e59f0050          LDR      r0,|L1.452|
000170  ebfffffe          BL       isTimerExpired
000174  e3500000          CMP      r0,#0
000178  0afffffb          BEQ      |L1.364|
;;;155    			
;;;156    			setSpeed(FALSE);
00017c  e3a00000          MOV      r0,#0
000180  ebfffffe          BL       setSpeed
000184  eaffffcb          B        |L1.184|
;;;157    		}
;;;158    	}
;;;159    }
;;;160    // move cal orientation
                          ENDP

                  |L1.392|
                          DCD      0x01c9c380
                  |L1.396|
                          DCD      0xe01fc000
                  |L1.400|
                          DCD      0x00002710
                  |L1.404|
                          DCD      ||area_number.12||
                  |L1.408|
000198  0a504f52          DCB      "\nPOR\n\n",0
00019c  0a0a00  
00019f  00                DCB      0
                  |L1.416|
0001a0  68774765          DCB      "hwGetRevNumber: %d\n",0
0001a4  74526576
0001a8  4e756d62
0001ac  65723a20
0001b0  25640a00
                  |L1.436|
0001b4  0a574454          DCB      "\nWDT\n\n",0
0001b8  0a0a00  
0001bb  00                DCB      0
                  |L1.444|
0001bc  0a494e54          DCB      "\nINT\n\n",0
0001c0  0a0a00  
0001c3  00                DCB      0
                  |L1.452|
                          DCD      ||area_number.12||+0x8

                          AREA ||.data||, DATA, ALIGN=0

                  GPIO_PIN_uP_AUX_LED
000000  00                DCB      0x00

                          AREA ||area_number.5||, DATA, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.data||
                  GPIO_PORT_uP_AUX_LED
000000  00                DCB      0x00

                          AREA ||area_number.6||, DATA, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.data||
                  GPIO_PIN_REV2
000000  00                DCB      0x00

                          AREA ||area_number.7||, DATA, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.data||
                  GPIO_PORT_REV2
000000  00                DCB      0x00

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  GPIO_PIN_REV1
000000  00                DCB      0x00

                          AREA ||area_number.9||, DATA, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.data||
                  GPIO_PORT_REV1
000000  00                DCB      0x00

                          AREA ||area_number.10||, DATA, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.data||
                  GPIO_PIN_REV0
000000  00                DCB      0x00

                          AREA ||area_number.11||, DATA, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.data||
                  GPIO_PORT_REV0
000000  00                DCB      0x00

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  watchdogFeedingTimer
                          %        8
                  stayAwakeTimer
                          %        8

                  __ARM_use_no_argv EQU 0
