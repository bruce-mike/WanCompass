; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\irq.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\irq.d --apcs=interwork --diag_suppress=9931 -IC:\Keil_v5\ARM\INC\Phillips -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -DDEVELOPMENT --omf_browse=.\obj\irq.crf irq.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  dumpstack PROC
;;;17     
;;;18     void dumpstack(char* pString, UINT *pData)
000000  e3a00000          MOV      r0,#0
                  |L1.4|
;;;19     {
;;;20     	UINT *pStackUp = pData;
;;;21     	int i;
;;;22     
;;;23     	for(i=0;i<40;i++)
000004  e2800001          ADD      r0,r0,#1
000008  e3500028          CMP      r0,#0x28
00000c  bafffffc          BLT      |L1.4|
;;;24     	{
;;;25     		pStackUp++;
;;;26     	}
;;;27     }
000010  e12fff1e          BX       lr
;;;28     
                          ENDP

                  UNDEF_Routine PROC
;;;29     void UNDEF_Routine (void) __irq
000014  e59f00dc          LDR      r0,|L1.248|
;;;30     {
000018  e24dd004          SUB      sp,sp,#4
;;;31     	UINT nData;
;;;32     	nData = 1234567;
00001c  e58d0000          STR      r0,[sp,#0]
;;;33     	dumpstack("PAbt", &nData);
000020  e1a0100d          MOV      r1,sp
000024  e28f00d0          ADR      r0,|L1.252|
000028  ebfffffe          BL       dumpstack
                  |L1.44|
;;;34     
;;;35             while (1) ;
00002c  eafffffe          B        |L1.44|
;;;36     }
;;;37     void PAbt_Routine (void) __irq
                          ENDP

                  PAbt_Routine PROC
000030  e59f00c0          LDR      r0,|L1.248|
;;;38     {
000034  e24dd004          SUB      sp,sp,#4
;;;39     
;;;40     	UINT nData;
;;;41     	nData = 1234567;
000038  e58d0000          STR      r0,[sp,#0]
;;;42     	dumpstack("PAbt", &nData);
00003c  e1a0100d          MOV      r1,sp
000040  e28f00b4          ADR      r0,|L1.252|
000044  ebfffffe          BL       dumpstack
                  |L1.72|
;;;43             while (1) ;
000048  eafffffe          B        |L1.72|
;;;44     }
;;;45     void DAbt_Routine (void) __irq
                          ENDP

                  DAbt_Routine PROC
00004c  e59f00a4          LDR      r0,|L1.248|
;;;46     {
000050  e24dd004          SUB      sp,sp,#4
;;;47     	UINT nData;
;;;48     	nData = 1234567;
000054  e58d0000          STR      r0,[sp,#0]
;;;49     	dumpstack("DAbt", &nData);
000058  e1a0100d          MOV      r1,sp
00005c  e28f00a0          ADR      r0,|L1.260|
000060  ebfffffe          BL       dumpstack
                  |L1.100|
;;;50             while (1) ;
000064  eafffffe          B        |L1.100|
;;;51     }
;;;52     
                          ENDP

                  FIQ_Handler PROC
;;;61     ******************************************************************************/
;;;62     void FIQ_Handler( void ) __irq
000068  e25ef004          SUBS     pc,lr,#4
;;;63     {
;;;64     #if FIQ
;;;65       if ( VICFIQStatus & (0x1<<4) && VICIntEnable & (0x1<<4) )
;;;66       {
;;;67     	Timer0FIQHandler();	
;;;68       }
;;;69       if ( VICFIQStatus & (0x1<<5) && VICIntEnable & (0x1<<5) )
;;;70       {
;;;71     	Timer1FIQHandler();	
;;;72       }
;;;73       return;
;;;74     #endif 
;;;75     }
;;;76     
                          ENDP

                  init_VIC PROC
;;;85     ******************************************************************************/
;;;86     void init_VIC(void) 
00006c  e3a00000          MOV      r0,#0
;;;87     {
000070  e92d0030          PUSH     {r4,r5}
;;;88         DWORD i = 0;
;;;89         DWORD *vect_addr, *vect_prio;
;;;90        	
;;;91         /* initialize VIC*/
;;;92         VICIntEnClr = 0xffffffff;
000074  e3e01000          MVN      r1,#0
000078  e1a03000          MOV      r3,r0
00007c  e5001fec          STR      r1,[r0,#-0xfec]
;;;93         VICVectAddr = 0;
000080  e5000100          STR      r0,[r0,#-0x100]
;;;94         VICIntSelect = 0;
000084  e5000ff4          STR      r0,[r0,#-0xff4]
;;;95     
;;;96         /* set all the vector and vector control register to 0 */
;;;97         for ( i = 0; i < VIC_SIZE; i++ )
;;;98         {
;;;99     		vect_addr  = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
000088  e2405c0f          SUB      r5,r0,#0xf00
;;;100    		vect_prio  = (DWORD *)(VIC_BASE_ADDR + VECT_PRIO_INDEX + i*4);
00008c  e2404c0e          SUB      r4,r0,#0xe00
;;;101    		*vect_addr = 0x0;	
;;;102    		*vect_prio = 0xF;
000090  e3a0c00f          MOV      r12,#0xf
                  |L1.148|
000094  e7853100          STR      r3,[r5,r0,LSL #2]     ;101
000098  e784c100          STR      r12,[r4,r0,LSL #2]
00009c  e2800001          ADD      r0,r0,#1
0000a0  e3500020          CMP      r0,#0x20              ;97
0000a4  3afffffa          BCC      |L1.148|
;;;103        }
;;;104        return;
;;;105    }
0000a8  e8bd0030          POP      {r4,r5}
0000ac  e12fff1e          BX       lr
;;;106    
                          ENDP

                  install_irq PROC
;;;115    ******************************************************************************/
;;;116    DWORD install_irq( DWORD IntNumber, void (*HandlerAddr)(void)__irq, DWORD Priority )
0000b0  e3a03001          MOV      r3,#1
;;;117    {
0000b4  e92d0030          PUSH     {r4,r5}
;;;118        DWORD *vect_addr;
;;;119        DWORD *vect_prio;
;;;120          
;;;121        VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
0000b8  e1a03013          LSL      r3,r3,r0
0000bc  e3a04000          MOV      r4,#0
0000c0  e5043fec          STR      r3,[r4,#-0xfec]
;;;122        if ( IntNumber >= VIC_SIZE )
0000c4  e3500020          CMP      r0,#0x20
;;;123        {
;;;124    		return ( FALSE );
0000c8  23a00000          MOVCS    r0,#0
0000cc  2a000006          BCS      |L1.236|
;;;125        }
;;;126        else
;;;127        {
;;;128    		/* find first un-assigned VIC address for the handler */
;;;129    		vect_addr    = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
0000d0  e59fc034          LDR      r12,|L1.268|
;;;130    		vect_prio    = (DWORD *)(VIC_BASE_ADDR + VECT_PRIO_INDEX + IntNumber*4);
0000d4  e59f5034          LDR      r5,|L1.272|
0000d8  e08cc100          ADD      r12,r12,r0,LSL #2     ;129
;;;131    		*vect_addr   = (DWORD)HandlerAddr;	/* set interrupt vector */
0000dc  e58c1000          STR      r1,[r12,#0]
;;;132    		*vect_prio   = Priority;
0000e0  e7852100          STR      r2,[r5,r0,LSL #2]
;;;133    		VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
0000e4  e5043ff0          STR      r3,[r4,#-0xff0]
;;;134    			
;;;135    		return( TRUE );
0000e8  e3a00001          MOV      r0,#1
                  |L1.236|
0000ec  e8bd0030          POP      {r4,r5}
;;;136        }
;;;137    }
0000f0  e12fff1e          BX       lr
;;;138    
                          ENDP

                  causeCrash PROC
;;;143    //===================================================================================
;;;144    void causeCrash(int nType)
0000f4  e12fff1e          BX       lr
;;;145    {
;;;146    	switch(nType)
;;;147    	{
;;;148    		case 0:
;;;149    			/////
;;;150    			// DAbt
;;;151    			/////
;;;152    			break;
;;;153    		case 1:
;;;154    			/////
;;;155    			// PAbt
;;;156    			/////
;;;157    			break;
;;;158    		case 2:
;;;159    			/////
;;;160    			// UNDEF
;;;161    			/////
;;;162    			break;
;;;163    		default:
;;;164    				break;
;;;165    	}
;;;166    }
;;;167    /******************************************************************************
                          ENDP

                  |L1.248|
                          DCD      0x0012d687
                  |L1.252|
0000fc  50416274          DCB      "PAbt",0
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L1.260|
000104  44416274          DCB      "DAbt",0
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L1.268|
                          DCD      0xfffff100
                  |L1.272|
                          DCD      0xfffff200
