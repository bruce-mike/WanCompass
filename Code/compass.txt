; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\compass.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\compass.d --apcs=interwork --diag_suppress=9931 -IC:\Keil_v5\ARM\INC\Phillips -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -DDEVELOPMENT --omf_browse=.\obj\compass.crf compass.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                  setSpeed PROC
;;;64     
;;;65     void setSpeed(BOOL speed)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;66     {
;;;67     	if(currentSpeed != speed)
000004  e59f53c4          LDR      r5,|L1.976|
000008  e1a04000          MOV      r4,r0                 ;66
00000c  e5d50009          LDRB     r0,[r5,#9]  ; currentSpeed
000010  e1500004          CMP      r0,r4
;;;68     	{
;;;69     		// don't change speeds while there is something in the FIFOs
;;;70     		while((U0LSR & TEMT) == 0 || (U3LSR & TEMT) == 0)
000014  159f23b8          LDRNE    r2,|L1.980|
000018  12823807          ADDNE    r3,r2,#0x70000
00001c  0a000014          BEQ      |L1.116|
                  |L1.32|
000020  e592c014          LDR      r12,[r2,#0x14]
000024  e31c0040          TST      r12,#0x40
000028  1593c014          LDRNE    r12,[r3,#0x14]
00002c  131c0040          TSTNE    r12,#0x40
000030  0afffffa          BEQ      |L1.32|
;;;71     		{
;;;72     		}
;;;73     
;;;74     		PLL_CONFIG(speed);
000034  e1a00004          MOV      r0,r4
000038  ebfffffe          BL       PLL_CONFIG
;;;75     		timerSpeed(1, speed);
00003c  e1a01004          MOV      r1,r4
000040  e3a00001          MOV      r0,#1
000044  ebfffffe          BL       timerSpeed
;;;76     		serialDebugInitSetBaud(speed);
000048  e1a00004          MOV      r0,r4
00004c  ebfffffe          BL       serialDebugInitSetBaud
;;;77     		serialInitSetBaud(speed);
000050  e1a00004          MOV      r0,r4
000054  ebfffffe          BL       serialInitSetBaud
;;;78     		I2CSetBaud(speed);
000058  e1a00004          MOV      r0,r4
00005c  ebfffffe          BL       I2CSetBaud
;;;79     
;;;80     		if(speed == TRUE)
000060  e3540001          CMP      r4,#1
;;;81     		{
;;;82     			timerShowLEDHeartbeat(250);
000064  03a000fa          MOVEQ    r0,#0xfa
;;;83     		}
;;;84     		else
;;;85     		{
;;;86     			timerShowLEDHeartbeat(500);
000068  13a00f7d          MOVNE    r0,#0x1f4
00006c  ebfffffe          BL       timerShowLEDHeartbeat
;;;87     		}
;;;88     		
;;;89     		currentSpeed = speed;
000070  e5c54009          STRB     r4,[r5,#9]  ; currentSpeed
                  |L1.116|
;;;90     	}
;;;91     }
000074  e8bd4070          POP      {r4-r6,lr}
000078  e12fff1e          BX       lr
;;;92     
                          ENDP

                  resendMessage PROC
;;;93     static void resendMessage(char *theMessageToResend)
00007c  e92d4070          PUSH     {r4-r6,lr}
;;;94     {
;;;95     	resendCount = 0;
000080  e59f4348          LDR      r4,|L1.976|
000084  e3a05000          MOV      r5,#0
000088  e1a06000          MOV      r6,r0                 ;94
00008c  e5c45000          STRB     r5,[r4,#0]  ; resendCount
000090  ea00002a          B        |L1.320|
                  |L1.148|
;;;96     	while(resendCount++ < 10)
;;;97     	{
;;;98     		printf("%s", theMessageToResend);
000094  e1a01006          MOV      r1,r6
000098  e28f0fce          ADR      r0,|L1.984|
00009c  ebfffffe          BL       __2printf
;;;99     		
;;;100    		initTimer(&ResendimeoutTimer);
0000a0  e59f0334          LDR      r0,|L1.988|
0000a4  ebfffffe          BL       initTimer
;;;101    		startTimer(&ResendimeoutTimer, RESEND_TIMEOUT_TIME_MS);
0000a8  e59f032c          LDR      r0,|L1.988|
0000ac  e3a01f7d          MOV      r1,#0x1f4
0000b0  ebfffffe          BL       startTimer
;;;102    		
;;;103    		while(isTimerExpired(&ResendimeoutTimer) == FALSE)
0000b4  ea000001          B        |L1.192|
                  |L1.184|
;;;104    		{
;;;105    			serialDebugDoWork();
0000b8  ebfffffe          BL       serialDebugDoWork
;;;106    			serialDoWork();
0000bc  ebfffffe          BL       serialDoWork
                  |L1.192|
0000c0  e59f0314          LDR      r0,|L1.988|
0000c4  ebfffffe          BL       isTimerExpired
0000c8  e3500000          CMP      r0,#0                 ;103
0000cc  0afffff9          BEQ      |L1.184|
;;;107    		}
;;;108    		
;;;109    		hwPetWatchDog();
0000d0  ebfffffe          BL       hwPetWatchDog
;;;110    		
;;;111    		if(serialGetQuitFlag() == TRUE || serialDebugGetQuitFlag() == TRUE)
0000d4  ebfffffe          BL       serialGetQuitFlag
0000d8  e3500001          CMP      r0,#1
0000dc  0a000008          BEQ      |L1.260|
0000e0  ebfffffe          BL       serialDebugGetQuitFlag
0000e4  e3500001          CMP      r0,#1
0000e8  0a000005          BEQ      |L1.260|
;;;112    		{
;;;113    			compassBoardState = COMPASS_BOARD_STATE_IDLE;
;;;114    
;;;115    			AutoCalFlag = FALSE;
;;;116    			printf("ERRCAL, Exit Cal \n");
;;;117    			break;
;;;118    		}
;;;119    		else if(serialGetMessage(&bMessage, &bMessageLength) == TRUE && bMessageLength > 0)
0000ec  e59f12ec          LDR      r1,|L1.992|
0000f0  e2810011          ADD      r0,r1,#0x11
0000f4  ebfffffe          BL       serialGetMessage
0000f8  e3500001          CMP      r0,#1
0000fc  1a00000f          BNE      |L1.320|
000100  ea000005          B        |L1.284|
                  |L1.260|
000104  e3a00002          MOV      r0,#2                 ;113
000108  e5c40004          STRB     r0,[r4,#4]            ;113  ; compassBoardState
00010c  e5c45006          STRB     r5,[r4,#6]            ;115  ; AutoCalFlag
000110  e8bd4070          POP      {r4-r6,lr}            ;116
000114  e28f0fb2          ADR      r0,|L1.996|
000118  eafffffe          B        __2printf
                  |L1.284|
00011c  e5d40003          LDRB     r0,[r4,#3]  ; bMessageLength
000120  e3500000          CMP      r0,#0
000124  0a000005          BEQ      |L1.320|
;;;120    		{
;;;121    			if(strncmp("ack", bMessage, 3) == 0)
000128  e5941014          LDR      r1,[r4,#0x14]  ; bMessage
00012c  e3a02003          MOV      r2,#3
000130  e28f0d0b          ADR      r0,|L1.1016|
000134  ebfffffe          BL       strncmp
000138  e3500000          CMP      r0,#0
00013c  0a000004          BEQ      |L1.340|
                  |L1.320|
000140  e5d40000          LDRB     r0,[r4,#0]            ;96  ; resendCount
000144  e2801001          ADD      r1,r0,#1              ;96
000148  e350000a          CMP      r0,#0xa               ;96
00014c  e5c41000          STRB     r1,[r4,#0]            ;96  ; resendCount
000150  3affffcf          BCC      |L1.148|
                  |L1.340|
;;;122    			{
;;;123    				break; // acknowledge received
;;;124    			}
;;;125    		}
;;;126    	}
;;;127    }
000154  e8bd4070          POP      {r4-r6,lr}
000158  e12fff1e          BX       lr
;;;128    
                          ENDP

                  convertFromQuaternionsToEulerAngles PROC
;;;129    static void convertFromQuaternionsToEulerAngles()
00015c  e92d47f0          PUSH     {r4-r10,lr}
;;;130    {
;;;131    	// Define output variables from updated quaternion---these are Tait-Bryan
;;;132    	// angles, commonly used in aircraft orientation. In this coordinate system,
;;;133    	// the positive z-axis is down toward Earth. Yaw is the angle between Sensor
;;;134    	// x-axis and Earth magnetic North (or TRUE North if corrected for local
;;;135    	// declination, looking down on the sensor positive yaw is counterclockwise.
;;;136    	// Pitch is angle between sensor x-axis and Earth ground plane, toward the
;;;137    	// Earth is positive, up toward the sky is negative. Roll is angle between
;;;138    	// sensor y-axis and Earth ground plane, y-axis up is positive roll. These
;;;139    	// arise from the definition of the homogeneous rotation matrix constructed
;;;140    	// from quaternions. Tait-Bryan angles as well as Euler angles are
;;;141    	// non-commutative; that is, the get the correct orientation the rotations
;;;142    	// must be applied in the correct order which for this configuration is yaw,
;;;143    	// pitch, and then roll.
;;;144    	// For more see
;;;145    	// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
;;;146    	// which has additional links.
;;;147    	double t0, t1, t2, t3, t4, ysqr;
;;;148    	qw = *(getQ() + 0);
;;;149    	qx = *(getQ() + 1);
;;;150    	qy = *(getQ() + 2);
;;;151    	qz = *(getQ() + 3);
;;;152    	ysqr = qy * qy;
;;;153    
;;;154    	// roll (x-axis rotation)
;;;155    	t0 = +2.0 * (qw * qx + qy * qz);
;;;156    	t1 = +1.0 - 2.0 * (qx * qx + ysqr);
000160  e59fa294          LDR      r10,|L1.1020|
000164  e59f4264          LDR      r4,|L1.976|
000168  ebfffffe          BL       getQ
00016c  e5900000          LDR      r0,[r0,#0]            ;148
000170  e5840030          STR      r0,[r4,#0x30]         ;148  ; qw
000174  ebfffffe          BL       getQ
000178  e5900004          LDR      r0,[r0,#4]            ;149
00017c  e5840034          STR      r0,[r4,#0x34]         ;149  ; qx
000180  ebfffffe          BL       getQ
000184  e5900008          LDR      r0,[r0,#8]            ;150
000188  e5840038          STR      r0,[r4,#0x38]         ;150  ; qy
00018c  ebfffffe          BL       getQ
000190  e590700c          LDR      r7,[r0,#0xc]          ;151
000194  e584703c          STR      r7,[r4,#0x3c]         ;152  ; qz
000198  e5941038          LDR      r1,[r4,#0x38]         ;152  ; qy
00019c  e1a08001          MOV      r8,r1                 ;152
0001a0  e1a00008          MOV      r0,r8                 ;152
0001a4  ebfffffe          BL       __aeabi_fmul
0001a8  ebfffffe          BL       __aeabi_f2d
0001ac  e1a05000          MOV      r5,r0                 ;152
0001b0  e1a06001          MOV      r6,r1                 ;152
0001b4  e1a01007          MOV      r1,r7                 ;152
0001b8  e1a00008          MOV      r0,r8                 ;152
0001bc  ebfffffe          BL       __aeabi_fmul
0001c0  e5941034          LDR      r1,[r4,#0x34]         ;155  ; qx
0001c4  e1a08000          MOV      r8,r0                 ;155
0001c8  e5940030          LDR      r0,[r4,#0x30]         ;155  ; qw
0001cc  e1a07001          MOV      r7,r1                 ;155
0001d0  ebfffffe          BL       __aeabi_fmul
0001d4  e1a01008          MOV      r1,r8                 ;155
0001d8  ebfffffe          BL       __aeabi_fadd
0001dc  ebfffffe          BL       __aeabi_f2d
0001e0  e3a02001          MOV      r2,#1                 ;155
0001e4  ebfffffe          BL       __ARM_scalbn
0001e8  e1a09001          MOV      r9,r1                 ;155
0001ec  e1a08000          MOV      r8,r0                 ;155
0001f0  e1a01007          MOV      r1,r7                 ;155
0001f4  e1a00001          MOV      r0,r1                 ;155
0001f8  ebfffffe          BL       __aeabi_fmul
0001fc  ebfffffe          BL       __aeabi_f2d
000200  e1a02005          MOV      r2,r5
000204  e1a03006          MOV      r3,r6
000208  ebfffffe          BL       __aeabi_dadd
00020c  e3a02001          MOV      r2,#1
000210  ebfffffe          BL       __ARM_scalbn
000214  e3a02000          MOV      r2,#0
000218  e1a0700a          MOV      r7,r10
00021c  e1a0300a          MOV      r3,r10
000220  ebfffffe          BL       __aeabi_drsub
;;;157    	roll = atan2(t0, t1);
000224  e1a02000          MOV      r2,r0
000228  e1a03001          MOV      r3,r1
00022c  e1a00008          MOV      r0,r8
000230  e1a01009          MOV      r1,r9
000234  ebfffffe          BL       atan2
000238  ebfffffe          BL       __aeabi_d2f
;;;158    
;;;159    	// pitch (y-axis rotation)
;;;160    	t2 = +2.0 * (qw * qy - qz * qx);
00023c  e584002c          STR      r0,[r4,#0x2c]  ; roll
000240  e594003c          LDR      r0,[r4,#0x3c]  ; qx, qz
000244  e5941034          LDR      r1,[r4,#0x34]
000248  ebfffffe          BL       __aeabi_fmul
00024c  e1a08000          MOV      r8,r0
000250  e5940030          LDR      r0,[r4,#0x30]  ; qy, qw
000254  e5941038          LDR      r1,[r4,#0x38]
000258  ebfffffe          BL       __aeabi_fmul
00025c  e1a01008          MOV      r1,r8
000260  ebfffffe          BL       __aeabi_fsub
000264  ebfffffe          BL       __aeabi_f2d
000268  e3a02001          MOV      r2,#1
00026c  ebfffffe          BL       __ARM_scalbn
000270  e1a08000          MOV      r8,r0
000274  e1a09001          MOV      r9,r1
;;;161    	t2 = t2 > 1.0 ? 1.0 : t2;
000278  e3a02000          MOV      r2,#0
00027c  e1a03007          MOV      r3,r7
000280  ebfffffe          BL       __aeabi_cdrcmple
000284  359f1170          LDRCC    r1,|L1.1020|
000288  21a00008          MOVCS    r0,r8
00028c  21a01009          MOVCS    r1,r9
000290  33a00000          MOVCC    r0,#0
;;;162    	t2 = t2 < -1.0 ? -1.0 : t2;
000294  e59f3164          LDR      r3,|L1.1024|
000298  e1a08000          MOV      r8,r0                 ;161
00029c  e1a09001          MOV      r9,r1                 ;161
0002a0  e3a02000          MOV      r2,#0
0002a4  ebfffffe          BL       __aeabi_cdcmple
0002a8  359f1150          LDRCC    r1,|L1.1024|
0002ac  21a00008          MOVCS    r0,r8
0002b0  21a01009          MOVCS    r1,r9
0002b4  33a00000          MOVCC    r0,#0
;;;163    	pitch = asin(t2);
0002b8  ebfffffe          BL       asin
0002bc  ebfffffe          BL       __aeabi_d2f
;;;164    
;;;165    	// yaw (z-axis rotation)
;;;166    	t3 = +2.0 * (qw * qz + qx * qy);
0002c0  e2841034          ADD      r1,r4,#0x34
0002c4  e5840024          STR      r0,[r4,#0x24]  ; pitch
0002c8  e8910003          LDM      r1,{r0,r1}  ; qy, qx
0002cc  ebfffffe          BL       __aeabi_fmul
0002d0  e594103c          LDR      r1,[r4,#0x3c]  ; qz
0002d4  e1a08000          MOV      r8,r0
0002d8  e5940030          LDR      r0,[r4,#0x30]  ; qw
0002dc  e1a0a001          MOV      r10,r1
0002e0  ebfffffe          BL       __aeabi_fmul
0002e4  e1a01008          MOV      r1,r8
0002e8  ebfffffe          BL       __aeabi_fadd
0002ec  ebfffffe          BL       __aeabi_f2d
0002f0  e3a02001          MOV      r2,#1
0002f4  ebfffffe          BL       __ARM_scalbn
0002f8  e1a09001          MOV      r9,r1
0002fc  e1a08000          MOV      r8,r0
000300  e1a0100a          MOV      r1,r10
000304  e1a00001          MOV      r0,r1
;;;167    	t4 = +1.0 - 2.0 * (ysqr + qz * qz);
000308  ebfffffe          BL       __aeabi_fmul
00030c  ebfffffe          BL       __aeabi_f2d
000310  e1a02005          MOV      r2,r5
000314  e1a03006          MOV      r3,r6
000318  ebfffffe          BL       __aeabi_dadd
00031c  e3a02001          MOV      r2,#1
000320  ebfffffe          BL       __ARM_scalbn
000324  e3a02000          MOV      r2,#0
000328  e1a03007          MOV      r3,r7
00032c  ebfffffe          BL       __aeabi_drsub
;;;168    	yaw = atan2(t3, t4);
000330  e1a02000          MOV      r2,r0
000334  e1a03001          MOV      r3,r1
000338  e1a00008          MOV      r0,r8
00033c  e1a01009          MOV      r1,r9
000340  ebfffffe          BL       atan2
000344  ebfffffe          BL       __aeabi_d2f
;;;169    
;;;170    	yaw   *= RAD_TO_DEG;
000348  ebfffffe          BL       __aeabi_f2d
00034c  e59f60b0          LDR      r6,|L1.1028|
000350  e59f70b0          LDR      r7,|L1.1032|
000354  e1a02006          MOV      r2,r6
000358  e1a03007          MOV      r3,r7
00035c  ebfffffe          BL       __aeabi_dmul
000360  ebfffffe          BL       __aeabi_d2f
000364  e1a05000          MOV      r5,r0
;;;171    	pitch *= RAD_TO_DEG;
000368  e5940024          LDR      r0,[r4,#0x24]  ; pitch
00036c  ebfffffe          BL       __aeabi_f2d
000370  e1a02006          MOV      r2,r6
000374  e1a03007          MOV      r3,r7
000378  ebfffffe          BL       __aeabi_dmul
00037c  ebfffffe          BL       __aeabi_d2f
;;;172    	roll  *= RAD_TO_DEG;
000380  e5840024          STR      r0,[r4,#0x24]  ; pitch
000384  e594002c          LDR      r0,[r4,#0x2c]  ; roll
000388  ebfffffe          BL       __aeabi_f2d
00038c  e1a02006          MOV      r2,r6
000390  e1a03007          MOV      r3,r7
000394  ebfffffe          BL       __aeabi_dmul
000398  ebfffffe          BL       __aeabi_d2f
;;;173    
;;;174    	yaw += 360.0;
00039c  e59f6068          LDR      r6,|L1.1036|
0003a0  e584002c          STR      r0,[r4,#0x2c]  ; roll
0003a4  e1a01006          MOV      r1,r6
0003a8  e1a00005          MOV      r0,r5
0003ac  ebfffffe          BL       __aeabi_fadd
;;;175    	if (yaw > 360.0)
0003b0  e1500006          CMP      r0,r6
0003b4  e5840028          STR      r0,[r4,#0x28]         ;174  ; yaw
0003b8  da000002          BLE      |L1.968|
;;;176    	{
;;;177    		yaw -= 360.0;
0003bc  e1a01006          MOV      r1,r6
0003c0  ebfffffe          BL       __aeabi_fsub
0003c4  e5840028          STR      r0,[r4,#0x28]  ; yaw
                  |L1.968|
;;;178    	}
;;;179    }
0003c8  e8bd47f0          POP      {r4-r10,lr}
0003cc  e12fff1e          BX       lr
                  |L1.976|
                          DCD      ||.data||
                  |L1.980|
                          DCD      0xe000c000
                  |L1.984|
0003d8  257300            DCB      "%s",0
0003db  00                DCB      0
                  |L1.988|
                          DCD      ||.data||+0x48
                  |L1.992|
                          DCD      ||.data||+0x3
                  |L1.996|
0003e4  45525243          DCB      "ERRCAL, Exit Cal \n",0
0003e8  414c2c20
0003ec  45786974
0003f0  2043616c
0003f4  200a00  
0003f7  00                DCB      0
                  |L1.1016|
0003f8  61636b00          DCB      "ack",0
                  |L1.1020|
                          DCD      0x3ff00000
                  |L1.1024|
                          DCD      0xbff00000
                  |L1.1028|
                          DCD      0x1a53b118
                  |L1.1032|
                          DCD      0x404ca5dc
                  |L1.1036|
                          DCD      0x43b40000
                          ENDP

                  printData PROC
;;;180    
;;;181    static void printData()
000410  e92d4ff0          PUSH     {r4-r11,lr}
;;;182    {
000414  e24dd044          SUB      sp,sp,#0x44
;;;183       convertFromQuaternionsToEulerAngles();
000418  ebfffffe          BL       convertFromQuaternionsToEulerAngles
;;;184    	
;;;185    	if(commaFormat == FALSE)
00041c  e51f4054          LDR      r4,|L1.976|
;;;186    	{
;;;187    		// Print temperature in degrees Centigrade
;;;188    		printf("TEMP, %0.2f (°C) \n", temperature);
;;;189    
;;;190    		// Print acceleration values in milligs!
;;;191    		printf("ACCL, %0.2f aX (mg), %0.2f aY (mg), %0.2f aZ (mg) \n", 1000.0 * ax, 1000.0 * ay, 1000.0 * az);
000420  e59f5354          LDR      r5,|L1.1916|
000424  e5d40001          LDRB     r0,[r4,#1]            ;185  ; commaFormat
;;;192    
;;;193    		// Print gyro values in degree/sec
;;;194    		printf("GYRO, 0 gX (deg/s), 0gY (deg/s), 0 gZ (deg/s) \n");
;;;195    
;;;196    		// Print mag values in uT
;;;197    		printf("MAG, %0.2f mH (uT), %0.2f mX (uT), %0.2f mY (uT), %0.2f mZ (uT), %0.2f mF (uT) \n",
000428  e59f6350          LDR      r6,|L1.1920|
00042c  e59f7350          LDR      r7,|L1.1924|
000430  e3500000          CMP      r0,#0                 ;185
000434  0a000049          BEQ      |L1.1376|
;;;198    			sqrt(mx * mx + my * my), mx, my, mz, sqrt(mx * mx + my * my + mz * mz));
;;;199    
;;;200    		printf("QVAL, %0.2f qW, %0.2f qX, %0.2f qY, %0.2f qZ \n", qw, qx, qy, qz);
;;;201    
;;;202    		printf("YPR, %0.2f yaw, %0.2f pitch, %0.2f roll \n", yaw, pitch, roll);
;;;203    
;;;204    		printf("FREQ,%0.2f rate (Hz) \n", getRate());
;;;205    	}
;;;206    	else
;;;207    	{
;;;208    		printf("%d, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, \n", 
000438  e594002c          LDR      r0,[r4,#0x2c]  ; roll
00043c  ebfffffe          BL       __aeabi_f2d
000440  e1a0b000          MOV      r11,r0
000444  e58d101c          STR      r1,[sp,#0x1c]
000448  e5940024          LDR      r0,[r4,#0x24]  ; pitch
00044c  ebfffffe          BL       __aeabi_f2d
000450  e1a0a000          MOV      r10,r0
000454  e58d1018          STR      r1,[sp,#0x18]
000458  e5940028          LDR      r0,[r4,#0x28]  ; yaw
00045c  ebfffffe          BL       __aeabi_f2d
000460  e1a09000          MOV      r9,r0
000464  e58d1014          STR      r1,[sp,#0x14]
000468  e5960000          LDR      r0,[r6,#0]  ; mz
00046c  ebfffffe          BL       __aeabi_f2d
000470  e28d2008          ADD      r2,sp,#8
000474  e8820003          STM      r2,{r0,r1}
000478  e5970000          LDR      r0,[r7,#0]  ; my
00047c  ebfffffe          BL       __aeabi_f2d
000480  e1a08000          MOV      r8,r0
000484  e59f02fc          LDR      r0,|L1.1928|
000488  e58d1010          STR      r1,[sp,#0x10]
00048c  e5900000          LDR      r0,[r0,#0]  ; mx
000490  ebfffffe          BL       __aeabi_f2d
000494  e1a06000          MOV      r6,r0
000498  e59f02ec          LDR      r0,|L1.1932|
00049c  e1a07001          MOV      r7,r1
0004a0  e5900000          LDR      r0,[r0,#0]  ; az
0004a4  ebfffffe          BL       __aeabi_f2d
0004a8  e3a02000          MOV      r2,#0
0004ac  e1c53002          BIC      r3,r5,r2
0004b0  ebfffffe          BL       __aeabi_dmul
0004b4  e58d0040          STR      r0,[sp,#0x40]
0004b8  e59f02d0          LDR      r0,|L1.1936|
0004bc  e1a05001          MOV      r5,r1
0004c0  e5900000          LDR      r0,[r0,#0]  ; ay
0004c4  ebfffffe          BL       __aeabi_f2d
0004c8  e59f32ac          LDR      r3,|L1.1916|
0004cc  e3a02000          MOV      r2,#0
0004d0  ebfffffe          BL       __aeabi_dmul
0004d4  e88d0003          STM      sp,{r0,r1}
0004d8  e59f02b4          LDR      r0,|L1.1940|
0004dc  e5900000          LDR      r0,[r0,#0]  ; ax
0004e0  ebfffffe          BL       __aeabi_f2d
0004e4  e59f3290          LDR      r3,|L1.1916|
0004e8  e3a02000          MOV      r2,#0
0004ec  ebfffffe          BL       __aeabi_dmul
0004f0  e1a03001          MOV      r3,r1
0004f4  e59d101c          LDR      r1,[sp,#0x1c]
0004f8  e28d2008          ADD      r2,sp,#8
0004fc  e58d103c          STR      r1,[sp,#0x3c]
000500  e59d1018          LDR      r1,[sp,#0x18]
000504  e58db038          STR      r11,[sp,#0x38]
000508  e58d1034          STR      r1,[sp,#0x34]
00050c  e59d1014          LDR      r1,[sp,#0x14]
000510  e58d9028          STR      r9,[sp,#0x28]
000514  e58da030          STR      r10,[sp,#0x30]
000518  e58d102c          STR      r1,[sp,#0x2c]
00051c  e8920006          LDM      r2,{r1,r2}
000520  e28d9020          ADD      r9,sp,#0x20
000524  e8890006          STM      r9,{r1,r2}
000528  e59d1010          LDR      r1,[sp,#0x10]
00052c  e58d101c          STR      r1,[sp,#0x1c]
000530  e28d1010          ADD      r1,sp,#0x10
000534  e88101c0          STM      r1,{r6-r8}
000538  e59d2040          LDR      r2,[sp,#0x40]
00053c  e28d1008          ADD      r1,sp,#8
000540  e8810024          STM      r1,{r2,r5}
000544  e1a02000          MOV      r2,r0
000548  e59f0248          LDR      r0,|L1.1944|
00054c  e5941018          LDR      r1,[r4,#0x18]  ; currentDirection
000550  ebfffffe          BL       __2printf
                  |L1.1364|
;;;209    		currentDirection,
;;;210    		1000.0 * ax,
;;;211    		1000.0 * ay,
;;;212    		1000.0 * az,
;;;213    		mx,
;;;214    		my,
;;;215    		mz,
;;;216    		yaw,
;;;217    		pitch,
;;;218    		roll);
;;;219    	}
;;;220    }
000554  e28dd044          ADD      sp,sp,#0x44
000558  e8bd4ff0          POP      {r4-r11,lr}
00055c  e12fff1e          BX       lr
                  |L1.1376|
000560  e59f0234          LDR      r0,|L1.1948|
000564  e5900000          LDR      r0,[r0,#0]            ;188  ; temperature
000568  ebfffffe          BL       __aeabi_f2d
00056c  e1a02000          MOV      r2,r0                 ;188
000570  e1a03001          MOV      r3,r1                 ;188
000574  e28f0f89          ADR      r0,|L1.1952|
000578  ebfffffe          BL       __2printf
00057c  e59f0208          LDR      r0,|L1.1932|
000580  e5900000          LDR      r0,[r0,#0]            ;191  ; az
000584  ebfffffe          BL       __aeabi_f2d
000588  e3a02000          MOV      r2,#0                 ;191
00058c  e1a0b005          MOV      r11,r5                ;191
000590  e1a03005          MOV      r3,r5                 ;191
000594  ebfffffe          BL       __aeabi_dmul
000598  e1a09000          MOV      r9,r0                 ;191
00059c  e59f01ec          LDR      r0,|L1.1936|
0005a0  e1a0a001          MOV      r10,r1                ;191
0005a4  e5900000          LDR      r0,[r0,#0]            ;191  ; ay
0005a8  ebfffffe          BL       __aeabi_f2d
0005ac  e3a02000          MOV      r2,#0                 ;191
0005b0  e1a0300b          MOV      r3,r11                ;191
0005b4  ebfffffe          BL       __aeabi_dmul
0005b8  e1a05000          MOV      r5,r0                 ;191
0005bc  e59f01d0          LDR      r0,|L1.1940|
0005c0  e1a08001          MOV      r8,r1                 ;191
0005c4  e5900000          LDR      r0,[r0,#0]            ;191  ; ax
0005c8  ebfffffe          BL       __aeabi_f2d
0005cc  e3a02000          MOV      r2,#0                 ;191
0005d0  e1a0300b          MOV      r3,r11                ;191
0005d4  ebfffffe          BL       __aeabi_dmul
0005d8  e88d0720          STM      sp,{r5,r8-r10}        ;191
0005dc  e1a02000          MOV      r2,r0                 ;191
0005e0  e1a03001          MOV      r3,r1                 ;191
0005e4  e28f0f72          ADR      r0,|L1.1972|
0005e8  ebfffffe          BL       __2printf
0005ec  e28f0f7d          ADR      r0,|L1.2024|
0005f0  ebfffffe          BL       __2printf
0005f4  e5961000          LDR      r1,[r6,#0]            ;197  ; mz
0005f8  e1a00001          MOV      r0,r1                 ;197
0005fc  ebfffffe          BL       __aeabi_fmul
000600  e5971000          LDR      r1,[r7,#0]            ;197  ; my
000604  e1a05000          MOV      r5,r0                 ;197
000608  e1a00001          MOV      r0,r1                 ;197
00060c  ebfffffe          BL       __aeabi_fmul
000610  e59f9170          LDR      r9,|L1.1928|
000614  e1a08000          MOV      r8,r0                 ;197
000618  e5991000          LDR      r1,[r9,#0]            ;197  ; mx
00061c  e1a00001          MOV      r0,r1                 ;197
000620  ebfffffe          BL       __aeabi_fmul
000624  e1a01008          MOV      r1,r8                 ;197
000628  ebfffffe          BL       __aeabi_fadd
00062c  e1a01005          MOV      r1,r5                 ;197
000630  ebfffffe          BL       __aeabi_fadd
000634  ebfffffe          BL       __aeabi_f2d
000638  ebfffffe          BL       sqrt
00063c  e58d0008          STR      r0,[sp,#8]            ;197
000640  e5960000          LDR      r0,[r6,#0]            ;197  ; mz
000644  e1a05001          MOV      r5,r1                 ;197
000648  ebfffffe          BL       __aeabi_f2d
00064c  e1a06000          MOV      r6,r0                 ;197
000650  e5970000          LDR      r0,[r7,#0]            ;197  ; my
000654  e1a08001          MOV      r8,r1                 ;197
000658  e58d0004          STR      r0,[sp,#4]            ;197
00065c  ebfffffe          BL       __aeabi_f2d
000660  e1a07000          MOV      r7,r0                 ;197
000664  e5990000          LDR      r0,[r9,#0]            ;197  ; mx
000668  e1a0a001          MOV      r10,r1                ;197
00066c  e58d0000          STR      r0,[sp,#0]            ;197
000670  ebfffffe          BL       __aeabi_f2d
000674  e1a0b001          MOV      r11,r1                ;197
000678  e59d1004          LDR      r1,[sp,#4]            ;197
00067c  e1a09000          MOV      r9,r0                 ;197
000680  e1a00001          MOV      r0,r1                 ;197
000684  ebfffffe          BL       __aeabi_fmul
000688  e59d1000          LDR      r1,[sp,#0]            ;197
00068c  e58d0004          STR      r0,[sp,#4]            ;197
000690  e1a00001          MOV      r0,r1                 ;197
000694  ebfffffe          BL       __aeabi_fmul
000698  e59d1004          LDR      r1,[sp,#4]            ;197
00069c  ebfffffe          BL       __aeabi_fadd
0006a0  ebfffffe          BL       __aeabi_f2d
0006a4  ebfffffe          BL       sqrt
0006a8  e59d2008          LDR      r2,[sp,#8]            ;197
0006ac  e1a03001          MOV      r3,r1                 ;197
0006b0  e28d1018          ADD      r1,sp,#0x18           ;197
0006b4  e8810024          STM      r1,{r2,r5}            ;197
0006b8  e28d1010          ADD      r1,sp,#0x10           ;197
0006bc  e8810140          STM      r1,{r6,r8}            ;197
0006c0  e28d1008          ADD      r1,sp,#8              ;197
0006c4  e8810480          STM      r1,{r7,r10}           ;197
0006c8  e1a02000          MOV      r2,r0                 ;197
0006cc  e88d0a00          STM      sp,{r9,r11}           ;197
0006d0  e59f0140          LDR      r0,|L1.2072|
0006d4  ebfffffe          BL       __2printf
0006d8  e594003c          LDR      r0,[r4,#0x3c]         ;200  ; qz
0006dc  ebfffffe          BL       __aeabi_f2d
0006e0  e1a09000          MOV      r9,r0                 ;200
0006e4  e5940038          LDR      r0,[r4,#0x38]         ;200  ; qy
0006e8  e1a0a001          MOV      r10,r1                ;200
0006ec  ebfffffe          BL       __aeabi_f2d
0006f0  e1a07000          MOV      r7,r0                 ;200
0006f4  e5940034          LDR      r0,[r4,#0x34]         ;200  ; qx
0006f8  e1a08001          MOV      r8,r1                 ;200
0006fc  ebfffffe          BL       __aeabi_f2d
000700  e1a05000          MOV      r5,r0                 ;200
000704  e5940030          LDR      r0,[r4,#0x30]         ;200  ; qw
000708  e1a06001          MOV      r6,r1                 ;200
00070c  ebfffffe          BL       __aeabi_f2d
000710  e88d07e0          STM      sp,{r5-r10}           ;200
000714  e1a02000          MOV      r2,r0                 ;200
000718  e1a03001          MOV      r3,r1                 ;200
00071c  e28f00f8          ADR      r0,|L1.2076|
000720  ebfffffe          BL       __2printf
000724  e594002c          LDR      r0,[r4,#0x2c]         ;202  ; roll
000728  ebfffffe          BL       __aeabi_f2d
00072c  e1a07000          MOV      r7,r0                 ;202
000730  e5940024          LDR      r0,[r4,#0x24]         ;202  ; pitch
000734  e1a08001          MOV      r8,r1                 ;202
000738  ebfffffe          BL       __aeabi_f2d
00073c  e1a05000          MOV      r5,r0                 ;202
000740  e5940028          LDR      r0,[r4,#0x28]         ;202  ; yaw
000744  e1a06001          MOV      r6,r1                 ;202
000748  ebfffffe          BL       __aeabi_f2d
00074c  e88d01e0          STM      sp,{r5-r8}            ;202
000750  e1a02000          MOV      r2,r0                 ;202
000754  e1a03001          MOV      r3,r1                 ;202
000758  e28f00ec          ADR      r0,|L1.2124|
00075c  ebfffffe          BL       __2printf
000760  ebfffffe          BL       getRate
000764  ebfffffe          BL       __aeabi_f2d
000768  e1a02000          MOV      r2,r0                 ;204
00076c  e1a03001          MOV      r3,r1                 ;204
000770  e28f0c01          ADR      r0,|L1.2168|
000774  ebfffffe          BL       __2printf
000778  eaffff75          B        |L1.1364|
                  |L1.1916|
                          DCD      0x408f4000
                  |L1.1920|
                          DCD      ||mz||
                  |L1.1924|
                          DCD      ||my||
                  |L1.1928|
                          DCD      ||mx||
                  |L1.1932|
                          DCD      ||az||
                  |L1.1936|
                          DCD      ||ay||
                  |L1.1940|
                          DCD      ||ax||
                  |L1.1944|
                          DCD      ||.conststring||+0x54
                  |L1.1948|
                          DCD      temperature
                  |L1.1952|
0007a0  54454d50          DCB      "TEMP, %0.2f (",194,176,"C) \n",0
0007a4  2c202530
0007a8  2e326620
0007ac  28c2b043
0007b0  29200a00
                  |L1.1972|
0007b4  4143434c          DCB      "ACCL, %0.2f aX (mg), %0.2f aY (mg), %0.2f aZ (mg) \n",0
0007b8  2c202530
0007bc  2e326620
0007c0  61582028
0007c4  6d67292c
0007c8  2025302e
0007cc  32662061
0007d0  5920286d
0007d4  67292c20
0007d8  25302e32
0007dc  6620615a
0007e0  20286d67
0007e4  29200a00
                  |L1.2024|
0007e8  4759524f          DCB      "GYRO, 0 gX (deg/s), 0gY (deg/s), 0 gZ (deg/s) \n",0
0007ec  2c203020
0007f0  67582028
0007f4  6465672f
0007f8  73292c20
0007fc  30675920
000800  28646567
000804  2f73292c
000808  20302067
00080c  5a202864
000810  65672f73
000814  29200a00
                  |L1.2072|
                          DCD      ||.conststring||
                  |L1.2076|
00081c  5156414c          DCB      "QVAL, %0.2f qW, %0.2f qX, %0.2f qY, %0.2f qZ \n",0
000820  2c202530
000824  2e326620
000828  71572c20
00082c  25302e32
000830  66207158
000834  2c202530
000838  2e326620
00083c  71592c20
000840  25302e32
000844  6620715a
000848  200a00  
00084b  00                DCB      0
                  |L1.2124|
00084c  5950522c          DCB      "YPR, %0.2f yaw, %0.2f pitch, %0.2f roll \n",0
000850  2025302e
000854  32662079
000858  61772c20
00085c  25302e32
000860  66207069
000864  7463682c
000868  2025302e
00086c  32662072
000870  6f6c6c20
000874  0a00    
000876  00                DCB      0
000877  00                DCB      0
                  |L1.2168|
000878  46524551          DCB      "FREQ,%0.2f rate (Hz) \n",0
00087c  2c25302e
000880  32662072
000884  61746520
000888  28487a29
00088c  200a00  
00088f  00                DCB      0
                          ENDP

                  printCal PROC
;;;221    
;;;222    static void printCal(void)
000890  e92d4ff0          PUSH     {r4-r11,lr}
;;;223    {
;;;224    		
;;;225    	// Initialize device for active mode read of acclerometer, gyroscope, and temperature
;;;226    	printf("CALVALUE, %0.1f aX-axis (of factory),  %0.1f aY-axis (of factory),  %0.1f aZ-axis (of factory),  %0.1f gX-axis (within),  %0.1f gY-axis (within),  %0.1f gZ-axis (within),  0 mX-Axis : (sensitivity),  0 mY-Axis : (sensitivity),  0  mZ-Axis : (sensitivity)\n", 
000894  e59f43a8          LDR      r4,|L1.3140|
000898  e24dd04c          SUB      sp,sp,#0x4c           ;223
00089c  e5940014          LDR      r0,[r4,#0x14]  ; SelfTest
0008a0  ebfffffe          BL       __aeabi_f2d
0008a4  e88d0003          STM      sp,{r0,r1}
0008a8  e5940010          LDR      r0,[r4,#0x10]  ; SelfTest
0008ac  ebfffffe          BL       __aeabi_f2d
0008b0  e58d0008          STR      r0,[sp,#8]
0008b4  e594000c          LDR      r0,[r4,#0xc]  ; SelfTest
0008b8  e1a0b001          MOV      r11,r1
0008bc  ebfffffe          BL       __aeabi_f2d
0008c0  e1a09000          MOV      r9,r0
0008c4  e5940008          LDR      r0,[r4,#8]  ; SelfTest
0008c8  e1a0a001          MOV      r10,r1
0008cc  ebfffffe          BL       __aeabi_f2d
0008d0  e1a07000          MOV      r7,r0
0008d4  e5940004          LDR      r0,[r4,#4]  ; SelfTest
0008d8  e1a08001          MOV      r8,r1
0008dc  ebfffffe          BL       __aeabi_f2d
0008e0  e1a05000          MOV      r5,r0
0008e4  e5940000          LDR      r0,[r4,#0]  ; SelfTest
0008e8  e1a06001          MOV      r6,r1
0008ec  ebfffffe          BL       __aeabi_f2d
0008f0  e1a03001          MOV      r3,r1
0008f4  e89d0006          LDM      sp,{r1,r2}
0008f8  e28d4020          ADD      r4,sp,#0x20
0008fc  e8840006          STM      r4,{r1,r2}
000900  e59d2008          LDR      r2,[sp,#8]
000904  e28d1018          ADD      r1,sp,#0x18
000908  e8810804          STM      r1,{r2,r11}
00090c  e88d07e0          STM      sp,{r5-r10}
000910  e1a02000          MOV      r2,r0
000914  e59f032c          LDR      r0,|L1.3144|
000918  ebfffffe          BL       __2printf
;;;227    		SelfTest[0],
;;;228    		SelfTest[1],
;;;229    		SelfTest[2],
;;;230    		SelfTest[3],
;;;231    		SelfTest[4],
;;;232    		SelfTest[5]
;;;233    		);
;;;234    	
;;;235       // Print acceleration values!
;;;236    	printf("agCal, %ld aX Bias, %ld aY Bias, %ld aZ Bias, 0 gX Bias, 0 gY Bias, 0 gZ Bias, %d Orientation, Info: %s \n",
00091c  e59f2328          LDR      r2,|L1.3148|
000920  e2420011          SUB      r0,r2,#0x11
000924  e5d01010          LDRB     r1,[r0,#0x10]  ; calibrationDataACal
000928  e2800004          ADD      r0,r0,#4
00092c  e88d0006          STM      sp,{r1,r2}
000930  e890000e          LDM      r0,{r1-r3}
000934  e59f0314          LDR      r0,|L1.3152|
000938  ebfffffe          BL       __2printf
;;;237    		calibrationDataACal.accelBias[0],
;;;238    		calibrationDataACal.accelBias[1],
;;;239    		calibrationDataACal.accelBias[2],
;;;240    		calibrationDataACal.boardOrientaton,
;;;241    		calibrationDataACal.calInfo
;;;242    		);
;;;243    
;;;244    	// Print magBiasInit and magScaleInit in uT
;;;245    	printf("magCalInit, %0.2f Init Bias 0 (uT), %0.2f Init Bias 1 (uT), %0.2f Init Bias 2 (uT), %0.2f Init Scale 0 (uT), %0.2f Init Scale 1 (uT), %0.2f Init Scale 2 (uT), %0.2f  OrientationYaw, %0.2f OrientationPitch, %0.2f OrientationRoll, Info: %s \n",
00093c  e59f4310          LDR      r4,|L1.3156|
000940  e5940024          LDR      r0,[r4,#0x24]  ; calibrationDataMCal
000944  ebfffffe          BL       __aeabi_f2d
000948  e58d0020          STR      r0,[sp,#0x20]
00094c  e5940020          LDR      r0,[r4,#0x20]  ; calibrationDataMCal
000950  e1a0b001          MOV      r11,r1
000954  ebfffffe          BL       __aeabi_f2d
000958  e28d2010          ADD      r2,sp,#0x10
00095c  e8820003          STM      r2,{r0,r1}
000960  e594001c          LDR      r0,[r4,#0x1c]  ; calibrationDataMCal
000964  ebfffffe          BL       __aeabi_f2d
000968  e58d0018          STR      r0,[sp,#0x18]
00096c  e5940018          LDR      r0,[r4,#0x18]  ; calibrationDataMCal
000970  e1a0a001          MOV      r10,r1
000974  ebfffffe          BL       __aeabi_f2d
000978  e28d2008          ADD      r2,sp,#8
00097c  e8820003          STM      r2,{r0,r1}
000980  e5940014          LDR      r0,[r4,#0x14]  ; calibrationDataMCal
000984  ebfffffe          BL       __aeabi_f2d
000988  e88d0003          STM      sp,{r0,r1}
00098c  e5940010          LDR      r0,[r4,#0x10]  ; calibrationDataMCal
000990  ebfffffe          BL       __aeabi_f2d
000994  e1a08000          MOV      r8,r0
000998  e594000c          LDR      r0,[r4,#0xc]  ; calibrationDataMCal
00099c  e1a09001          MOV      r9,r1
0009a0  ebfffffe          BL       __aeabi_f2d
0009a4  e1a06000          MOV      r6,r0
0009a8  e5940008          LDR      r0,[r4,#8]  ; calibrationDataMCal
0009ac  e1a07001          MOV      r7,r1
0009b0  ebfffffe          BL       __aeabi_f2d
0009b4  e58d0048          STR      r0,[sp,#0x48]
0009b8  e5940004          LDR      r0,[r4,#4]  ; calibrationDataMCal
0009bc  e1a05001          MOV      r5,r1
0009c0  ebfffffe          BL       __aeabi_f2d
0009c4  e1a02000          MOV      r2,r0
0009c8  e2840028          ADD      r0,r4,#0x28
0009cc  e58d0040          STR      r0,[sp,#0x40]
0009d0  e59d0020          LDR      r0,[sp,#0x20]
0009d4  e1a03001          MOV      r3,r1
0009d8  e28d1038          ADD      r1,sp,#0x38
0009dc  e8810801          STM      r1,{r0,r11}
0009e0  e28d1010          ADD      r1,sp,#0x10
0009e4  e8910003          LDM      r1,{r0,r1}
0009e8  e28d4030          ADD      r4,sp,#0x30
0009ec  e8840003          STM      r4,{r0,r1}
0009f0  e59d0018          LDR      r0,[sp,#0x18]
0009f4  e28d1028          ADD      r1,sp,#0x28
0009f8  e8810401          STM      r1,{r0,r10}
0009fc  e28d1008          ADD      r1,sp,#8
000a00  e8910003          LDM      r1,{r0,r1}
000a04  e28d4020          ADD      r4,sp,#0x20
000a08  e8840003          STM      r4,{r0,r1}
000a0c  e89d0003          LDM      sp,{r0,r1}
000a10  e28d4018          ADD      r4,sp,#0x18
000a14  e8840003          STM      r4,{r0,r1}
000a18  e28d0008          ADD      r0,sp,#8
000a1c  e88003c0          STM      r0,{r6-r9}
000a20  e59d0048          LDR      r0,[sp,#0x48]
000a24  e88d0021          STM      sp,{r0,r5}
000a28  e59f0228          LDR      r0,|L1.3160|
000a2c  ebfffffe          BL       __2printf
;;;246    		calibrationDataMCal.magbiasInit[0],
;;;247    		calibrationDataMCal.magbiasInit[1],
;;;248    		calibrationDataMCal.magbiasInit[2],
;;;249    		calibrationDataMCal.magScaleInit[0],
;;;250    		calibrationDataMCal.magScaleInit[1],
;;;251    		calibrationDataMCal.magScaleInit[2],
;;;252    		calibrationDataMCal.Orientation[0],
;;;253    		calibrationDataMCal.Orientation[1],
;;;254    		calibrationDataMCal.Orientation[2],
;;;255    		calibrationDataMCal.calInfo
;;;256    		);
;;;257    
;;;258    	printf("settings, %0.2f Moving Average Period, %0.2f Accelerometer Filter \n",
000a30  ebfffffe          BL       getAccelerometerFilter
000a34  ebfffffe          BL       __aeabi_f2d
000a38  e1a04000          MOV      r4,r0
000a3c  e1a05001          MOV      r5,r1
000a40  ebfffffe          BL       getMovingAveragePeriod
000a44  ebfffffe          BL       __aeabi_f2d
000a48  e1a02000          MOV      r2,r0
000a4c  e88d0030          STM      sp,{r4,r5}
000a50  e59f0204          LDR      r0,|L1.3164|
000a54  e1a03001          MOV      r3,r1
000a58  ebfffffe          BL       __2printf
;;;259    		getMovingAveragePeriod(),
;;;260    		getAccelerometerFilter()
;;;261    	);
;;;262    }
000a5c  e28dd04c          ADD      sp,sp,#0x4c
000a60  e8bd4ff0          POP      {r4-r11,lr}
000a64  e12fff1e          BX       lr
;;;263    
                          ENDP

                  compassRun PROC
;;;264    void compassRun(BOOL init)
000a68  e92d4ff0          PUSH     {r4-r11,lr}
;;;265    {
000a6c  e24dd024          SUB      sp,sp,#0x24
000a70  e1a0b000          MOV      r11,r0
;;;266    	BYTE index;
;;;267    	BYTE whoAmI9250;
;;;268    	BYTE whoamI8963;
;;;269    	static BYTE position = 0;
;;;270    	static float declination = 0;
;;;271    	static BOOL errorReset = FALSE;
;;;272    	
;;;273    	if(serialGetQuitFlag() == TRUE || serialDebugGetQuitFlag() == TRUE)
000a74  ebfffffe          BL       serialGetQuitFlag
;;;274    	{
;;;275    		if(compassBoardState >= COMPASS_BOARD_STATE_IDLE)
000a78  e51f66b0          LDR      r6,|L1.976|
000a7c  e3500001          CMP      r0,#1                 ;273
;;;276    		{
;;;277    			AutoCalFlag = FALSE;
;;;278    			compassBoardState = COMPASS_BOARD_STATE_IDLE;
000a80  e3a09002          MOV      r9,#2
000a84  e3a04000          MOV      r4,#0
000a88  0a000002          BEQ      |L1.2712|
000a8c  ebfffffe          BL       serialDebugGetQuitFlag
000a90  e3500001          CMP      r0,#1                 ;273
000a94  1a000006          BNE      |L1.2740|
                  |L1.2712|
000a98  e5d60004          LDRB     r0,[r6,#4]            ;275  ; compassBoardState
000a9c  e3500002          CMP      r0,#2                 ;275
000aa0  3a000003          BCC      |L1.2740|
000aa4  e5c64006          STRB     r4,[r6,#6]            ;277  ; AutoCalFlag
;;;279    			resendMessage("ERRCAL, Exit Cal \n");
000aa8  e59f01b0          LDR      r0,|L1.3168|
000aac  e5c69004          STRB     r9,[r6,#4]            ;278  ; compassBoardState
000ab0  ebfffffe          BL       resendMessage
                  |L1.2740|
;;;280    		}
;;;281    	}
;;;282    
;;;283    	switch(compassBoardState)
000ab4  e5d60004          LDRB     r0,[r6,#4]  ; compassBoardState
;;;284    	{
;;;285    		case COMPASS_BOARD_STATE_INIT:					
;;;286    			if(init == TRUE)
;;;287    			{
;;;288    				printf("COMPASS INIT\n");
;;;289    			}
;;;290    			
;;;291    			setSpeed(TRUE);
;;;292    			
;;;293    			compassBoardState = COMPASS_BOARD_STATE_BOARD_INIT;		
;;;294    			break;
;;;295    		
;;;296    		case COMPASS_BOARD_STATE_BOARD_INIT:
;;;297    			if(init == TRUE || errorReset == TRUE)
;;;298    			{
;;;299    				// Read the WHO_AM_I register, this is a good test of communication
;;;300    				if(getWhoAmI(&whoAmI9250, &whoamI8963) == TRUE)
;;;301    				{
;;;302    					printf("STARTINFO, MPU9250 Who Am I; 0x%0.2X  MPU9250 (Should be 0xEA) \n", whoAmI9250);
;;;303    					printf("STARTINFO, AK8963 Who Am I; 0x%0.2X  AK8963 (Should be 0x09) \n", whoamI8963);
;;;304    				}
;;;305    				else
;;;306    				{
;;;307    					printf("ERROR, Could not connect to MPU9250\n");			
;;;308    					timerShowLEDHeartbeat(2000);
;;;309    					compassBoardState = COMPASS_BOARD_STATE_ERROR;
;;;310    					errorReset = FALSE;
;;;311    				}
;;;312    			}
;;;313    
;;;314    			if(((init == TRUE || errorReset == TRUE) && whoAmI9250 == 0xEA && whoamI8963 == 0x09) || init == FALSE) // WHO_AM_I should always be 0x68
;;;315    			{
;;;316    				memcpy(&calibrationDataACal, storedConfigGetACAL(), sizeof(sCALIBRATION_ACAL));
;;;317    				memcpy(&calibrationDataMCal, storedConfigGetMCAL(), sizeof(sCALIBRATION_MCAL));
;;;318    				
;;;319    				if(calibrationDataACalInit(TRUE) == TRUE)
;;;320    				{
;;;321    					if(init == TRUE) printf("STARTINFO, accel Cal Ok \n");
;;;322    				}
;;;323    				else
;;;324    				{
;;;325    					if(init == TRUE) printf("STARTINFO, accel Cal NOT Ok \n");
;;;326    				}
;;;327    
;;;328    				if(calibrationDataMCalInit(TRUE) == TRUE)
;;;329    				{
;;;330    					if(init == TRUE) printf("STARTINFO, Mag Init Cal Ok \n");
;;;331    				}
;;;332    				else
;;;333    				{
;;;334    					if(init == TRUE) printf("STARTINFO, Mag Init Cal NOT Ok \n");
;;;335    				}
;;;336    
;;;337    				compassBoardState = COMPASS_BOARD_STATE_IDLE;
;;;338    			}
;;;339    			else
;;;340    			{
;;;341    				printf("ERROR, Could not connect to MPU9250\n");			
;;;342    				timerShowLEDHeartbeat(2000);
;;;343    				compassBoardState = COMPASS_BOARD_STATE_ERROR;
;;;344    				errorReset = FALSE;
;;;345    			}
;;;346    			break;
;;;347    			
;;;348    		case COMPASS_BOARD_STATE_IDLE:		
;;;349    			// check if user input is available
;;;350    			if(readContinuous == FALSE && getReadReady(&WakeOnMotionFlag) == TRUE && WakeOnMotionFlag == 0x40)
;;;351    			{		
;;;352    				setSpeed(TRUE);
;;;353    				commaFormat = FALSE;
;;;354    				
;;;355    				printf("WakeOnMotion,\n");
;;;356    
;;;357    				compassBoardState = COMPASS_BOARD_STATE_IDLE_TIMEOUT;
;;;358    				initTimer(&IdleTimeoutTimer);
;;;359    				startTimer(&IdleTimeoutTimer, IDLE_TIMEOUT_TIME_MS);
;;;360    			}
;;;361    			
;;;362    			if(readContinuous == TRUE && ReadDataandUpdateTime() == TRUE)
;;;363    			{
;;;364    				// Sensors x (y)-axis of the accelerometer is aligned with the y (x)-axis of
;;;365    				// the magnetometer; the magnetometer z-axis (+ down) is opposite to z-axis
;;;366    				// (+ up) of accelerometer and gyro! We have to make some allowance for this
;;;367    				// orientationmismatch in feeding the output to the quaternion filter. For the
;;;368    				// MPU-9250, we have chosen a magnetic rotation that keeps the sensor forward
;;;369    				// along the x-axis just like in the LSM9DS0 sensor. This rotation can be
;;;370    				// modified to allow any convenient orientation convention. This is ok by
;;;371    				// aircraft orientation standards! Pass gyro rate as rad/s
;;;372    				
;;;373    				// MadgwickQuaternionUpdate(ax, ay, az, gx * PI / 180.0f, gy * PI / 180.0f, gz * PI / 180.0f, my, mx, -mz, deltat);
;;;374    				MahonyQuaternionUpdate(ax, ay, az, 0, 0, 0, mx, my, mz, deltat);
000ab8  e51fa340          LDR      r10,|L1.1920|
000abc  e59f7190          LDR      r7,|L1.3156|
000ac0  e59f819c          LDR      r8,|L1.3172|
000ac4  e350000a          CMP      r0,#0xa               ;283
000ac8  e3a05001          MOV      r5,#1                 ;275
000acc  e3a01040          MOV      r1,#0x40              ;350
000ad0  308ff100          ADDCC    pc,pc,r0,LSL #2       ;283
000ad4  ea00000f          B        |L1.2840|
000ad8  ea000008          B        |L1.2816|
000adc  ea000010          B        |L1.2852|
000ae0  ea00009d          B        |L1.3420|
000ae4  ea000224          B        |L1.4988|
000ae8  ea00027e          B        |L1.5352|
000aec  ea0002b3          B        |L1.5568|
000af0  ea0002f5          B        |L1.5836|
000af4  ea000336          B        |L1.6100|
000af8  ea0003af          B        |L1.6588|
000afc  ea0003d2          B        |L1.6732|
                  |L1.2816|
000b00  e35b0001          CMP      r11,#1                ;286
000b04  028f0f57          ADREQ    r0,|L1.3176|
000b08  0bfffffe          BLEQ     __2printf
000b0c  e3a00001          MOV      r0,#1                 ;291
000b10  ebfffffe          BL       setSpeed
                  |L1.2836|
000b14  e5c65004          STRB     r5,[r6,#4]            ;293  ; compassBoardState
                  |L1.2840|
;;;375    			}
;;;376    			
;;;377                if(serialGetMessage(&bMessage, &bMessageLength) == TRUE && bMessageLength > 0)
;;;378                {
;;;379    				bMessageLength = strlen(bMessage);
;;;380    
;;;381                    if(bMessage[0] >= '0' && bMessage[0] <= '9') // then numeric
;;;382                    {
;;;383                        bMessage[bMessageLength] = 0;
;;;384                        currentDirection = atoi(&bMessage[0]);
;;;385                        if(currentDirection > 360)
;;;386                        {
;;;387                            currentDirection = 0;
;;;388                        }
;;;389                    }
;;;390                    else if(strncmp("avg", bMessage, 3) == 0 && bMessage[3] >= '0' && bMessage[3] <= '9') // then numeric
;;;391                    {
;;;392                        bMessage[bMessageLength] = 0;
;;;393                        setValue = atoi(&bMessage[3]);
;;;394                        if(setValue > MOVING_AVERAGE)
;;;395                        {
;;;396                            setValue = MOVING_AVERAGE;
;;;397                        }
;;;398                        setMovingAveragePeriod((float)setValue);
;;;399    					printf("%d Moving Average Period\n", setValue);
;;;400                    }
;;;401                    else if(strncmp("cpos", bMessage, 4) == 0 && bMessage[4] >= '0' && bMessage[4] <= '9') // then numeric
;;;402                    {
;;;403                        bMessage[bMessageLength] = 0;
;;;404                        setValue = atoi(&bMessage[4]);
;;;405                        NumberOfInitialCalPositions = setValue;
;;;406                        if(NumberOfInitialCalPositions > 2 * NUMBER_OF_INITIAL_CAL_POSITIONS)
;;;407                        {
;;;408                            NumberOfInitialCalPositions = NUMBER_OF_INITIAL_CAL_POSITIONS;
;;;409                        }
;;;410    					sprintf(resendString, "Positions, %d  Number Of Initial Cal Positions\n", NumberOfInitialCalPositions);
;;;411    					resendMessage(resendString);
;;;412    				}
;;;413                    else if(strncmp("auto", bMessage, 4) == 0)
;;;414                    {				
;;;415    					compassBoardState = COMPASS_BOARD_STATE_COMMAND_AUTO;
;;;416    					setSpeed(TRUE);
;;;417                    }
;;;418                    else if(strncmp("read", bMessage, 4) == 0)
;;;419                    {
;;;420                        readContinuous = FALSE;
;;;421                        commaFormat = FALSE;
;;;422    
;;;423    					compassBoardState = COMPASS_BOARD_STATE_IDLE_TIMEOUT;
;;;424    					setSpeed(TRUE);
;;;425    					initTimer(&IdleTimeoutTimer);
;;;426    					startTimer(&IdleTimeoutTimer, IDLE_TIMEOUT_TIME_MS);
;;;427                    }
;;;428                    else if(strncmp("mon", bMessage, 3) == 0)
;;;429                    {
;;;430                        readContinuous = TRUE;
;;;431                        commaFormat = FALSE;
;;;432    					setSpeed(TRUE);
;;;433                   }
;;;434                    else if(strncmp("log", bMessage, 3) == 0)
;;;435                    {
;;;436                        printf("Direction, ax, ay, az, mx, my, mz, yaw, pitch, roll, \n");
;;;437                        readContinuous = TRUE;
;;;438                        commaFormat = TRUE;
;;;439    					setSpeed(TRUE);
;;;440                   }
;;;441                    else if(strncmp("stop", bMessage, 4) == 0)
;;;442                    {
;;;443                        readContinuous = FALSE;
;;;444                        commaFormat = FALSE;
;;;445                    }
;;;446                    else if(strncmp("erase$Chip", bMessage, 10) == 0)
;;;447                    {			
;;;448    					setSpeed(TRUE);
;;;449    					storedConfigEraseChip();
;;;450    					compassBoardState = COMPASS_BOARD_STATE_BOARD_INIT;
;;;451    					printf("Chip erased\n");
;;;452    				}
;;;453                    else if(strncmp("getinit", bMessage, 10) == 0)
;;;454                    {			
;;;455    					setSpeed(TRUE);
;;;456    					printf("VERSION, %s, %s, %s, %s \n", __FILE__, THE_FILE_PATH1, __DATE__, __TIME__);
;;;457    					
;;;458    					if(getWhoAmI(&whoAmI9250, &whoamI8963) == TRUE)
;;;459    					{
;;;460    						printf("STARTINFO, MPU9250 Who Am I; 0x%0.2X  MPU9250 (Should be 0xEA) \n", whoAmI9250);
;;;461    						printf("STARTINFO, AK8963 Who Am I; 0x%0.2X  AK8963 (Should be 0x09) \n", whoamI8963);
;;;462    
;;;463    						memcpy(&calibrationDataACal, storedConfigGetACAL(), sizeof(sCALIBRATION_ACAL));
;;;464    						memcpy(&calibrationDataMCal, storedConfigGetMCAL(), sizeof(sCALIBRATION_MCAL));
;;;465    					
;;;466    						if(calibrationDataACalInit(TRUE) == TRUE)
;;;467    						{
;;;468    							printf("STARTINFO, accel Cal Ok \n");
;;;469    						}
;;;470    						else
;;;471    						{
;;;472    							printf("STARTINFO, accel Cal NOT Ok \n");
;;;473    						}
;;;474    
;;;475    						if(calibrationDataMCalInit(TRUE) == TRUE)
;;;476    						{
;;;477    							printf("STARTINFO, Mag Init Cal Ok \n");
;;;478    						}
;;;479    						else
;;;480    						{
;;;481    							printf("STARTINFO, Mag Init Cal NOT Ok \n");
;;;482    						}
;;;483    
;;;484    						for(index = 0; index < strlen(calibrationDataACal.calInfo); index++)
;;;485    						{
;;;486    							if(calibrationDataACal.calInfo[index] < ' ')
;;;487    							{
;;;488    								calibrationDataACal.calInfo[index] = 0;
;;;489    								break;
;;;490    							}
;;;491    						}
;;;492    						
;;;493    						for(index = 0; index < strlen(calibrationDataMCal.calInfo); index++)
;;;494    						{
;;;495    							if(calibrationDataMCal.calInfo[index] < ' ')
;;;496    							{
;;;497    								calibrationDataMCal.calInfo[index] = 0;
;;;498    								break;
;;;499    							}
;;;500    						}
;;;501    						
;;;502    						printCal();
;;;503    
;;;504    						printf("getinit\n");
;;;505    					}
;;;506    					else
;;;507    					{
;;;508    						printf("ERROR, getinit: MPU9250init\n");			
;;;509    					}
;;;510    				}
;;;511                    else if(strncmp("erase$Cal", bMessage, 9) == 0)
;;;512                    {			
;;;513    					setSpeed(TRUE);
;;;514    					// set the data to not valid
;;;515    					calibrationDataACal.dataValid = ~CALIBRATION_VALID;
;;;516    					storedConfigSetACAL(&calibrationDataACal);
;;;517    					
;;;518    					calibrationDataMCal.dataValid = ~CALIBRATION_VALID;
;;;519    					storedConfigSetMCAL(&calibrationDataMCal);
;;;520    					
;;;521    					compassBoardState = COMPASS_BOARD_STATE_BOARD_INIT;
;;;522    					
;;;523    					printf("Cal erased\n");
;;;524    				}
;;;525                    else if(strncmp("getcal", bMessage, 6) == 0)
;;;526                    {			
;;;527    					for(index = 0; index < strlen(calibrationDataACal.calInfo); index++)
;;;528    					{
;;;529    						if(calibrationDataACal.calInfo[index] < ' ')
;;;530    						{
;;;531    							calibrationDataACal.calInfo[index] = 0;
;;;532    							break;
;;;533    						}
;;;534    					}
;;;535    					
;;;536     					for(index = 0; index < strlen(calibrationDataMCal.calInfo); index++)
;;;537    					{
;;;538    						if(calibrationDataMCal.calInfo[index] < ' ')
;;;539    						{
;;;540    							calibrationDataMCal.calInfo[index] = 0;
;;;541    							break;
;;;542    						}
;;;543    					}
;;;544    					
;;;545    					printCal();
;;;546                    }
;;;547                }
;;;548    			
;;;549    			if(readContinuous == TRUE)
;;;550    			{
;;;551    				readUpdateDelta = getTimerNow() - readUpdateCount;
;;;552    
;;;553    				if (readUpdateDelta > 500) // update 500mS
;;;554    				{
;;;555    					readUpdateCount = getTimerNow();
;;;556    					printData();
;;;557    				}
;;;558    			}
;;;559    			break;
;;;560    			
;;;561    		case COMPASS_BOARD_STATE_IDLE_TIMEOUT:
;;;562    			if(isTimerExpired(&IdleTimeoutTimer))
;;;563    			{
;;;564    				printData();
;;;565    				compassBoardState = COMPASS_BOARD_STATE_IDLE;
;;;566    			}
;;;567    			else
;;;568    			{
;;;569    				if(ReadDataandUpdateTime() == TRUE)
;;;570    				{
;;;571    					// Sensors x (y)-axis of the accelerometer is aligned with the y (x)-axis of
;;;572    					// the magnetometer; the magnetometer z-axis (+ down) is opposite to z-axis
;;;573    					// (+ up) of accelerometer and gyro! We have to make some allowance for this
;;;574    					// orientationmismatch in feeding the output to the quaternion filter. For the
;;;575    					// MPU-9250, we have chosen a magnetic rotation that keeps the sensor forward
;;;576    					// along the x-axis just like in the LSM9DS0 sensor. This rotation can be
;;;577    					// modified to allow any convenient orientation convention. This is ok by
;;;578    					// aircraft orientation standards! Pass gyro rate as rad/s
;;;579    					
;;;580    					// MadgwickQuaternionUpdate(ax, ay, az, gx * PI / 180.0f, gy * PI / 180.0f, gz * PI / 180.0f, my, mx, -mz, deltat);
;;;581    					MahonyQuaternionUpdate(ax, ay, az, 0, 0, 0, mx, my, mz, deltat);
;;;582    					
;;;583    					if(WakeOnMotionFlag == TRUE)
;;;584    					{
;;;585    						printf("WakeOnMotion,\n");
;;;586    					}
;;;587    				}
;;;588    			}
;;;589    			break;
;;;590    			
;;;591    		case COMPASS_BOARD_STATE_COMMAND_MCAL_INIT:
;;;592    			// look for a quit message
;;;593    			if(bMessageLength > 3 && AutoCalFlag == FALSE)
;;;594    			{
;;;595    				if((bMessageLength - 12)  > MAX_CAL_INFO_LENGTH) // 3 add 1 for 4 for null termination character
;;;596    				{
;;;597    					bMessageLength = MAX_CAL_INFO_LENGTH;
;;;598    				}
;;;599    
;;;600    				bMessage[bMessageLength] = 0;
;;;601    
;;;602                    if(bMessage[bMessageLength - 1] < ' ')
;;;603                    {
;;;604                        bMessage[bMessageLength - 1] = 0;
;;;605                    }
;;;606    				strcpy(calibrationDataMCal.calInfo, bMessage + 11);
;;;607    			}
;;;608                else if(AutoCalFlag == FALSE)
;;;609    			{
;;;610    				strcpy(calibrationDataMCal.calInfo, DEFAULT_CAL_INFO);
;;;611    			}
;;;612    			else
;;;613    			{
;;;614                    strcpy(calibrationDataMCal.calInfo, "Sign Mag ");
;;;615                    strcat(calibrationDataMCal.calInfo, calString);
;;;616    			}
;;;617    
;;;618    	
;;;619    			if(magcalMPU9250((float *)&calibrationDataMCal.magbiasInit[0], (float *)&calibrationDataMCal.magScaleInit[0], MAGCAL_STATE_INIT) == FALSE)
;;;620    			{
;;;621    				resendMessage("ERRCAL, Mag Calibration NOT ok! \n");
;;;622    				compassBoardState = COMPASS_BOARD_STATE_IDLE;
;;;623    			}
;;;624    			else
;;;625    			{
;;;626    				position = 0;
;;;627    				inCalibration = 0;	
;;;628    				index1 = 0;
;;;629    				
;;;630    				resendMessage("STARTCAL, Mag Calibration start! \n");
;;;631    				sprintf(resendString, "Set to position, %d \n", position);
;;;632    				resendMessage(resendString);
;;;633    
;;;634    				compassBoardState = COMPASS_BOARD_STATE_COMMAND_MCAL_RUN;
;;;635    			}
;;;636    			break;
;;;637    			
;;;638    		case COMPASS_BOARD_STATE_COMMAND_MCAL_RUN:
;;;639    			if(position < NumberOfInitialCalPositions)
;;;640    			{
;;;641    				if(inCalibration == 0)
;;;642    				{
;;;643    					if(serialGetMessage(&bMessage, &bMessageLength) == TRUE)
;;;644    					{
;;;645    						printf("  getting data for position, %d\n", position);
;;;646    						inCalibration = 1;
;;;647    					}
;;;648    				}
;;;649    				else
;;;650    				{
;;;651    					if(ReadDataandUpdateTime() == TRUE)
;;;652    					{
;;;653    						if((inCalibration & 1) == 1)
;;;654    						{
;;;655    							index1++;
;;;656    printf("%d\n", index1);
;;;657    						}
;;;658    						
;;;659    						if(index1 >= MOVING_AVERAGE)
;;;660    						{			
;;;661    							position++;
;;;662    							index1 = 0;
;;;663    							
;;;664    							if(position < NumberOfInitialCalPositions)
;;;665    							{
;;;666    								sprintf(resendString, "Set to position, %d \n", position);
;;;667    								resendMessage(resendString);
;;;668    							}
;;;669    							else
;;;670    							{
;;;671    								if(magcalMPU9250((float *)&calibrationDataMCal.magbiasInit[0], (float *)&calibrationDataMCal.magScaleInit[0], MAGCAL_STATE_FINISH) == TRUE && calibrationDataMCalInit(FALSE) == TRUE)
;;;672    								{
;;;673    									// generate Quaternions without gyro
;;;674    									setMovingAveragePeriod(MOVING_AVERAGE / 2);
;;;675    									compassBoardState = COMPASS_BOARD_STATE_COMMAND_MCAL_FINISH;
;;;676    								}
;;;677    								else
;;;678    								{
;;;679    									resendMessage("ERRCAL, Mag Calibration NOT ok! \n");
;;;680    									compassBoardState = COMPASS_BOARD_STATE_IDLE;
;;;681    								}
;;;682    							}
;;;683    							
;;;684    							inCalibration = 0;
;;;685    						}
;;;686    					}
;;;687    				}
;;;688    			}
;;;689    			break;
;;;690    			
;;;691    		case COMPASS_BOARD_STATE_COMMAND_MCAL_FINISH:	
;;;692    			if(ReadDataandUpdateTime() == TRUE)
;;;693    			{
;;;694    				// run through several times to settle data
;;;695    				MahonyQuaternionUpdate(ax, ay, az, 0, 0, 0, mx, my, mz, 0.1);
;;;696    				index1++;
;;;697    printf("  %d\n", index1);
;;;698    			}
;;;699    			
;;;700    			if(index1 >= MOVING_AVERAGE)
;;;701    			{			
;;;702    				convertFromQuaternionsToEulerAngles();
;;;703    				
;;;704    				calibrationDataMCal.Orientation[0] = yaw - declination;
;;;705    				calibrationDataMCal.Orientation[1] = pitch;
;;;706    				calibrationDataMCal.Orientation[2] = roll;
;;;707    				setMovingAveragePeriod(MOVING_AVERAGE - 1);
;;;708    				
;;;709    				for(index = 0; index < strlen(calibrationDataMCal.calInfo); index++)
;;;710    				{
;;;711    					if(calibrationDataMCal.calInfo[index] < ' ')
;;;712    					{
;;;713    						calibrationDataMCal.calInfo[index] = 0;
;;;714    						break;
;;;715    					}
;;;716    				}
;;;717    				
;;;718    				calibrationDataMCal.dataValid = CALIBRATION_VALID;
;;;719    				storedConfigSetMCAL(&calibrationDataMCal);
;;;720    				
;;;721    				resendMessage("ENDCAL, Mag Calibration done! \n");
;;;722    
;;;723    				if(AutoCalFlag == TRUE)
;;;724    				{
;;;725    					printCal();
;;;726    				}
;;;727    				
;;;728    				compassBoardState = COMPASS_BOARD_STATE_IDLE;
;;;729    			}
;;;730    			break;
;;;731    			
;;;732    		case COMPASS_BOARD_STATE_COMMAND_ACAL:
;;;733               if(bMessageLength > 4 && AutoCalFlag == FALSE)
;;;734                {
;;;735                    if((bMessageLength - 12)  > MAX_CAL_INFO_LENGTH) // 3 add 1 for 4 for null termination character
;;;736                    {
;;;737                        bMessageLength = MAX_CAL_INFO_LENGTH;
;;;738                    }
;;;739                    bMessage[bMessageLength] = 0;
;;;740                    if(bMessage[bMessageLength - 1] < ' ')
;;;741                    {
;;;742                        bMessage[bMessageLength - 1] = 0;
;;;743                    }
;;;744                    strcpy(calibrationDataACal.calInfo, bMessage + 11);
;;;745                }
;;;746                else if(AutoCalFlag == FALSE)
;;;747                {
;;;748                    strcpy(calibrationDataACal.calInfo, DEFAULT_CAL_INFO);
;;;749                }
;;;750    			else
;;;751    			{
;;;752                    strcpy(calibrationDataACal.calInfo, "Sign Accel ");
;;;753                    strcat(calibrationDataACal.calInfo, calString);
;;;754    			}
;;;755    			// Calibrate gyro and accelerometers, load biases in bias registers
;;;756    			if(calibrateMPU9250() == TRUE)
;;;757    			{
;;;758    				float tempMovingAverage = getMovingAveragePeriod();
;;;759    
;;;760    				for(index = 0; index < strlen(calibrationDataACal.calInfo); index++)
;;;761    				{
;;;762    					if(calibrationDataACal.calInfo[index] < ' ')
;;;763    					{
;;;764    						calibrationDataACal.calInfo[index] = 0;
;;;765    						break;
;;;766    					}
;;;767    				}
;;;768    				
;;;769    				calibrationDataACal.dataValid = CALIBRATION_VALID;
;;;770    				storedConfigSetACAL(&calibrationDataACal);
;;;771    				
;;;772    				resendMessage("ENDACAL, Accel / GYRO Calibration done! \n");
;;;773    				
;;;774    				if(AutoCalFlag == FALSE)
;;;775    				{
;;;776    					compassBoardState = COMPASS_BOARD_STATE_IDLE;
;;;777    				}
;;;778    				else
;;;779    				{
;;;780    					compassBoardState = COMPASS_BOARD_STATE_COMMAND_MCAL_INIT;
;;;781    				}
;;;782    			}
;;;783    			else
;;;784    			{
;;;785    				resendMessage("ERRCAL, Accel / GYRO Calibration not OK \n");
;;;786    
;;;787    				if(AutoCalFlag == FALSE)
;;;788    				{
;;;789    					compassBoardState = COMPASS_BOARD_STATE_IDLE;
;;;790    				}
;;;791    				else
;;;792    				{
;;;793    					compassBoardState = COMPASS_BOARD_STATE_COMMAND_MCAL_INIT;
;;;794    				}
;;;795    			}
;;;796    			break;
;;;797    				
;;;798    		case COMPASS_BOARD_STATE_COMMAND_AUTO:
;;;799    			AutoCalFlag = TRUE;
;;;800    			calString[0] = 0;
;;;801    		
;;;802    			bMessage[bMessageLength] = 0;
;;;803    			if(bMessage[bMessageLength - 1] < ' ')
;;;804    			{
;;;805    				bMessage[bMessageLength - 1] = 0;
;;;806    			}
;;;807    
;;;808    			if(strlen(&bMessage[12]) > 0)
;;;809    			{
;;;810    				// get the cal message string
;;;811    				strcpy(calString, &bMessage[12]);
;;;812    			}
;;;813    			
;;;814    			if(bMessage[4] >= '0' && bMessage[4] <= '9') // then numeric
;;;815    			{
;;;816    				NumberOfInitialCalPositions = bMessage[4] & 0x0F;
;;;817    			}
;;;818    			
;;;819    			declination = 0;
;;;820    			bMessage[12] = 0;
;;;821    			declination = atof(&bMessage[5]);
;;;822    			declination /= 1000.0;
;;;823    			compassBoardState = COMPASS_BOARD_STATE_COMMAND_ACAL;
;;;824    			break;
;;;825    				
;;;826    		case COMPASS_BOARD_STATE_ERROR:
;;;827                if(serialGetMessage(&bMessage, &bMessageLength) == TRUE && bMessageLength > 0)
;;;828                {
;;;829    				bMessageLength = strlen(bMessage);
;;;830                    if(strncmp("auto", bMessage, 4) == 0)
;;;831                    {				
;;;832    					errorReset = TRUE;
;;;833    					compassBoardState = COMPASS_BOARD_STATE_BOARD_INIT;
;;;834                    }
;;;835    			}
;;;836    			break;
;;;837    			
;;;838    		default:;
;;;839    	}
;;;840    }
000b18  e28dd024          ADD      sp,sp,#0x24
000b1c  e8bd4ff0          POP      {r4-r11,lr}
000b20  e12fff1e          BX       lr
                  |L1.2852|
000b24  e35b0001          CMP      r11,#1                ;297
000b28  15d6000b          LDRBNE   r0,[r6,#0xb]          ;297  ; errorReset
000b2c  e3a05009          MOV      r5,#9                 ;275
000b30  13500001          CMPNE    r0,#1                 ;297
000b34  1a00001b          BNE      |L1.2984|
000b38  e28d101c          ADD      r1,sp,#0x1c           ;300
000b3c  e28d0018          ADD      r0,sp,#0x18           ;300
000b40  ebfffffe          BL       getWhoAmI
000b44  e3500001          CMP      r0,#1                 ;300
000b48  0a00000a          BEQ      |L1.2936|
000b4c  e28f0f49          ADR      r0,|L1.3192|
000b50  ebfffffe          BL       __2printf
000b54  e3a00e7d          MOV      r0,#0x7d0             ;308
000b58  ebfffffe          BL       timerShowLEDHeartbeat
000b5c  e5c65004          STRB     r5,[r6,#4]            ;309  ; compassBoardState
000b60  e5c6400b          STRB     r4,[r6,#0xb]          ;310  ; errorReset
                  |L1.2916|
000b64  e35b0001          CMP      r11,#1                ;314
000b68  15d6000b          LDRBNE   r0,[r6,#0xb]          ;314  ; errorReset
000b6c  13500001          CMPNE    r0,#1                 ;314
000b70  1a00000c          BNE      |L1.2984|
000b74  ea000006          B        |L1.2964|
                  |L1.2936|
000b78  e5dd1018          LDRB     r1,[sp,#0x18]         ;302
000b7c  e59f011c          LDR      r0,|L1.3232|
000b80  ebfffffe          BL       __2printf
000b84  e5dd101c          LDRB     r1,[sp,#0x1c]         ;303
000b88  e28f0f45          ADR      r0,|L1.3236|
000b8c  ebfffffe          BL       __2printf
000b90  eafffff3          B        |L1.2916|
                  |L1.2964|
000b94  e5dd0018          LDRB     r0,[sp,#0x18]         ;314
000b98  e35000ea          CMP      r0,#0xea              ;314
000b9c  05dd001c          LDRBEQ   r0,[sp,#0x1c]         ;314
000ba0  03500009          CMPEQ    r0,#9                 ;314
000ba4  0a000008          BEQ      |L1.3020|
                  |L1.2984|
000ba8  e35b0000          CMP      r11,#0                ;314
000bac  0a000006          BEQ      |L1.3020|
000bb0  e28f00c0          ADR      r0,|L1.3192|
000bb4  ebfffffe          BL       __2printf
000bb8  e3a00e7d          MOV      r0,#0x7d0             ;342
000bbc  ebfffffe          BL       timerShowLEDHeartbeat
000bc0  e5c65004          STRB     r5,[r6,#4]            ;343  ; compassBoardState
000bc4  e5c6400b          STRB     r4,[r6,#0xb]          ;344  ; errorReset
000bc8  eaffffd2          B        |L1.2840|
                  |L1.3020|
000bcc  ebfffffe          BL       storedConfigGetACAL
000bd0  e1a01000          MOV      r1,r0                 ;316
000bd4  e59f0088          LDR      r0,|L1.3172|
000bd8  e3a02054          MOV      r2,#0x54              ;316
000bdc  ebfffffe          BL       __aeabi_memcpy4
000be0  ebfffffe          BL       storedConfigGetMCAL
000be4  e1a01000          MOV      r1,r0                 ;317
000be8  e59f0064          LDR      r0,|L1.3156|
000bec  e3a02068          MOV      r2,#0x68              ;317
000bf0  ebfffffe          BL       __aeabi_memcpy4
000bf4  e3a00001          MOV      r0,#1                 ;319
000bf8  ebfffffe          BL       calibrationDataACalInit
000bfc  e3500001          CMP      r0,#1                 ;319
000c00  0a000003          BEQ      |L1.3092|
000c04  e35b0001          CMP      r11,#1                ;325
000c08  028f00d4          ADREQ    r0,|L1.3300|
000c0c  0a000003          BEQ      |L1.3104|
000c10  ea000003          B        |L1.3108|
                  |L1.3092|
000c14  e35b0001          CMP      r11,#1                ;321
000c18  028f00e4          ADREQ    r0,|L1.3332|
000c1c  1a000000          BNE      |L1.3108|
                  |L1.3104|
000c20  ebfffffe          BL       __2printf
                  |L1.3108|
000c24  e3a00001          MOV      r0,#1                 ;328
000c28  ebfffffe          BL       calibrationDataMCalInit
000c2c  e3500001          CMP      r0,#1                 ;328
000c30  0a000043          BEQ      |L1.3396|
000c34  e35b0001          CMP      r11,#1                ;334
000c38  028f00e0          ADREQ    r0,|L1.3360|
000c3c  0a000043          BEQ      |L1.3408|
000c40  ea000043          B        |L1.3412|
                  |L1.3140|
                          DCD      SelfTest
                  |L1.3144|
                          DCD      ||.conststring||+0x9c
                  |L1.3148|
                          DCD      calibrationDataACal+0x11
                  |L1.3152|
                          DCD      ||.conststring||+0x19c
                  |L1.3156|
                          DCD      calibrationDataMCal
                  |L1.3160|
                          DCD      ||.conststring||+0x208
                  |L1.3164|
                          DCD      ||.conststring||+0x2f8
                  |L1.3168|
                          DCD      ||.text||+0x3e4
                  |L1.3172|
                          DCD      calibrationDataACal
                  |L1.3176|
000c68  434f4d50          DCB      "COMPASS INIT\n",0
000c6c  41535320
000c70  494e4954
000c74  0a00    
000c76  00                DCB      0
000c77  00                DCB      0
                  |L1.3192|
000c78  4552524f          DCB      "ERROR, Could not connect to MPU9250\n",0
000c7c  522c2043
000c80  6f756c64
000c84  206e6f74
000c88  20636f6e
000c8c  6e656374
000c90  20746f20
000c94  4d505539
000c98  3235300a
000c9c  00      
000c9d  00                DCB      0
000c9e  00                DCB      0
000c9f  00                DCB      0
                  |L1.3232|
                          DCD      ||.conststring||+0x33c
                  |L1.3236|
000ca4  53544152          DCB      "STARTINFO, AK8963 Who Am I; 0x%0.2X  AK8963 (Should be "
000ca8  54494e46
000cac  4f2c2041
000cb0  4b383936
000cb4  33205768
000cb8  6f20416d
000cbc  20493b20
000cc0  30782530
000cc4  2e325820
000cc8  20414b38
000ccc  39363320
000cd0  2853686f
000cd4  756c6420
000cd8  626520  
000cdb  30783039          DCB      "0x09) \n",0
000cdf  29200a00
000ce3  00                DCB      0
                  |L1.3300|
000ce4  53544152          DCB      "STARTINFO, accel Cal NOT Ok \n",0
000ce8  54494e46
000cec  4f2c2061
000cf0  6363656c
000cf4  2043616c
000cf8  204e4f54
000cfc  204f6b20
000d00  0a00    
000d02  00                DCB      0
000d03  00                DCB      0
                  |L1.3332|
000d04  53544152          DCB      "STARTINFO, accel Cal Ok \n",0
000d08  54494e46
000d0c  4f2c2061
000d10  6363656c
000d14  2043616c
000d18  204f6b20
000d1c  0a00    
000d1e  00                DCB      0
000d1f  00                DCB      0
                  |L1.3360|
000d20  53544152          DCB      "STARTINFO, Mag Init Cal NOT Ok \n",0
000d24  54494e46
000d28  4f2c204d
000d2c  61672049
000d30  6e697420
000d34  43616c20
000d38  4e4f5420
000d3c  4f6b200a
000d40  00      
000d41  00                DCB      0
000d42  00                DCB      0
000d43  00                DCB      0
                  |L1.3396|
000d44  e35b0001          CMP      r11,#1                ;330
000d48  028f0fbf          ADREQ    r0,|L1.4172|
000d4c  1a000000          BNE      |L1.3412|
                  |L1.3408|
000d50  ebfffffe          BL       __2printf
                  |L1.3412|
000d54  e5c69004          STRB     r9,[r6,#4]            ;337  ; compassBoardState
000d58  eaffff6e          B        |L1.2840|
                  |L1.3420|
000d5c  e5d60002          LDRB     r0,[r6,#2]            ;350  ; readContinuous
000d60  e3a09003          MOV      r9,#3                 ;275
000d64  e3500000          CMP      r0,#0                 ;350
000d68  1a000010          BNE      |L1.3504|
000d6c  e59f02f8          LDR      r0,|L1.4204|
000d70  ebfffffe          BL       getReadReady
000d74  e3500001          CMP      r0,#1                 ;350
000d78  05d60007          LDRBEQ   r0,[r6,#7]            ;350  ; WakeOnMotionFlag
000d7c  03500040          CMPEQ    r0,#0x40              ;350
000d80  1a00000a          BNE      |L1.3504|
000d84  e3a00001          MOV      r0,#1                 ;352
000d88  ebfffffe          BL       setSpeed
000d8c  e28f0fb7          ADR      r0,|L1.4208|
000d90  e5c64001          STRB     r4,[r6,#1]            ;353  ; commaFormat
000d94  ebfffffe          BL       __2printf
000d98  e59f02e0          LDR      r0,|L1.4224|
000d9c  e5c69004          STRB     r9,[r6,#4]            ;357  ; compassBoardState
000da0  ebfffffe          BL       initTimer
000da4  e59f02d4          LDR      r0,|L1.4224|
000da8  e3a01e7d          MOV      r1,#0x7d0             ;359
000dac  ebfffffe          BL       startTimer
                  |L1.3504|
000db0  e5d60002          LDRB     r0,[r6,#2]            ;362  ; readContinuous
000db4  e3500001          CMP      r0,#1                 ;362
000db8  1a000017          BNE      |L1.3612|
000dbc  ebfffffe          BL       ReadDataandUpdateTime
000dc0  e3500001          CMP      r0,#1                 ;362
000dc4  1a000014          BNE      |L1.3612|
000dc8  e59f02b4          LDR      r0,|L1.4228|
000dcc  e59a2000          LDR      r2,[r10,#0]           ;374  ; mz
000dd0  e5901000          LDR      r1,[r0,#0]            ;374  ; deltat
000dd4  e51f0658          LDR      r0,|L1.1924|
000dd8  e28da008          ADD      r10,sp,#8             ;374
000ddc  e5903000          LDR      r3,[r0,#0]            ;374  ; my
000de0  e51f0660          LDR      r0,|L1.1928|
000de4  e5900000          LDR      r0,[r0,#0]            ;374  ; mx
000de8  e88a0009          STM      r10,{r0,r3}           ;374
000dec  e51f0668          LDR      r0,|L1.1932|
000df0  e58d1014          STR      r1,[sp,#0x14]         ;374
000df4  e58d2010          STR      r2,[sp,#0x10]         ;374
000df8  e58d4000          STR      r4,[sp,#0]            ;374
000dfc  e58d4004          STR      r4,[sp,#4]            ;374
000e00  e5902000          LDR      r2,[r0,#0]            ;374  ; az
000e04  e51f067c          LDR      r0,|L1.1936|
000e08  e3a03000          MOV      r3,#0                 ;374
000e0c  e5901000          LDR      r1,[r0,#0]            ;374  ; ay
000e10  e51f0684          LDR      r0,|L1.1940|
000e14  e5900000          LDR      r0,[r0,#0]            ;374  ; ax
000e18  ebfffffe          BL       MahonyQuaternionUpdate
                  |L1.3612|
000e1c  e51f1a44          LDR      r1,|L1.992|
000e20  e2810011          ADD      r0,r1,#0x11           ;377
000e24  ebfffffe          BL       serialGetMessage
000e28  e3500001          CMP      r0,#1                 ;377
000e2c  1a000145          BNE      |L1.4936|
000e30  e5d60003          LDRB     r0,[r6,#3]            ;377  ; bMessageLength
000e34  e3500000          CMP      r0,#0                 ;377
000e38  0a000142          BEQ      |L1.4936|
000e3c  e5960014          LDR      r0,[r6,#0x14]         ;379  ; bMessage
000e40  ebfffffe          BL       strlen
000e44  e20010ff          AND      r1,r0,#0xff           ;379
000e48  e5c61003          STRB     r1,[r6,#3]            ;379  ; bMessageLength
000e4c  e5960014          LDR      r0,[r6,#0x14]         ;381  ; bMessage
000e50  e5d02000          LDRB     r2,[r0,#0]            ;381
000e54  e2422030          SUB      r2,r2,#0x30           ;381
000e58  e3520009          CMP      r2,#9                 ;381
000e5c  8a000005          BHI      |L1.3704|
000e60  e7c04001          STRB     r4,[r0,r1]            ;383
000e64  ebfffffe          BL       atoi
000e68  e3500f5a          CMP      r0,#0x168             ;385
000e6c  e5860018          STR      r0,[r6,#0x18]         ;384  ; currentDirection
000e70  c5864018          STRGT    r4,[r6,#0x18]         ;387  ; currentDirection
000e74  ea000133          B        |L1.4936|
                  |L1.3704|
000e78  e1a01000          MOV      r1,r0                 ;390
000e7c  e3a02003          MOV      r2,#3                 ;390
000e80  e28f0c02          ADR      r0,|L1.4232|
000e84  ebfffffe          BL       strncmp
000e88  e3500000          CMP      r0,#0                 ;390
000e8c  1a000013          BNE      |L1.3808|
000e90  e5960014          LDR      r0,[r6,#0x14]         ;390  ; bMessage
000e94  e5d01003          LDRB     r1,[r0,#3]            ;390
000e98  e3510030          CMP      r1,#0x30              ;390
000e9c  3a00000f          BCC      |L1.3808|
000ea0  e3510039          CMP      r1,#0x39              ;390
000ea4  8a00000d          BHI      |L1.3808|
000ea8  e5d61003          LDRB     r1,[r6,#3]            ;392  ; bMessageLength
000eac  e7c04001          STRB     r4,[r0,r1]            ;392
000eb0  e2800003          ADD      r0,r0,#3              ;392
000eb4  ebfffffe          BL       atoi
000eb8  e3500078          CMP      r0,#0x78              ;394
000ebc  e586001c          STR      r0,[r6,#0x1c]         ;393  ; setValue
000ec0  83a00078          MOVHI    r0,#0x78              ;396
000ec4  8586001c          STRHI    r0,[r6,#0x1c]         ;396  ; setValue
000ec8  ebfffffe          BL       __aeabi_ui2f
000ecc  ebfffffe          BL       setMovingAveragePeriod
000ed0  e596101c          LDR      r1,[r6,#0x1c]         ;399  ; setValue
000ed4  e28f0e1b          ADR      r0,|L1.4236|
000ed8  ebfffffe          BL       __2printf
000edc  ea000119          B        |L1.4936|
                  |L1.3808|
000ee0  e5961014          LDR      r1,[r6,#0x14]         ;401  ; bMessage
000ee4  e3a02004          MOV      r2,#4                 ;401
000ee8  e28f0f6e          ADR      r0,|L1.4264|
000eec  ebfffffe          BL       strncmp
000ef0  e3500000          CMP      r0,#0                 ;401
000ef4  1a000016          BNE      |L1.3924|
000ef8  e5960014          LDR      r0,[r6,#0x14]         ;401  ; bMessage
000efc  e5d01004          LDRB     r1,[r0,#4]            ;401
000f00  e3510030          CMP      r1,#0x30              ;401
000f04  3a000012          BCC      |L1.3924|
000f08  e3510039          CMP      r1,#0x39              ;401
000f0c  8a000010          BHI      |L1.3924|
000f10  e5d61003          LDRB     r1,[r6,#3]            ;403  ; bMessageLength
000f14  e7c04001          STRB     r4,[r0,r1]            ;403
000f18  e2800004          ADD      r0,r0,#4              ;403
000f1c  ebfffffe          BL       atoi
000f20  e586001c          STR      r0,[r6,#0x1c]         ;404  ; setValue
000f24  e20000ff          AND      r0,r0,#0xff           ;405
000f28  e350000c          CMP      r0,#0xc               ;406
000f2c  e5c60005          STRB     r0,[r6,#5]            ;405  ; NumberOfInitialCalPositions
000f30  83a00006          MOVHI    r0,#6                 ;408
000f34  e20020ff          AND      r2,r0,#0xff           ;410
000f38  85c60005          STRBHI   r0,[r6,#5]            ;408  ; NumberOfInitialCalPositions
000f3c  e59f019c          LDR      r0,|L1.4320|
000f40  e28f1f5a          ADR      r1,|L1.4272|
000f44  ebfffffe          BL       __2sprintf
000f48  e59f0190          LDR      r0,|L1.4320|
000f4c  ebfffffe          BL       resendMessage
000f50  ea0000fc          B        |L1.4936|
                  |L1.3924|
000f54  e5961014          LDR      r1,[r6,#0x14]         ;413  ; bMessage
000f58  e3a02004          MOV      r2,#4                 ;413
000f5c  e28f0d06          ADR      r0,|L1.4324|
000f60  ebfffffe          BL       strncmp
000f64  e3500000          CMP      r0,#0                 ;413
000f68  03a00008          MOVEQ    r0,#8                 ;415
000f6c  05c60004          STRBEQ   r0,[r6,#4]            ;415  ; compassBoardState
000f70  0a00007c          BEQ      |L1.4456|
000f74  e5961014          LDR      r1,[r6,#0x14]         ;418  ; bMessage
000f78  e3a02004          MOV      r2,#4                 ;418
000f7c  e28f0f5a          ADR      r0,|L1.4332|
000f80  ebfffffe          BL       strncmp
000f84  e3500000          CMP      r0,#0                 ;418
000f88  0a000067          BEQ      |L1.4396|
000f8c  e5961014          LDR      r1,[r6,#0x14]         ;428  ; bMessage
000f90  e3a02003          MOV      r2,#3                 ;428
000f94  e28f0f56          ADR      r0,|L1.4340|
000f98  ebfffffe          BL       strncmp
000f9c  e3500000          CMP      r0,#0                 ;428
000fa0  05c65002          STRBEQ   r5,[r6,#2]            ;430  ; readContinuous
000fa4  05c64001          STRBEQ   r4,[r6,#1]            ;431  ; commaFormat
000fa8  0a00006e          BEQ      |L1.4456|
000fac  e5961014          LDR      r1,[r6,#0x14]         ;434  ; bMessage
000fb0  e3a02003          MOV      r2,#3                 ;434
000fb4  e28f0f4f          ADR      r0,|L1.4344|
000fb8  ebfffffe          BL       strncmp
000fbc  e3500000          CMP      r0,#0                 ;434
000fc0  0a000064          BEQ      |L1.4440|
000fc4  e5961014          LDR      r1,[r6,#0x14]         ;441  ; bMessage
000fc8  e3a02004          MOV      r2,#4                 ;441
000fcc  e28f0f4a          ADR      r0,|L1.4348|
000fd0  ebfffffe          BL       strncmp
000fd4  e3500000          CMP      r0,#0                 ;441
000fd8  05c64002          STRBEQ   r4,[r6,#2]            ;443  ; readContinuous
000fdc  05c64001          STRBEQ   r4,[r6,#1]            ;444  ; commaFormat
000fe0  0afffecc          BEQ      |L1.2840|
000fe4  e5961014          LDR      r1,[r6,#0x14]         ;446  ; bMessage
000fe8  e3a0200a          MOV      r2,#0xa               ;446
000fec  e28f0e11          ADR      r0,|L1.4356|
000ff0  ebfffffe          BL       strncmp
000ff4  e3500000          CMP      r0,#0                 ;446
000ff8  0a00005d          BEQ      |L1.4468|
000ffc  e5961014          LDR      r1,[r6,#0x14]         ;453  ; bMessage
001000  e3a0200a          MOV      r2,#0xa               ;453
001004  e28f0f41          ADR      r0,|L1.4368|
001008  ebfffffe          BL       strncmp
00100c  e3500000          CMP      r0,#0                 ;453
001010  0a00005d          BEQ      |L1.4492|
001014  e5961014          LDR      r1,[r6,#0x14]         ;511  ; bMessage
001018  e3a02009          MOV      r2,#9                 ;511
00101c  e28f00f4          ADR      r0,|L1.4376|
001020  ebfffffe          BL       strncmp
001024  e3500000          CMP      r0,#0                 ;511
001028  0a00009f          BEQ      |L1.4780|
00102c  e5961014          LDR      r1,[r6,#0x14]         ;525  ; bMessage
001030  e3a02006          MOV      r2,#6                 ;525
001034  e28f00e8          ADR      r0,|L1.4388|
001038  ebfffffe          BL       strncmp
00103c  e3500000          CMP      r0,#0                 ;525
001040  03a05000          MOVEQ    r5,#0                 ;527
001044  0a0000ad          BEQ      |L1.4864|
001048  ea0000be          B        |L1.4936|
                  |L1.4172|
00104c  53544152          DCB      "STARTINFO, Mag Init Cal Ok \n",0
001050  54494e46
001054  4f2c204d
001058  61672049
00105c  6e697420
001060  43616c20
001064  4f6b200a
001068  00      
001069  00                DCB      0
00106a  00                DCB      0
00106b  00                DCB      0
                  |L1.4204|
                          DCD      ||.data||+0x7
                  |L1.4208|
001070  57616b65          DCB      "WakeOnMotion,\n",0
001074  4f6e4d6f
001078  74696f6e
00107c  2c0a00  
00107f  00                DCB      0
                  |L1.4224|
                          DCD      ||.data||+0x40
                  |L1.4228|
                          DCD      deltat
                  |L1.4232|
001088  61766700          DCB      "avg",0
                  |L1.4236|
00108c  2564204d          DCB      "%d Moving Average Period\n",0
001090  6f76696e
001094  67204176
001098  65726167
00109c  65205065
0010a0  72696f64
0010a4  0a00    
0010a6  00                DCB      0
0010a7  00                DCB      0
                  |L1.4264|
0010a8  63706f73          DCB      "cpos",0
0010ac  00      
0010ad  00                DCB      0
0010ae  00                DCB      0
0010af  00                DCB      0
                  |L1.4272|
0010b0  506f7369          DCB      "Positions, %d  Number Of Initial Cal Positions\n",0
0010b4  74696f6e
0010b8  732c2025
0010bc  6420204e
0010c0  756d6265
0010c4  72204f66
0010c8  20496e69
0010cc  7469616c
0010d0  2043616c
0010d4  20506f73
0010d8  6974696f
0010dc  6e730a00
                  |L1.4320|
                          DCD      ||.bss||
                  |L1.4324|
0010e4  6175746f          DCB      "auto",0
0010e8  00      
0010e9  00                DCB      0
0010ea  00                DCB      0
0010eb  00                DCB      0
                  |L1.4332|
0010ec  72656164          DCB      "read",0
0010f0  00      
0010f1  00                DCB      0
0010f2  00                DCB      0
0010f3  00                DCB      0
                  |L1.4340|
0010f4  6d6f6e00          DCB      "mon",0
                  |L1.4344|
0010f8  6c6f6700          DCB      "log",0
                  |L1.4348|
0010fc  73746f70          DCB      "stop",0
001100  00      
001101  00                DCB      0
001102  00                DCB      0
001103  00                DCB      0
                  |L1.4356|
001104  65726173          DCB      "erase$$Chip",0
001108  65244368
00110c  697000  
00110f  00                DCB      0
                  |L1.4368|
001110  67657469          DCB      "getinit",0
001114  6e697400
                  |L1.4376|
001118  65726173          DCB      "erase$$Cal",0
00111c  65244361
001120  6c00    
001122  00                DCB      0
001123  00                DCB      0
                  |L1.4388|
001124  67657463          DCB      "getcal",0
001128  616c00  
00112b  00                DCB      0
                  |L1.4396|
00112c  e5c64002          STRB     r4,[r6,#2]            ;420  ; readContinuous
001130  e5c64001          STRB     r4,[r6,#1]            ;421  ; commaFormat
001134  e3a00001          MOV      r0,#1                 ;424
001138  e5c69004          STRB     r9,[r6,#4]            ;423  ; compassBoardState
00113c  ebfffffe          BL       setSpeed
001140  e51f00c8          LDR      r0,|L1.4224|
001144  ebfffffe          BL       initTimer
001148  e51f00d0          LDR      r0,|L1.4224|
00114c  e3a01e7d          MOV      r1,#0x7d0             ;426
001150  ebfffffe          BL       startTimer
001154  ea00007b          B        |L1.4936|
                  |L1.4440|
001158  e28f0faa          ADR      r0,|L1.5128|
00115c  ebfffffe          BL       __2printf
001160  e5c65002          STRB     r5,[r6,#2]            ;437  ; readContinuous
001164  e5c65001          STRB     r5,[r6,#1]            ;438  ; commaFormat
                  |L1.4456|
001168  e3a00001          MOV      r0,#1                 ;439
00116c  ebfffffe          BL       setSpeed
001170  ea000074          B        |L1.4936|
                  |L1.4468|
001174  e3a00001          MOV      r0,#1                 ;448
001178  ebfffffe          BL       setSpeed
00117c  ebfffffe          BL       storedConfigEraseChip
001180  e28f0fae          ADR      r0,|L1.5184|
001184  e5c65004          STRB     r5,[r6,#4]            ;450  ; compassBoardState
001188  ea000052          B        |L1.4824|
                  |L1.4492|
00118c  e3a00001          MOV      r0,#1                 ;455
001190  ebfffffe          BL       setSpeed
001194  e28f0fad          ADR      r0,|L1.5200|
001198  e58d0000          STR      r0,[sp,#0]            ;456
00119c  e28f3fae          ADR      r3,|L1.5212|
0011a0  e28f2d0b          ADR      r2,|L1.5224|
0011a4  e28f1fb2          ADR      r1,|L1.5236|
0011a8  e28f0e2d          ADR      r0,|L1.5248|
0011ac  ebfffffe          BL       __2printf
0011b0  e28d101c          ADD      r1,sp,#0x1c           ;458
0011b4  e28d0018          ADD      r0,sp,#0x18           ;458
0011b8  ebfffffe          BL       getWhoAmI
0011bc  e3500001          CMP      r0,#1                 ;458
0011c0  128f0fb5          ADRNE    r0,|L1.5276|
0011c4  1a000043          BNE      |L1.4824|
0011c8  e5dd1018          LDRB     r1,[sp,#0x18]         ;460
0011cc  e51f0534          LDR      r0,|L1.3232|
0011d0  ebfffffe          BL       __2printf
0011d4  e5dd101c          LDRB     r1,[sp,#0x1c]         ;461
0011d8  e59f02dc          LDR      r0,|L1.5308|
0011dc  ebfffffe          BL       __2printf
0011e0  ebfffffe          BL       storedConfigGetACAL
0011e4  e1a01000          MOV      r1,r0                 ;463
0011e8  e51f058c          LDR      r0,|L1.3172|
0011ec  e3a02054          MOV      r2,#0x54              ;463
0011f0  ebfffffe          BL       __aeabi_memcpy4
0011f4  ebfffffe          BL       storedConfigGetMCAL
0011f8  e1a01000          MOV      r1,r0                 ;464
0011fc  e51f05b0          LDR      r0,|L1.3156|
001200  e3a02068          MOV      r2,#0x68              ;464
001204  ebfffffe          BL       __aeabi_memcpy4
001208  e3a00001          MOV      r0,#1                 ;466
00120c  ebfffffe          BL       calibrationDataACalInit
001210  e3500001          CMP      r0,#1                 ;466
001214  059f02a4          LDREQ    r0,|L1.5312|
001218  159f02a4          LDRNE    r0,|L1.5316|
00121c  ebfffffe          BL       __2printf
001220  e3a00001          MOV      r0,#1                 ;475
001224  ebfffffe          BL       calibrationDataMCalInit
001228  e3500001          CMP      r0,#1                 ;475
00122c  159f0294          LDRNE    r0,|L1.5320|
001230  024f0f7b          ADREQ    r0,|L1.4172|
001234  ebfffffe          BL       __2printf
001238  e3a05000          MOV      r5,#0                 ;484
                  |L1.4668|
00123c  e2880011          ADD      r0,r8,#0x11           ;484
001240  ebfffffe          BL       strlen
001244  e1550000          CMP      r5,r0                 ;484
001248  2a000007          BCS      |L1.4716|
00124c  e0880005          ADD      r0,r8,r5              ;486
001250  e5d00011          LDRB     r0,[r0,#0x11]         ;486
001254  e3500020          CMP      r0,#0x20              ;486
001258  30880005          ADDCC    r0,r8,r5              ;488
00125c  35c04011          STRBCC   r4,[r0,#0x11]         ;488
001260  22850001          ADDCS    r0,r5,#1              ;484
001264  220050ff          ANDCS    r5,r0,#0xff           ;484
001268  2afffff3          BCS      |L1.4668|
                  |L1.4716|
00126c  e3a05000          MOV      r5,#0                 ;493
                  |L1.4720|
001270  e2870028          ADD      r0,r7,#0x28           ;493
001274  ebfffffe          BL       strlen
001278  e1550000          CMP      r5,r0                 ;493
00127c  2a000007          BCS      |L1.4768|
001280  e0870005          ADD      r0,r7,r5              ;495
001284  e5d00028          LDRB     r0,[r0,#0x28]         ;495
001288  e3500020          CMP      r0,#0x20              ;495
00128c  30870005          ADDCC    r0,r7,r5              ;497
001290  35c04028          STRBCC   r4,[r0,#0x28]         ;497
001294  22850001          ADDCS    r0,r5,#1              ;493
001298  220050ff          ANDCS    r5,r0,#0xff           ;493
00129c  2afffff3          BCS      |L1.4720|
                  |L1.4768|
0012a0  ebfffffe          BL       printCal
0012a4  e28f0e22          ADR      r0,|L1.5324|
0012a8  ea00000a          B        |L1.4824|
                  |L1.4780|
0012ac  e3a00001          MOV      r0,#1                 ;513
0012b0  ebfffffe          BL       setSpeed
0012b4  e59f421c          LDR      r4,|L1.5336|
0012b8  e51f065c          LDR      r0,|L1.3172|
0012bc  e5884000          STR      r4,[r8,#0]            ;516  ; calibrationDataACal
0012c0  ebfffffe          BL       storedConfigSetACAL
0012c4  e51f0678          LDR      r0,|L1.3156|
0012c8  e5874000          STR      r4,[r7,#0]            ;519  ; calibrationDataMCal
0012cc  ebfffffe          BL       storedConfigSetMCAL
0012d0  e28f0f81          ADR      r0,|L1.5340|
0012d4  e5c65004          STRB     r5,[r6,#4]            ;521  ; compassBoardState
                  |L1.4824|
0012d8  ebfffffe          BL       __2printf
0012dc  ea000019          B        |L1.4936|
                  |L1.4832|
0012e0  e0880005          ADD      r0,r8,r5              ;529
0012e4  e5d00011          LDRB     r0,[r0,#0x11]         ;529
0012e8  e3500020          CMP      r0,#0x20              ;529
0012ec  30880005          ADDCC    r0,r8,r5              ;531
0012f0  35c04011          STRBCC   r4,[r0,#0x11]         ;531
0012f4  22850001          ADDCS    r0,r5,#1              ;527
0012f8  220050ff          ANDCS    r5,r0,#0xff           ;527
0012fc  3a000003          BCC      |L1.4880|
                  |L1.4864|
001300  e2880011          ADD      r0,r8,#0x11           ;527
001304  ebfffffe          BL       strlen
001308  e1550000          CMP      r5,r0                 ;527
00130c  3afffff3          BCC      |L1.4832|
                  |L1.4880|
001310  e3a05000          MOV      r5,#0                 ;536
                  |L1.4884|
001314  e2870028          ADD      r0,r7,#0x28           ;536
001318  ebfffffe          BL       strlen
00131c  e1550000          CMP      r5,r0                 ;536
001320  2a000007          BCS      |L1.4932|
001324  e0870005          ADD      r0,r7,r5              ;538
001328  e5d00028          LDRB     r0,[r0,#0x28]         ;538
00132c  e3500020          CMP      r0,#0x20              ;538
001330  30870005          ADDCC    r0,r7,r5              ;540
001334  35c04028          STRBCC   r4,[r0,#0x28]         ;540
001338  22850001          ADDCS    r0,r5,#1              ;536
00133c  220050ff          ANDCS    r5,r0,#0xff           ;536
001340  2afffff3          BCS      |L1.4884|
                  |L1.4932|
001344  ebfffffe          BL       printCal
                  |L1.4936|
001348  e5d60002          LDRB     r0,[r6,#2]            ;549  ; readContinuous
00134c  e3500001          CMP      r0,#1                 ;549
001350  1afffdf0          BNE      |L1.2840|
001354  ebfffffe          BL       getTimerNow
001358  e596100c          LDR      r1,[r6,#0xc]          ;551  ; readUpdateCount
00135c  e0400001          SUB      r0,r0,r1              ;551
001360  e3500f7d          CMP      r0,#0x1f4             ;553
001364  e5860010          STR      r0,[r6,#0x10]         ;551  ; readUpdateDelta
001368  9afffdea          BLS      |L1.2840|
00136c  ebfffffe          BL       getTimerNow
001370  e586000c          STR      r0,[r6,#0xc]          ;555  ; readUpdateCount
001374  ebfffffe          BL       printData
001378  eafffde6          B        |L1.2840|
                  |L1.4988|
00137c  e51f0304          LDR      r0,|L1.4224|
001380  ebfffffe          BL       isTimerExpired
001384  e3500000          CMP      r0,#0                 ;562
001388  0a000001          BEQ      |L1.5012|
00138c  ebfffffe          BL       printData
001390  eafffe6f          B        |L1.3412|
                  |L1.5012|
001394  ebfffffe          BL       ReadDataandUpdateTime
001398  e3500001          CMP      r0,#1                 ;569
00139c  1afffddd          BNE      |L1.2840|
0013a0  e51f0324          LDR      r0,|L1.4228|
0013a4  e59a2000          LDR      r2,[r10,#0]           ;581  ; mz
0013a8  e5901000          LDR      r1,[r0,#0]            ;581  ; deltat
0013ac  e51f0c30          LDR      r0,|L1.1924|
0013b0  e28d5008          ADD      r5,sp,#8              ;581
0013b4  e5903000          LDR      r3,[r0,#0]            ;581  ; my
0013b8  e51f0c38          LDR      r0,|L1.1928|
0013bc  e5900000          LDR      r0,[r0,#0]            ;581  ; mx
0013c0  e8850009          STM      r5,{r0,r3}            ;581
0013c4  e51f0c40          LDR      r0,|L1.1932|
0013c8  e58d1014          STR      r1,[sp,#0x14]         ;581
0013cc  e58d2010          STR      r2,[sp,#0x10]         ;581
0013d0  e58d4000          STR      r4,[sp,#0]            ;581
0013d4  e58d4004          STR      r4,[sp,#4]            ;581
0013d8  e5902000          LDR      r2,[r0,#0]            ;581  ; az
0013dc  e51f0c54          LDR      r0,|L1.1936|
0013e0  e3a03000          MOV      r3,#0                 ;581
0013e4  e5901000          LDR      r1,[r0,#0]            ;581  ; ay
0013e8  e51f0c5c          LDR      r0,|L1.1940|
0013ec  e5900000          LDR      r0,[r0,#0]            ;581  ; ax
0013f0  ebfffffe          BL       MahonyQuaternionUpdate
0013f4  e5d60007          LDRB     r0,[r6,#7]            ;583  ; WakeOnMotionFlag
0013f8  e3500001          CMP      r0,#1                 ;583
0013fc  024f0fe5          ADREQ    r0,|L1.4208|
001400  0bfffffe          BLEQ     __2printf
001404  eafffdc3          B        |L1.2840|
                  |L1.5128|
001408  44697265          DCB      "Direction, ax, ay, az, mx, my, mz, yaw, pitch, roll, \n"
00140c  6374696f
001410  6e2c2061
001414  782c2061
001418  792c2061
00141c  7a2c206d
001420  782c206d
001424  792c206d
001428  7a2c2079
00142c  61772c20
001430  70697463
001434  682c2072
001438  6f6c6c2c
00143c  200a    
00143e  00                DCB      0
00143f  00                DCB      0
                  |L1.5184|
001440  43686970          DCB      "Chip erased\n",0
001444  20657261
001448  7365640a
00144c  00      
00144d  00                DCB      0
00144e  00                DCB      0
00144f  00                DCB      0
                  |L1.5200|
001450  30383a32          DCB      "08:25:47",0
001454  353a3437
001458  00      
001459  00                DCB      0
00145a  00                DCB      0
00145b  00                DCB      0
                  |L1.5212|
00145c  4a756c20          DCB      "Jul  9 2021",0
001460  20392032
001464  30323100
                  |L1.5224|
001468  7430302e          DCB      "t00.00.02",0
00146c  30302e30
001470  3200    
001472  00                DCB      0
001473  00                DCB      0
                  |L1.5236|
001474  636f6d70          DCB      "compass.c",0
001478  6173732e
00147c  6300    
00147e  00                DCB      0
00147f  00                DCB      0
                  |L1.5248|
001480  56455253          DCB      "VERSION, %s, %s, %s, %s \n",0
001484  494f4e2c
001488  2025732c
00148c  2025732c
001490  2025732c
001494  20257320
001498  0a00    
00149a  00                DCB      0
00149b  00                DCB      0
                  |L1.5276|
00149c  4552524f          DCB      "ERROR, getinit: MPU9250init\n",0
0014a0  522c2067
0014a4  6574696e
0014a8  69743a20
0014ac  4d505539
0014b0  32353069
0014b4  6e69740a
0014b8  00      
0014b9  00                DCB      0
0014ba  00                DCB      0
0014bb  00                DCB      0
                  |L1.5308|
                          DCD      ||.text||+0xca4
                  |L1.5312|
                          DCD      ||.text||+0xd04
                  |L1.5316|
                          DCD      ||.text||+0xce4
                  |L1.5320|
                          DCD      ||.text||+0xd20
                  |L1.5324|
0014cc  67657469          DCB      "getinit\n",0
0014d0  6e69740a
0014d4  00      
0014d5  00                DCB      0
0014d6  00                DCB      0
0014d7  00                DCB      0
                  |L1.5336|
                          DCD      0x5aa52dd2
                  |L1.5340|
0014dc  43616c20          DCB      "Cal erased\n",0
0014e0  65726173
0014e4  65640a00
                  |L1.5352|
0014e8  e5d60003          LDRB     r0,[r6,#3]            ;593  ; bMessageLength
0014ec  e3500003          CMP      r0,#3                 ;593
0014f0  9a000011          BLS      |L1.5436|
0014f4  e5d62006          LDRB     r2,[r6,#6]            ;593  ; AutoCalFlag
0014f8  e3520000          CMP      r2,#0                 ;593
0014fc  1a000012          BNE      |L1.5452|
001500  e240000c          SUB      r0,r0,#0xc            ;593
001504  e3500040          CMP      r0,#0x40              ;595
001508  c5c61003          STRBGT   r1,[r6,#3]            ;597  ; bMessageLength
00150c  e5d61003          LDRB     r1,[r6,#3]            ;600  ; bMessageLength
001510  e5960014          LDR      r0,[r6,#0x14]         ;600  ; bMessage
001514  e7c04001          STRB     r4,[r0,r1]            ;600
001518  e5d61003          LDRB     r1,[r6,#3]            ;602  ; bMessageLength
00151c  e0811000          ADD      r1,r1,r0              ;602
001520  e5512001          LDRB     r2,[r1,#-1]           ;602
001524  e3520020          CMP      r2,#0x20              ;602
001528  35414001          STRBCC   r4,[r1,#-1]           ;604
00152c  e280100b          ADD      r1,r0,#0xb            ;606
                  |L1.5424|
001530  e2870028          ADD      r0,r7,#0x28           ;610
001534  ebfffffe          BL       strcpy
001538  ea000009          B        |L1.5476|
                  |L1.5436|
00153c  e5d60006          LDRB     r0,[r6,#6]            ;608  ; AutoCalFlag
001540  e3500000          CMP      r0,#0                 ;608
001544  028f1fb7          ADREQ    r1,|L1.6184|
001548  0afffff8          BEQ      |L1.5424|
                  |L1.5452|
00154c  e28f1e2f          ADR      r1,|L1.6212|
001550  e2870028          ADD      r0,r7,#0x28           ;614
001554  ebfffffe          BL       strcpy
001558  e59f12f0          LDR      r1,|L1.6224|
00155c  e2870028          ADD      r0,r7,#0x28           ;615
001560  ebfffffe          BL       strcat
                  |L1.5476|
001564  e3a02000          MOV      r2,#0                 ;619
001568  e2871010          ADD      r1,r7,#0x10           ;619
00156c  e2870004          ADD      r0,r7,#4              ;619
001570  ebfffffe          BL       magcalMPU9250
001574  e3500000          CMP      r0,#0                 ;619
001578  0a00000d          BEQ      |L1.5556|
00157c  e59f02d0          LDR      r0,|L1.6228|
001580  e5c6400a          STRB     r4,[r6,#0xa]          ;626  ; position
001584  e5c04000          STRB     r4,[r0,#0]            ;627  ; inCalibration
001588  e28f0fb2          ADR      r0,|L1.6232|
00158c  e5c64008          STRB     r4,[r6,#8]            ;628  ; index1
001590  ebfffffe          BL       resendMessage
001594  e5d6200a          LDRB     r2,[r6,#0xa]          ;631  ; position
001598  e51f04c0          LDR      r0,|L1.4320|
00159c  e28f1fb6          ADR      r1,|L1.6268|
0015a0  ebfffffe          BL       __2sprintf
0015a4  e51f04cc          LDR      r0,|L1.4320|
0015a8  ebfffffe          BL       resendMessage
0015ac  e3a00005          MOV      r0,#5                 ;634
0015b0  ea000123          B        |L1.6724|
                  |L1.5556|
0015b4  e28f0fb6          ADR      r0,|L1.6292|
0015b8  ebfffffe          BL       resendMessage
0015bc  eafffde4          B        |L1.3412|
                  |L1.5568|
0015c0  e5d6000a          LDRB     r0,[r6,#0xa]          ;639  ; position
0015c4  e5d61005          LDRB     r1,[r6,#5]            ;639  ; NumberOfInitialCalPositions
0015c8  e1500001          CMP      r0,r1                 ;639
0015cc  2afffd51          BCS      |L1.2840|
0015d0  e59f827c          LDR      r8,|L1.6228|
0015d4  e5d80000          LDRB     r0,[r8,#0]            ;641  ; inCalibration
0015d8  e3500000          CMP      r0,#0                 ;641
0015dc  0a00001c          BEQ      |L1.5716|
0015e0  ebfffffe          BL       ReadDataandUpdateTime
0015e4  e3500001          CMP      r0,#1                 ;651
0015e8  1afffd4a          BNE      |L1.2840|
0015ec  e5d80000          LDRB     r0,[r8,#0]            ;653  ; inCalibration
0015f0  e3100001          TST      r0,#1                 ;653
0015f4  0a000005          BEQ      |L1.5648|
0015f8  e5d60008          LDRB     r0,[r6,#8]            ;655  ; index1
0015fc  e2800001          ADD      r0,r0,#1              ;655
001600  e20010ff          AND      r1,r0,#0xff           ;655
001604  e28f0fab          ADR      r0,|L1.6328|
001608  e5c61008          STRB     r1,[r6,#8]            ;655  ; index1
00160c  ebfffffe          BL       __2printf
                  |L1.5648|
001610  e5d60008          LDRB     r0,[r6,#8]            ;659  ; index1
001614  e3500078          CMP      r0,#0x78              ;659
001618  3afffd3e          BCC      |L1.2840|
00161c  e5d6000a          LDRB     r0,[r6,#0xa]          ;661  ; position
001620  e2800001          ADD      r0,r0,#1              ;661
001624  e20020ff          AND      r2,r0,#0xff           ;661
001628  e5c6200a          STRB     r2,[r6,#0xa]          ;661  ; position
00162c  e5c64008          STRB     r4,[r6,#8]            ;662  ; index1
001630  e5d60005          LDRB     r0,[r6,#5]            ;664  ; NumberOfInitialCalPositions
001634  e1520000          CMP      r2,r0                 ;664
001638  2a00000f          BCS      |L1.5756|
00163c  e51f0564          LDR      r0,|L1.4320|
001640  e28f1f8d          ADR      r1,|L1.6268|
001644  ebfffffe          BL       __2sprintf
001648  e51f0570          LDR      r0,|L1.4320|
00164c  ebfffffe          BL       resendMessage
001650  ea000016          B        |L1.5808|
                  |L1.5716|
001654  e59f1260          LDR      r1,|L1.6332|
001658  e2810011          ADD      r0,r1,#0x11           ;643
00165c  ebfffffe          BL       serialGetMessage
001660  e3500001          CMP      r0,#1                 ;643
001664  1afffd2b          BNE      |L1.2840|
001668  e5d6100a          LDRB     r1,[r6,#0xa]          ;645  ; position
00166c  e28f0f93          ADR      r0,|L1.6336|
001670  ebfffffe          BL       __2printf
001674  e5c85000          STRB     r5,[r8,#0]            ;646  ; inCalibration
001678  eafffd26          B        |L1.2840|
                  |L1.5756|
00167c  e3a02001          MOV      r2,#1                 ;671
001680  e2871010          ADD      r1,r7,#0x10           ;671
001684  e2870004          ADD      r0,r7,#4              ;671
001688  ebfffffe          BL       magcalMPU9250
00168c  e3500001          CMP      r0,#1                 ;671
001690  1a000003          BNE      |L1.5796|
001694  e3a00000          MOV      r0,#0                 ;671
001698  ebfffffe          BL       calibrationDataMCalInit
00169c  e3500001          CMP      r0,#1                 ;671
0016a0  0a000004          BEQ      |L1.5816|
                  |L1.5796|
0016a4  e28f0f7a          ADR      r0,|L1.6292|
0016a8  ebfffffe          BL       resendMessage
0016ac  e5c69004          STRB     r9,[r6,#4]            ;680  ; compassBoardState
                  |L1.5808|
0016b0  e5c84000          STRB     r4,[r8,#0]            ;684  ; inCalibration
0016b4  eafffd17          B        |L1.2840|
                  |L1.5816|
0016b8  e59f0224          LDR      r0,|L1.6372|
0016bc  ebfffffe          BL       setMovingAveragePeriod
0016c0  e3a00006          MOV      r0,#6                 ;675
0016c4  e5c60004          STRB     r0,[r6,#4]            ;675  ; compassBoardState
0016c8  eafffff8          B        |L1.5808|
                  |L1.5836|
0016cc  ebfffffe          BL       ReadDataandUpdateTime
0016d0  e3500001          CMP      r0,#1                 ;692
0016d4  1a000019          BNE      |L1.5952|
0016d8  e51f0f5c          LDR      r0,|L1.1924|
0016dc  e59a2000          LDR      r2,[r10,#0]           ;695  ; mz
0016e0  e5903000          LDR      r3,[r0,#0]            ;695  ; my
0016e4  e51f0f64          LDR      r0,|L1.1928|
0016e8  e28d5008          ADD      r5,sp,#8              ;695
0016ec  e5900000          LDR      r0,[r0,#0]            ;695  ; mx
0016f0  e59f11f0          LDR      r1,|L1.6376|
0016f4  e8850009          STM      r5,{r0,r3}            ;695
0016f8  e51f0f74          LDR      r0,|L1.1932|
0016fc  e58d1014          STR      r1,[sp,#0x14]         ;695
001700  e58d2010          STR      r2,[sp,#0x10]         ;695
001704  e58d4000          STR      r4,[sp,#0]            ;695
001708  e58d4004          STR      r4,[sp,#4]            ;695
00170c  e5902000          LDR      r2,[r0,#0]            ;695  ; az
001710  e51f0f88          LDR      r0,|L1.1936|
001714  e3a03000          MOV      r3,#0                 ;695
001718  e5901000          LDR      r1,[r0,#0]            ;695  ; ay
00171c  e51f0f90          LDR      r0,|L1.1940|
001720  e5900000          LDR      r0,[r0,#0]            ;695  ; ax
001724  ebfffffe          BL       MahonyQuaternionUpdate
001728  e5d60008          LDRB     r0,[r6,#8]            ;696  ; index1
00172c  e2800001          ADD      r0,r0,#1              ;696
001730  e20010ff          AND      r1,r0,#0xff           ;696
001734  e28f0e1b          ADR      r0,|L1.6380|
001738  e5c61008          STRB     r1,[r6,#8]            ;696  ; index1
00173c  ebfffffe          BL       __2printf
                  |L1.5952|
001740  e5d60008          LDRB     r0,[r6,#8]            ;700  ; index1
001744  e3500078          CMP      r0,#0x78              ;700
001748  3afffcf2          BCC      |L1.2840|
00174c  ebfffffe          BL       convertFromQuaternionsToEulerAngles
001750  e5960028          LDR      r0,[r6,#0x28]         ;704  ; declination, yaw
001754  e5961020          LDR      r1,[r6,#0x20]         ;704
001758  ebfffffe          BL       __aeabi_fsub
00175c  e587001c          STR      r0,[r7,#0x1c]         ;705  ; calibrationDataMCal
001760  e5960024          LDR      r0,[r6,#0x24]         ;705  ; pitch
001764  e5870020          STR      r0,[r7,#0x20]         ;706  ; calibrationDataMCal
001768  e596002c          LDR      r0,[r6,#0x2c]         ;706  ; roll
00176c  e5870024          STR      r0,[r7,#0x24]         ;706  ; calibrationDataMCal
001770  e59f017c          LDR      r0,|L1.6388|
001774  ebfffffe          BL       setMovingAveragePeriod
001778  e3a05000          MOV      r5,#0                 ;709
                  |L1.6012|
00177c  e2870028          ADD      r0,r7,#0x28           ;709
001780  ebfffffe          BL       strlen
001784  e1550000          CMP      r5,r0                 ;709
001788  2a000007          BCS      |L1.6060|
00178c  e0870005          ADD      r0,r7,r5              ;711
001790  e5d00028          LDRB     r0,[r0,#0x28]         ;711
001794  e3500020          CMP      r0,#0x20              ;711
001798  30870005          ADDCC    r0,r7,r5              ;713
00179c  35c04028          STRBCC   r4,[r0,#0x28]         ;713
0017a0  22850001          ADDCS    r0,r5,#1              ;709
0017a4  220050ff          ANDCS    r5,r0,#0xff           ;709
0017a8  2afffff3          BCS      |L1.6012|
                  |L1.6060|
0017ac  e59f0144          LDR      r0,|L1.6392|
0017b0  e5870000          STR      r0,[r7,#0]            ;718  ; calibrationDataMCal
0017b4  e51f0b68          LDR      r0,|L1.3156|
0017b8  ebfffffe          BL       storedConfigSetMCAL
0017bc  e28f0f4e          ADR      r0,|L1.6396|
0017c0  ebfffffe          BL       resendMessage
0017c4  e5d60006          LDRB     r0,[r6,#6]            ;723  ; AutoCalFlag
0017c8  e3500001          CMP      r0,#1                 ;723
0017cc  0bfffffe          BLEQ     printCal
0017d0  eafffd5f          B        |L1.3412|
                  |L1.6100|
0017d4  e5d60003          LDRB     r0,[r6,#3]            ;733  ; bMessageLength
0017d8  e3500004          CMP      r0,#4                 ;733
0017dc  9a00004e          BLS      |L1.6428|
0017e0  e5d62006          LDRB     r2,[r6,#6]            ;733  ; AutoCalFlag
0017e4  e3520000          CMP      r2,#0                 ;733
0017e8  1a00004f          BNE      |L1.6444|
0017ec  e240000c          SUB      r0,r0,#0xc            ;733
0017f0  e3500040          CMP      r0,#0x40              ;735
0017f4  c5c61003          STRBGT   r1,[r6,#3]            ;737  ; bMessageLength
0017f8  e5d61003          LDRB     r1,[r6,#3]            ;739  ; bMessageLength
0017fc  e5960014          LDR      r0,[r6,#0x14]         ;739  ; bMessage
001800  e7c04001          STRB     r4,[r0,r1]            ;739
001804  e5d61003          LDRB     r1,[r6,#3]            ;740  ; bMessageLength
001808  e0811000          ADD      r1,r1,r0              ;740
00180c  e5512001          LDRB     r2,[r1,#-1]           ;740
001810  e3520020          CMP      r2,#0x20              ;740
001814  35414001          STRBCC   r4,[r1,#-1]           ;742
001818  e280100b          ADD      r1,r0,#0xb            ;744
                  |L1.6172|
00181c  e2880011          ADD      r0,r8,#0x11           ;748
001820  ebfffffe          BL       strcpy
001824  ea000046          B        |L1.6468|
                  |L1.6184|
001828  44656661          DCB      "Default Calibration Info",0
00182c  756c7420
001830  43616c69
001834  62726174
001838  696f6e20
00183c  496e666f
001840  00      
001841  00                DCB      0
001842  00                DCB      0
001843  00                DCB      0
                  |L1.6212|
001844  5369676e          DCB      "Sign Mag ",0
001848  204d6167
00184c  2000    
00184e  00                DCB      0
00184f  00                DCB      0
                  |L1.6224|
                          DCD      ||.bss||+0x100
                  |L1.6228|
                          DCD      inCalibration
                  |L1.6232|
001858  53544152          DCB      "STARTCAL, Mag Calibration start! \n",0
00185c  5443414c
001860  2c204d61
001864  67204361
001868  6c696272
00186c  6174696f
001870  6e207374
001874  61727421
001878  200a00  
00187b  00                DCB      0
                  |L1.6268|
00187c  53657420          DCB      "Set to position, %d \n",0
001880  746f2070
001884  6f736974
001888  696f6e2c
00188c  20256420
001890  0a00    
001892  00                DCB      0
001893  00                DCB      0
                  |L1.6292|
001894  45525243          DCB      "ERRCAL, Mag Calibration NOT ok! \n",0
001898  414c2c20
00189c  4d616720
0018a0  43616c69
0018a4  62726174
0018a8  696f6e20
0018ac  4e4f5420
0018b0  6f6b2120
0018b4  0a00    
0018b6  00                DCB      0
0018b7  00                DCB      0
                  |L1.6328|
0018b8  25640a00          DCB      "%d\n",0
                  |L1.6332|
                          DCD      ||.data||+0x3
                  |L1.6336|
0018c0  20206765          DCB      "  getting data for position, %d\n",0
0018c4  7474696e
0018c8  67206461
0018cc  74612066
0018d0  6f722070
0018d4  6f736974
0018d8  696f6e2c
0018dc  2025640a
0018e0  00      
0018e1  00                DCB      0
0018e2  00                DCB      0
0018e3  00                DCB      0
                  |L1.6372|
                          DCD      0x42700000
                  |L1.6376|
                          DCD      0x3dcccccd
                  |L1.6380|
0018ec  20202564          DCB      "  %d\n",0
0018f0  0a00    
0018f2  00                DCB      0
0018f3  00                DCB      0
                  |L1.6388|
                          DCD      0x42ee0000
                  |L1.6392|
                          DCD      0xa55ad22d
                  |L1.6396|
0018fc  454e4443          DCB      "ENDCAL, Mag Calibration done! \n",0
001900  414c2c20
001904  4d616720
001908  43616c69
00190c  62726174
001910  696f6e20
001914  646f6e65
001918  21200a00
                  |L1.6428|
00191c  e5d60006          LDRB     r0,[r6,#6]            ;746  ; AutoCalFlag
001920  e3500000          CMP      r0,#0                 ;746
001924  024f1f41          ADREQ    r1,|L1.6184|
001928  0affffbb          BEQ      |L1.6172|
                  |L1.6444|
00192c  e28f1f5f          ADR      r1,|L1.6832|
001930  e2880011          ADD      r0,r8,#0x11           ;752
001934  ebfffffe          BL       strcpy
001938  e51f10f0          LDR      r1,|L1.6224|
00193c  e2880011          ADD      r0,r8,#0x11           ;753
001940  ebfffffe          BL       strcat
                  |L1.6468|
001944  ebfffffe          BL       calibrateMPU9250
001948  e3500001          CMP      r0,#1                 ;756
00194c  e3a07004          MOV      r7,#4                 ;275
001950  128f0f59          ADRNE    r0,|L1.6844|
001954  1a000012          BNE      |L1.6564|
001958  ebfffffe          BL       getMovingAveragePeriod
00195c  e3a05000          MOV      r5,#0                 ;760
                  |L1.6496|
001960  e2880011          ADD      r0,r8,#0x11           ;760
001964  ebfffffe          BL       strlen
001968  e1550000          CMP      r5,r0                 ;760
00196c  2a000007          BCS      |L1.6544|
001970  e0880005          ADD      r0,r8,r5              ;762
001974  e5d00011          LDRB     r0,[r0,#0x11]         ;762
001978  e3500020          CMP      r0,#0x20              ;762
00197c  30880005          ADDCC    r0,r8,r5              ;764
001980  35c04011          STRBCC   r4,[r0,#0x11]         ;764
001984  22850001          ADDCS    r0,r5,#1              ;760
001988  220050ff          ANDCS    r5,r0,#0xff           ;760
00198c  2afffff3          BCS      |L1.6496|
                  |L1.6544|
001990  e51f00a0          LDR      r0,|L1.6392|
001994  e5880000          STR      r0,[r8,#0]            ;769  ; calibrationDataACal
001998  e51f0d3c          LDR      r0,|L1.3172|
00199c  ebfffffe          BL       storedConfigSetACAL
0019a0  e28f0d05          ADR      r0,|L1.6888|
                  |L1.6564|
0019a4  ebfffffe          BL       resendMessage
0019a8  e5d60006          LDRB     r0,[r6,#6]            ;774  ; AutoCalFlag
0019ac  e3500000          CMP      r0,#0                 ;774
0019b0  15c67004          STRBNE   r7,[r6,#4]            ;793  ; compassBoardState
0019b4  1afffc57          BNE      |L1.2840|
0019b8  eafffce5          B        |L1.3412|
                  |L1.6588|
0019bc  e51f0174          LDR      r0,|L1.6224|
0019c0  e5c65006          STRB     r5,[r6,#6]            ;799  ; AutoCalFlag
0019c4  e5c04000          STRB     r4,[r0,#0]            ;800  ; calString
0019c8  e5d61003          LDRB     r1,[r6,#3]            ;802  ; bMessageLength
0019cc  e5960014          LDR      r0,[r6,#0x14]         ;802  ; bMessage
0019d0  e7c04001          STRB     r4,[r0,r1]            ;802
0019d4  e5d61003          LDRB     r1,[r6,#3]            ;803  ; bMessageLength
0019d8  e0811000          ADD      r1,r1,r0              ;803
0019dc  e5512001          LDRB     r2,[r1,#-1]           ;803
0019e0  e280000c          ADD      r0,r0,#0xc            ;805
0019e4  e3520020          CMP      r2,#0x20              ;803
0019e8  35414001          STRBCC   r4,[r1,#-1]           ;805
0019ec  ebfffffe          BL       strlen
0019f0  e3500000          CMP      r0,#0                 ;808
0019f4  0a000003          BEQ      |L1.6664|
0019f8  e5960014          LDR      r0,[r6,#0x14]         ;811  ; bMessage
0019fc  e280100c          ADD      r1,r0,#0xc            ;811
001a00  e51f01b8          LDR      r0,|L1.6224|
001a04  ebfffffe          BL       strcpy
                  |L1.6664|
001a08  e5960014          LDR      r0,[r6,#0x14]         ;814  ; bMessage
001a0c  e5d01004          LDRB     r1,[r0,#4]            ;814
001a10  e2412030          SUB      r2,r1,#0x30           ;814
001a14  e3520009          CMP      r2,#9                 ;814
001a18  9201100f          ANDLS    r1,r1,#0xf            ;816
001a1c  95c61005          STRBLS   r1,[r6,#5]            ;816  ; NumberOfInitialCalPositions
001a20  e5864020          STR      r4,[r6,#0x20]         ;819  ; declination
001a24  e5c0400c          STRB     r4,[r0,#0xc]          ;820
001a28  e2800005          ADD      r0,r0,#5              ;820
001a2c  ebfffffe          BL       atof
001a30  ebfffffe          BL       __aeabi_d2f
001a34  e59f10d8          LDR      r1,|L1.6932|
001a38  ebfffffe          BL       __aeabi_fdiv
001a3c  e5860020          STR      r0,[r6,#0x20]         ;822  ; declination
001a40  e3a00007          MOV      r0,#7                 ;823
                  |L1.6724|
001a44  e5c60004          STRB     r0,[r6,#4]            ;823  ; compassBoardState
001a48  eafffc32          B        |L1.2840|
                  |L1.6732|
001a4c  e51f1198          LDR      r1,|L1.6332|
001a50  e2810011          ADD      r0,r1,#0x11           ;827
001a54  ebfffffe          BL       serialGetMessage
001a58  e3500001          CMP      r0,#1                 ;827
001a5c  1afffc2d          BNE      |L1.2840|
001a60  e5d60003          LDRB     r0,[r6,#3]            ;827  ; bMessageLength
001a64  e3500000          CMP      r0,#0                 ;827
001a68  0afffc2a          BEQ      |L1.2840|
001a6c  e5960014          LDR      r0,[r6,#0x14]         ;829  ; bMessage
001a70  ebfffffe          BL       strlen
001a74  e5c60003          STRB     r0,[r6,#3]            ;829  ; bMessageLength
001a78  e59f0098          LDR      r0,|L1.6936|
001a7c  e5961014          LDR      r1,[r6,#0x14]         ;830  ; bMessage
001a80  e3a02004          MOV      r2,#4                 ;830
001a84  ebfffffe          BL       strncmp
001a88  e3500000          CMP      r0,#0                 ;830
001a8c  05c6500b          STRBEQ   r5,[r6,#0xb]          ;832  ; errorReset
001a90  0afffc1f          BEQ      |L1.2836|
001a94  eafffc1f          B        |L1.2840|
;;;841    
                          ENDP

                  getCompassState PROC
;;;842    COMPASS_BOARD_STATE getCompassState(void)
001a98  e59f007c          LDR      r0,|L1.6940|
;;;843    {
;;;844    	return compassBoardState;
001a9c  e5d00004          LDRB     r0,[r0,#4]  ; compassBoardState
;;;845    }
001aa0  e12fff1e          BX       lr
;;;846    
                          ENDP

                  getReadContinuous PROC
;;;847    BOOL getReadContinuous(void)
001aa4  e59f0070          LDR      r0,|L1.6940|
;;;848    {
;;;849    	return readContinuous;
001aa8  e5d00002          LDRB     r0,[r0,#2]  ; readContinuous
;;;850    }
001aac  e12fff1e          BX       lr
                          ENDP

                  |L1.6832|
001ab0  5369676e          DCB      "Sign Accel ",0
001ab4  20416363
001ab8  656c2000
                  |L1.6844|
001abc  45525243          DCB      "ERRCAL, Accel / GYRO Calibration not OK \n",0
001ac0  414c2c20
001ac4  41636365
001ac8  6c202f20
001acc  4759524f
001ad0  2043616c
001ad4  69627261
001ad8  74696f6e
001adc  206e6f74
001ae0  204f4b20
001ae4  0a00    
001ae6  00                DCB      0
001ae7  00                DCB      0
                  |L1.6888|
001ae8  454e4441          DCB      "ENDACAL, Accel / GYRO Calibration done! \n",0
001aec  43414c2c
001af0  20416363
001af4  656c202f
001af8  20475952
001afc  4f204361
001b00  6c696272
001b04  6174696f
001b08  6e20646f
001b0c  6e652120
001b10  0a00    
001b12  00                DCB      0
001b13  00                DCB      0
                  |L1.6932|
                          DCD      0x447a0000
                  |L1.6936|
                          DCD      ||.text||+0x10e4
                  |L1.6940|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  resendString
                          %        256
                  calString
                          %        64

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d41472c          DCB      "MAG, %0.2f mH (uT), %0.2f mX (uT), %0.2f mY (uT), %0.2f"
000004  2025302e
000008  3266206d
00000c  48202875
000010  54292c20
000014  25302e32
000018  66206d58
00001c  20287554
000020  292c2025
000024  302e3266
000028  206d5920
00002c  28755429
000030  2c202530
000034  2e3266  
000037  206d5a20          DCB      " mZ (uT), %0.2f mF (uT) \n",0
00003b  28755429
00003f  2c202530
000043  2e326620
000047  6d462028
00004b  75542920
00004f  0a00    
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
000054  25642c20          DCB      "%d, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %0"
000058  25302e32
00005c  662c2025
000060  302e3266
000064  2c202530
000068  2e32662c
00006c  2025302e
000070  32662c20
000074  25302e32
000078  662c2025
00007c  302e3266
000080  2c202530
000084  2e32662c
000088  202530  
00008b  2e32662c          DCB      ".2f, %0.2f, \n",0
00008f  2025302e
000093  32662c20
000097  0a00    
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
00009c  43414c56          DCB      "CALVALUE, %0.1f aX-axis (of factory),  %0.1f aY-axis (o"
0000a0  414c5545
0000a4  2c202530
0000a8  2e316620
0000ac  61582d61
0000b0  78697320
0000b4  286f6620
0000b8  66616374
0000bc  6f727929
0000c0  2c202025
0000c4  302e3166
0000c8  2061592d
0000cc  61786973
0000d0  20286f  
0000d3  66206661          DCB      "f factory),  %0.1f aZ-axis (of factory),  %0.1f gX-axis"
0000d7  63746f72
0000db  79292c20
0000df  2025302e
0000e3  31662061
0000e7  5a2d6178
0000eb  69732028
0000ef  6f662066
0000f3  6163746f
0000f7  7279292c
0000fb  20202530
0000ff  2e316620
000103  67582d61
000107  786973  
00010a  20287769          DCB      " (within),  %0.1f gY-axis (within),  %0.1f gZ-axis (wit"
00010e  7468696e
000112  292c2020
000116  25302e31
00011a  66206759
00011e  2d617869
000122  73202877
000126  69746869
00012a  6e292c20
00012e  2025302e
000132  31662067
000136  5a2d6178
00013a  69732028
00013e  776974  
000141  68696e29          DCB      "hin),  0 mX-Axis : (sensitivity),  0 mY-Axis : (sensiti"
000145  2c202030
000149  206d582d
00014d  41786973
000151  203a2028
000155  73656e73
000159  69746976
00015d  69747929
000161  2c202030
000165  206d592d
000169  41786973
00016d  203a2028
000171  73656e73
000175  697469  
000178  76697479          DCB      "vity),  0  mZ-Axis : (sensitivity)\n",0
00017c  292c2020
000180  3020206d
000184  5a2d4178
000188  6973203a
00018c  20287365
000190  6e736974
000194  69766974
000198  79290a00
00019c  61674361          DCB      "agCal, %ld aX Bias, %ld aY Bias, %ld aZ Bias, 0 gX Bias"
0001a0  6c2c2025
0001a4  6c642061
0001a8  58204269
0001ac  61732c20
0001b0  256c6420
0001b4  61592042
0001b8  6961732c
0001bc  20256c64
0001c0  20615a20
0001c4  42696173
0001c8  2c203020
0001cc  67582042
0001d0  696173  
0001d3  2c203020          DCB      ", 0 gY Bias, 0 gZ Bias, %d Orientation, Info: %s \n",0
0001d7  67592042
0001db  6961732c
0001df  20302067
0001e3  5a204269
0001e7  61732c20
0001eb  2564204f
0001ef  7269656e
0001f3  74617469
0001f7  6f6e2c20
0001fb  496e666f
0001ff  3a202573
000203  200a00  
000206  00                DCB      0
000207  00                DCB      0
000208  6d616743          DCB      "magCalInit, %0.2f Init Bias 0 (uT), %0.2f Init Bias 1 ("
00020c  616c496e
000210  69742c20
000214  25302e32
000218  6620496e
00021c  69742042
000220  69617320
000224  30202875
000228  54292c20
00022c  25302e32
000230  6620496e
000234  69742042
000238  69617320
00023c  312028  
00023f  7554292c          DCB      "uT), %0.2f Init Bias 2 (uT), %0.2f Init Scale 0 (uT), %"
000243  2025302e
000247  32662049
00024b  6e697420
00024f  42696173
000253  20322028
000257  7554292c
00025b  2025302e
00025f  32662049
000263  6e697420
000267  5363616c
00026b  65203020
00026f  28755429
000273  2c2025  
000276  302e3266          DCB      "0.2f Init Scale 1 (uT), %0.2f Init Scale 2 (uT), %0.2f "
00027a  20496e69
00027e  74205363
000282  616c6520
000286  31202875
00028a  54292c20
00028e  25302e32
000292  6620496e
000296  69742053
00029a  63616c65
00029e  20322028
0002a2  7554292c
0002a6  2025302e
0002aa  326620  
0002ad  204f7269          DCB      " OrientationYaw, %0.2f OrientationPitch, %0.2f Orientat"
0002b1  656e7461
0002b5  74696f6e
0002b9  5961772c
0002bd  2025302e
0002c1  3266204f
0002c5  7269656e
0002c9  74617469
0002cd  6f6e5069
0002d1  7463682c
0002d5  2025302e
0002d9  3266204f
0002dd  7269656e
0002e1  746174  
0002e4  696f6e52          DCB      "ionRoll, Info: %s \n",0
0002e8  6f6c6c2c
0002ec  20496e66
0002f0  6f3a2025
0002f4  73200a00
0002f8  73657474          DCB      "settings, %0.2f Moving Average Period, %0.2f Accelerome"
0002fc  696e6773
000300  2c202530
000304  2e326620
000308  4d6f7669
00030c  6e672041
000310  76657261
000314  67652050
000318  6572696f
00031c  642c2025
000320  302e3266
000324  20416363
000328  656c6572
00032c  6f6d65  
00032f  74657220          DCB      "ter Filter \n",0
000333  46696c74
000337  6572200a
00033b  00      
00033c  53544152          DCB      "STARTINFO, MPU9250 Who Am I; 0x%0.2X  MPU9250 (Should b"
000340  54494e46
000344  4f2c204d
000348  50553932
00034c  35302057
000350  686f2041
000354  6d20493b
000358  20307825
00035c  302e3258
000360  20204d50
000364  55393235
000368  30202853
00036c  686f756c
000370  642062  
000373  65203078          DCB      "e 0xEA) \n",0
000377  45412920
00037b  0a00    

                          AREA ||.data||, DATA, ALIGN=2

                  resendCount
000000  00                DCB      0x00
                  commaFormat
000001  00                DCB      0x00
                  readContinuous
000002  00                DCB      0x00
                  bMessageLength
000003  00                DCB      0x00
                  compassBoardState
000004  00                DCB      0x00
                  NumberOfInitialCalPositions
000005  06                DCB      0x06
                  AutoCalFlag
000006  00                DCB      0x00
                  WakeOnMotionFlag
000007  00                DCB      0x00
                  index1
000008  00                DCB      0x00
                  currentSpeed
000009  00                DCB      0x00
                  position
00000a  00                DCB      0x00
                  errorReset
00000b  00                DCB      0x00
                  readUpdateCount
                          DCD      0x00000000
                  readUpdateDelta
                          DCD      0x00000000
                  bMessage
                          DCD      0x00000000
                  currentDirection
                          DCD      0x00000000
                  setValue
                          DCD      0x00000000
                  declination
000020  00000000          DCFS     0x00000000 ; 0
                  pitch
                          DCD      0x00000000
                  yaw
                          DCD      0x00000000
                  roll
                          DCD      0x00000000
                  ||qw||
                          DCD      0x00000000
                  ||qx||
                          DCD      0x00000000
                  ||qy||
                          DCD      0x00000000
                  ||qz||
                          DCD      0x00000000
                  IdleTimeoutTimer
                          %        8
                  ResendimeoutTimer
                          %        8

                          AREA ||area_number.7||, DATA, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.data||
                  initAx
                          DCD      0x00000000

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  initAy
                          DCD      0x00000000

                          AREA ||area_number.9||, DATA, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.data||
                  initAz
                          DCD      0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  initMx
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  initMy
                          DCD      0x00000000

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  initMz
                          DCD      0x00000000
