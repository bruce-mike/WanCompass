; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\retarget.d --apcs=interwork --diag_suppress=9931 -IC:\Keil_v5\ARM\INC\Phillips -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -DDEVELOPMENT --omf_browse=.\obj\retarget.crf retarget.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sendchar PROC
;;;26      *---------------------------------------------------------------------------*/
;;;27     int sendchar (int ch)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;28     {
;;;29     	int nRetVal = 0;
;;;30     
;;;31     	if(ch != '\n' && ch != '\r' && (ch < ' ' || ch > 0x7E))
000004  e350000a          CMP      r0,#0xa
000008  e1a04000          MOV      r4,r0                 ;28
00000c  e3a05000          MOV      r5,#0                 ;29
000010  0a000007          BEQ      |L1.52|
000014  e354000d          CMP      r4,#0xd
000018  0a000009          BEQ      |L1.68|
00001c  e2440020          SUB      r0,r4,#0x20
000020  e350005f          CMP      r0,#0x5f
000024  3a000006          BCC      |L1.68|
                  |L1.40|
;;;32     	{
;;;33     		return nRetVal;
000028  e1a00005          MOV      r0,r5
00002c  e8bd4070          POP      {r4-r6,lr}
;;;34     	}
;;;35     
;;;36     	if(ch == '\n')
;;;37     	{
;;;38     		// for a line feed, send a carriage return
;;;39     		serialSendData('\r');
;;;40     		serialDebugSendData('\r');
;;;41     	}
;;;42     	
;;;43     	serialSendData(ch);
;;;44     	serialDebugSendData(ch);
;;;45     	return nRetVal;
;;;46     }
000030  e12fff1e          BX       lr
                  |L1.52|
000034  e3a0000d          MOV      r0,#0xd               ;39
000038  ebfffffe          BL       serialSendData
00003c  e3a0000d          MOV      r0,#0xd               ;40
000040  ebfffffe          BL       serialDebugSendData
                  |L1.68|
000044  e20400ff          AND      r0,r4,#0xff           ;43
000048  ebfffffe          BL       serialSendData
00004c  e20400ff          AND      r0,r4,#0xff           ;44
000050  ebfffffe          BL       serialDebugSendData
000054  eafffff3          B        |L1.40|
;;;47     
                          ENDP

                  fputc PROC
;;;51     
;;;52     int fputc(int ch, FILE *f) {
000058  eafffffe          B        sendchar
;;;53       return (sendchar(ch));
;;;54     }
;;;55     
                          ENDP

                  ferror PROC
;;;56     
;;;57     int ferror(FILE *f) {
00005c  e3e00000          MVN      r0,#0
;;;58       /* Your implementation of ferror */
;;;59       return EOF;
;;;60     }
000060  e12fff1e          BX       lr
;;;61     
                          ENDP

                  _ttywrch PROC
;;;62     
;;;63     void _ttywrch(int ch) {
000064  eafffffe          B        sendchar
;;;64       sendchar(ch);
;;;65     }
;;;66     
                          ENDP

                  _sys_exit PROC
                  |L1.104|
;;;67     
;;;68     void _sys_exit(int return_code) {
000068  eafffffe          B        |L1.104|
;;;69     label:  goto label;  /* endless loop */
;;;70     }
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
