; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\serial.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\serial.d --apcs=interwork --diag_suppress=9931 -IC:\Keil_v5\ARM\INC\Phillips -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -DDEVELOPMENT --omf_browse=.\obj\serial.crf serial.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UART3_HANDLER PROC
                  |L1.0|
;;;42     /////////////////////////////////////////////////////////////////////////
;;;43      __irq void UART3_HANDLER(void)
000000  e92d107f          PUSH     {r0-r6,r12}
;;;44     {
;;;45     	BYTE nData;
;;;46     
;;;47     	while(U3LSR & RDR)
;;;48     	{
;;;49     		nData = U3RBR;
;;;50     
;;;51     		if(nRxAddToIndex != nRxRemoveFromIndex || receiveEmpty == TRUE)
000004  e59f1378          LDR      r1,|L1.900|
000008  e59f3378          LDR      r3,|L1.904|
00000c  e5d1c008          LDRB     r12,[r1,#8]
;;;52     		{
;;;53     			rxFIFO[nRxAddToIndex++] = nData;
000010  e59f5374          LDR      r5,|L1.908|
000014  e3a04000          MOV      r4,#0                 ;44
000018  ea00000b          B        |L1.76|
                  |L1.28|
00001c  e5930000          LDR      r0,[r3,#0]            ;49
000020  e20020ff          AND      r2,r0,#0xff           ;49
000024  e5d10007          LDRB     r0,[r1,#7]            ;51  ; nRxAddToIndex
000028  e150000c          CMP      r0,r12                ;51
00002c  1a000002          BNE      |L1.60|
000030  e5d16006          LDRB     r6,[r1,#6]            ;51  ; receiveEmpty
000034  e3560001          CMP      r6,#1                 ;51
000038  1a000003          BNE      |L1.76|
                  |L1.60|
00003c  e7c52000          STRB     r2,[r5,r0]
000040  e2800001          ADD      r0,r0,#1
000044  e5c10007          STRB     r0,[r1,#7]  ; nRxAddToIndex
;;;54     			receiveEmpty = FALSE;
000048  e5c14006          STRB     r4,[r1,#6]  ; receiveEmpty
                  |L1.76|
00004c  e5930014          LDR      r0,[r3,#0x14]         ;47
000050  e3100001          TST      r0,#1                 ;47
;;;55     		}
;;;56     	}
;;;57     
;;;58      VICVectAddr = 0x00;
000054  05044100          STREQ    r4,[r4,#-0x100]
000058  1affffef          BNE      |L1.28|
;;;59     }
00005c  e8bd107f          POP      {r0-r6,r12}
000060  e25ef004          SUBS     pc,lr,#4
;;;60     
                          ENDP

                  serialInitSetBaud PROC
;;;61     // global functions
;;;62     void serialInitSetBaud(BOOL speed)
000064  e59f131c          LDR      r1,|L1.904|
;;;63     {
;;;64     	if(speed == TRUE)
000068  e3500001          CMP      r0,#1
;;;65     	{		
;;;66     		U3LCR |= (1 << DLAB) | (EIGHTBITS << DATA_WIDTH);
;;;67     		U3DLM = DLM_19200_72MHZ;
;;;68     		U3DLL = DLL_19200_72MHZ;
;;;69     		U3FDR = DIVADDVAL_72MHZ | (MULVAL_72MHZ << 4);
;;;70     		U3LCR &= ~(1 << DLAB);	
;;;71     	}
;;;72     	else
;;;73     	{	
;;;74     		U3LCR |= (1 << DLAB) | (EIGHTBITS << DATA_WIDTH);
00006c  e591000c          LDR      r0,[r1,#0xc]
000070  e3a02000          MOV      r2,#0                 ;63
000074  e3800083          ORR      r0,r0,#0x83
000078  e581000c          STR      r0,[r1,#0xc]
;;;75     		U3DLM = DLM_19200_7680000HZ;
00007c  e5812004          STR      r2,[r1,#4]
000080  03a000ea          MOVEQ    r0,#0xea              ;68
;;;76     		U3DLL = DLL_19200_7680000HZ;
000084  13a00019          MOVNE    r0,#0x19
000088  e5810000          STR      r0,[r1,#0]            ;68
00008c  e5812028          STR      r2,[r1,#0x28]         ;69
000090  e591000c          LDR      r0,[r1,#0xc]          ;70
000094  e3c00080          BIC      r0,r0,#0x80           ;70
000098  e581000c          STR      r0,[r1,#0xc]          ;70
;;;77     		U3FDR = DIVADDVAL_7680000HZ | (MULVAL_7680000HZ << 4);
;;;78     		U3LCR &= ~(1 << DLAB);	
;;;79     	}
;;;80     }
00009c  e12fff1e          BX       lr
;;;81     
                          ENDP

                  serialInit PROC
;;;82     void serialInit(void)
0000a0  e59f02e8          LDR      r0,|L1.912|
;;;83     {
0000a4  e92d4010          PUSH     {r4,lr}
;;;84     	//==================
;;;85     	// setup RS485 port
;;;86     	//==================
;;;87     	
;;;88     	// config IO pins for serial
;;;89     	PINSEL0 |= (UART3_SEL << TXD3_SEL) | (UART3_SEL << RXD3_SEL);
0000a8  e5901000          LDR      r1,[r0,#0]
0000ac  e381100a          ORR      r1,r1,#0xa
0000b0  e5801000          STR      r1,[r0,#0]
;;;90     	
;;;91     	// enable the power for the serial port
;;;92     	PCONP |= 1 << PCUART3;
0000b4  e280081d          ADD      r0,r0,#0x1d0000
0000b8  e59010c4          LDR      r1,[r0,#0xc4]
0000bc  e3811402          ORR      r1,r1,#0x2000000
0000c0  e58010c4          STR      r1,[r0,#0xc4]
;;;93     	
;;;94     	// SET UP REGS
;;;95     	// SET UP UART for baud rate
;;;96     	serialInitSetBaud(FALSE);
0000c4  e3a00000          MOV      r0,#0
0000c8  ebfffffe          BL       serialInitSetBaud
;;;97     	
;;;98     	install_irq( UART3_INT, (void (*) (void) __irq) UART3_HANDLER, HIGHEST_PRIORITY );
0000cc  e3a02001          MOV      r2,#1
0000d0  e24f10d8          ADR      r1,|L1.0|
0000d4  e3a0001d          MOV      r0,#0x1d
0000d8  ebfffffe          BL       install_irq
;;;99     	U3IER = RX_DATA_AVAILABLE_INTERRUPT_ENABLE;
0000dc  e59f12a4          LDR      r1,|L1.904|
0000e0  e3a00001          MOV      r0,#1
0000e4  e5810004          STR      r0,[r1,#4]
;;;100    }
0000e8  e8bd4010          POP      {r4,lr}
0000ec  e12fff1e          BX       lr
;;;101    
                          ENDP

                  serialDoWork PROC
;;;102    void serialDoWork(void)
0000f0  e92d41f0          PUSH     {r4-r8,lr}
;;;103    {
;;;104    	BYTE nData;
;;;105    	
;;;106    	// handle the data
;;;107    	while(nRxAddToIndex != nRxRemoveFromIndex || receiveEmpty == FALSE)
;;;108    	{
;;;109    		if(bTimerSet == TRUE && isTimerExpired(&ReceiveTimeoutTimer))
0000f4  e59f5288          LDR      r5,|L1.900|
;;;110    		{
;;;111    			bTimerSet = FALSE;
;;;112    			// clear the input buffer
;;;113    			bReceivedMessageLength = 0;
;;;114    			// clear the input line
;;;115    		}
;;;116    
;;;117    		U3IER = 0;
0000f8  e59f8288          LDR      r8,|L1.904|
0000fc  e3a07000          MOV      r7,#0                 ;103
000100  e3a06001          MOV      r6,#1                 ;109
000104  ea00003a          B        |L1.500|
                  |L1.264|
000108  e5d50002          LDRB     r0,[r5,#2]            ;109  ; bTimerSet
00010c  e3500001          CMP      r0,#1                 ;109
000110  1a000004          BNE      |L1.296|
000114  e59f0278          LDR      r0,|L1.916|
000118  ebfffffe          BL       isTimerExpired
00011c  e3500000          CMP      r0,#0                 ;109
000120  15c57002          STRBNE   r7,[r5,#2]            ;111  ; bTimerSet
000124  15c57003          STRBNE   r7,[r5,#3]            ;113  ; bReceivedMessageLength
                  |L1.296|
000128  e5887004          STR      r7,[r8,#4]
;;;118    		nData = rxFIFO[nRxRemoveFromIndex++];
00012c  e5d50008          LDRB     r0,[r5,#8]  ; nRxRemoveFromIndex
000130  e59f1254          LDR      r1,|L1.908|
000134  e7d14000          LDRB     r4,[r1,r0]
000138  e2800001          ADD      r0,r0,#1
00013c  e20000ff          AND      r0,r0,#0xff
000140  e5c50008          STRB     r0,[r5,#8]  ; nRxRemoveFromIndex
;;;119    		
;;;120    		if(nRxRemoveFromIndex == nRxAddToIndex)
000144  e5d51007          LDRB     r1,[r5,#7]  ; nRxAddToIndex
000148  e1500001          CMP      r0,r1
;;;121    		{
;;;122    			receiveEmpty = TRUE;
00014c  05c56006          STRBEQ   r6,[r5,#6]  ; receiveEmpty
;;;123    		}
;;;124    		U3IER = RX_DATA_AVAILABLE_INTERRUPT_ENABLE;
000150  e5886004          STR      r6,[r8,#4]
;;;125    		
;;;126    		if(nData == '\r')
000154  e354000d          CMP      r4,#0xd
000158  0a000006          BEQ      |L1.376|
;;;127    		{
;;;128    			if(bReceivedMessageLength >= 4 && strncmp("quit", (char*)bReceivedMessage, 4) == 0)
;;;129    			{
;;;130    				serialQuitFlag = TRUE;
;;;131    			}
;;;132    			else
;;;133    			{
;;;134    				memcpy(bSMessage, bReceivedMessage, bReceivedMessageLength);
;;;135    				bSMessageLength = bReceivedMessageLength;
;;;136    				bMessageReceived = TRUE;
;;;137    			}
;;;138    			bTimerSet = FALSE;
;;;139    			
;;;140    			bReceivedMessageLength = 0;
;;;141    		}
;;;142    		else if(nData >= ' ' && nData < 0x7F)
00015c  e2440020          SUB      r0,r4,#0x20
000160  e350005f          CMP      r0,#0x5f
000164  2a000022          BCS      |L1.500|
;;;143    		{
;;;144    			if(bReceivedMessageLength == 0)
000168  e5d50003          LDRB     r0,[r5,#3]  ; bReceivedMessageLength
00016c  e3500000          CMP      r0,#0
000170  1a00001a          BNE      |L1.480|
000174  ea000013          B        |L1.456|
                  |L1.376|
000178  e5d50003          LDRB     r0,[r5,#3]            ;128  ; bReceivedMessageLength
00017c  e3500004          CMP      r0,#4                 ;128
000180  3a000006          BCC      |L1.416|
000184  e59f120c          LDR      r1,|L1.920|
000188  e3a02004          MOV      r2,#4                 ;128
00018c  e28f0f82          ADR      r0,|L1.924|
000190  ebfffffe          BL       strncmp
000194  e3500000          CMP      r0,#0                 ;128
000198  05c56004          STRBEQ   r6,[r5,#4]            ;130  ; serialQuitFlag
00019c  0a000006          BEQ      |L1.444|
                  |L1.416|
0001a0  e59f11f0          LDR      r1,|L1.920|
0001a4  e5d52003          LDRB     r2,[r5,#3]            ;134  ; bReceivedMessageLength
0001a8  e2810c01          ADD      r0,r1,#0x100          ;134
0001ac  ebfffffe          BL       __aeabi_memcpy
0001b0  e5d50003          LDRB     r0,[r5,#3]            ;135  ; bReceivedMessageLength
0001b4  e5c50000          STRB     r0,[r5,#0]            ;135  ; bSMessageLength
0001b8  e5c56001          STRB     r6,[r5,#1]            ;136  ; bMessageReceived
                  |L1.444|
0001bc  e5c57002          STRB     r7,[r5,#2]            ;138  ; bTimerSet
0001c0  e5c57003          STRB     r7,[r5,#3]            ;140  ; bReceivedMessageLength
0001c4  ea00000a          B        |L1.500|
                  |L1.456|
;;;145    			{
;;;146    				// start a timer when the first byte of a command is received
;;;147    				// if the remaining data is not received within a specified amout of time
;;;148    				// clear the input buffer
;;;149    				bTimerSet = TRUE;
;;;150    				initTimer(&ReceiveTimeoutTimer);
0001c8  e59f01c4          LDR      r0,|L1.916|
0001cc  e5c56002          STRB     r6,[r5,#2]            ;149  ; bTimerSet
0001d0  ebfffffe          BL       initTimer
;;;151    				startTimer(&ReceiveTimeoutTimer, RECEIVE_TIME_OUT);
0001d4  e59f11c8          LDR      r1,|L1.932|
0001d8  e59f01b4          LDR      r0,|L1.916|
0001dc  ebfffffe          BL       startTimer
                  |L1.480|
;;;152    			}
;;;153    
;;;154    			bReceivedMessage[bReceivedMessageLength++] = nData;
0001e0  e5d50003          LDRB     r0,[r5,#3]  ; bReceivedMessageLength
0001e4  e59f11ac          LDR      r1,|L1.920|
0001e8  e7c14000          STRB     r4,[r1,r0]
0001ec  e2800001          ADD      r0,r0,#1
0001f0  e5c50003          STRB     r0,[r5,#3]  ; bReceivedMessageLength
                  |L1.500|
0001f4  e5d50007          LDRB     r0,[r5,#7]            ;107  ; nRxAddToIndex
0001f8  e5d51008          LDRB     r1,[r5,#8]            ;107  ; nRxRemoveFromIndex
0001fc  e1500001          CMP      r0,r1                 ;107
000200  1affffc0          BNE      |L1.264|
000204  e5d50006          LDRB     r0,[r5,#6]            ;107  ; receiveEmpty
000208  e3500000          CMP      r0,#0                 ;107
;;;155    		}
;;;156    	}
;;;157    	
;;;158    	while(U3LSR & THRE)
;;;159    	{
;;;160    		if(nTxRemoveFromIndex != nTxAddToIndex || sendEmpty == FALSE)
00020c  11d510bc          LDRHNE   r1,[r5,#0xc]
;;;161    		{
;;;162    			U3THR = txFIFO[nTxRemoveFromIndex++];
000210  159f2190          LDRNE    r2,|L1.936|
000214  0affffbb          BEQ      |L1.264|
                  |L1.536|
000218  e5980014          LDR      r0,[r8,#0x14]         ;158
00021c  e3100020          TST      r0,#0x20              ;158
000220  0a00000d          BEQ      |L1.604|
000224  e1d500ba          LDRH     r0,[r5,#0xa]          ;160  ; nTxRemoveFromIndex
000228  e1500001          CMP      r0,r1                 ;160
00022c  1a000002          BNE      |L1.572|
000230  e5d53005          LDRB     r3,[r5,#5]            ;160  ; sendEmpty
000234  e3530000          CMP      r3,#0                 ;160
000238  1a000007          BNE      |L1.604|
                  |L1.572|
00023c  e7d23000          LDRB     r3,[r2,r0]
000240  e5883000          STR      r3,[r8,#0]
000244  e2800001          ADD      r0,r0,#1
;;;163    			nTxRemoveFromIndex &= 0x07FF;
000248  e3c00b7e          BIC      r0,r0,#0x1f800
;;;164    			if(nTxRemoveFromIndex == nTxAddToIndex)
00024c  e1500001          CMP      r0,r1
000250  e1c500ba          STRH     r0,[r5,#0xa]          ;163  ; nTxRemoveFromIndex
;;;165    			{
;;;166    				sendEmpty = TRUE;
000254  05c56005          STRBEQ   r6,[r5,#5]  ; sendEmpty
000258  eaffffee          B        |L1.536|
                  |L1.604|
;;;167    			}
;;;168    		}
;;;169    		else
;;;170    		{
;;;171    			break;
;;;172    		}
;;;173    	}
;;;174    }
00025c  e8bd41f0          POP      {r4-r8,lr}
000260  e12fff1e          BX       lr
;;;175    
                          ENDP

                  serialGetMessage PROC
;;;176    BOOL serialGetMessage(char **bMessage, BYTE *bMessageLength)
000264  e92d41f0          PUSH     {r4-r8,lr}
;;;177    {
;;;178    	BOOL returnValue = bMessageReceived;
000268  e59f5114          LDR      r5,|L1.900|
00026c  e1a06001          MOV      r6,r1                 ;177
000270  e5d54001          LDRB     r4,[r5,#1]  ; bMessageReceived
000274  e1a07000          MOV      r7,r0                 ;177
;;;179    	
;;;180    	if(serialDebugGetMessage(bMessage, bMessageLength) == TRUE)
000278  ebfffffe          BL       serialDebugGetMessage
00027c  e3500001          CMP      r0,#1
;;;181    	{
;;;182    		returnValue = TRUE;
000280  03a04001          MOVEQ    r4,#1
000284  0a000009          BEQ      |L1.688|
;;;183    	}
;;;184    	else if(bMessageReceived == TRUE)
000288  e5d50001          LDRB     r0,[r5,#1]  ; bMessageReceived
00028c  e3500001          CMP      r0,#1
000290  1a000006          BNE      |L1.688|
;;;185    	{
;;;186    		*bMessage = &bSMessage[0];
000294  e59f1110          LDR      r1,|L1.940|
;;;187    		bSMessage[bSMessageLength] = 0;
000298  e3a00000          MOV      r0,#0
00029c  e5871000          STR      r1,[r7,#0]
0002a0  e5d52000          LDRB     r2,[r5,#0]  ; bSMessageLength
0002a4  e7c10002          STRB     r0,[r1,r2]
;;;188    		*bMessageLength = bSMessageLength;
0002a8  e5c62000          STRB     r2,[r6,#0]
;;;189    		bMessageReceived = FALSE;
0002ac  e5c50001          STRB     r0,[r5,#1]  ; bMessageReceived
                  |L1.688|
;;;190    	}
;;;191    	
;;;192    	return returnValue;
0002b0  e1a00004          MOV      r0,r4
0002b4  e8bd41f0          POP      {r4-r8,lr}
;;;193    }
0002b8  e12fff1e          BX       lr
;;;194    
                          ENDP

                  serialSendData PROC
;;;195    void serialSendData(BYTE nData)
0002bc  e59f20c0          LDR      r2,|L1.900|
;;;196    {
;;;197    	if(nTxAddToIndex != nTxRemoveFromIndex || sendEmpty == TRUE)
0002c0  e1d210bc          LDRH     r1,[r2,#0xc]  ; nTxAddToIndex
0002c4  e1d230ba          LDRH     r3,[r2,#0xa]  ; nTxRemoveFromIndex
0002c8  e1510003          CMP      r1,r3
0002cc  1a000002          BNE      |L1.732|
0002d0  e5d23005          LDRB     r3,[r2,#5]  ; sendEmpty
0002d4  e3530001          CMP      r3,#1
;;;198    	{
;;;199    		txFIFO[nTxAddToIndex++] = nData;
;;;200    		nTxAddToIndex &= 0x07FF;
;;;201    		sendEmpty = FALSE;
;;;202    	}
;;;203    }
0002d8  112fff1e          BXNE     lr
                  |L1.732|
0002dc  e59f30c4          LDR      r3,|L1.936|
0002e0  e7c30001          STRB     r0,[r3,r1]            ;199
0002e4  e2810001          ADD      r0,r1,#1              ;199
0002e8  e3c00b3e          BIC      r0,r0,#0xf800         ;200
0002ec  e1c200bc          STRH     r0,[r2,#0xc]          ;200  ; nTxAddToIndex
0002f0  e3a00000          MOV      r0,#0                 ;201
0002f4  e5c20005          STRB     r0,[r2,#5]            ;201  ; sendEmpty
0002f8  e12fff1e          BX       lr
;;;204    
                          ENDP

                  serialFifoEmtpy PROC
;;;205    BOOL serialFifoEmtpy(void)
0002fc  e59f1080          LDR      r1,|L1.900|
;;;206    {
;;;207    	BOOL returnValue = FALSE;
000300  e3a00000          MOV      r0,#0
;;;208    	
;;;209    	if(nTxRemoveFromIndex == nTxAddToIndex && nRxAddToIndex == nRxRemoveFromIndex && bReceivedMessageLength == FALSE && bReceivedMessageLength == 0)
000304  e1d120ba          LDRH     r2,[r1,#0xa]  ; nTxRemoveFromIndex
000308  e1d130bc          LDRH     r3,[r1,#0xc]  ; nTxAddToIndex
00030c  e1520003          CMP      r2,r3
000310  05d12007          LDRBEQ   r2,[r1,#7]  ; nRxAddToIndex
000314  05d13008          LDRBEQ   r3,[r1,#8]  ; nRxRemoveFromIndex
000318  01520003          CMPEQ    r2,r3
;;;210    	{
;;;211    		returnValue = TRUE;
;;;212    	}
;;;213    	return returnValue;
;;;214    }
00031c  112fff1e          BXNE     lr
000320  e5d11003          LDRB     r1,[r1,#3]            ;209  ; bReceivedMessageLength
000324  e3510000          CMP      r1,#0                 ;209
000328  03a00001          MOVEQ    r0,#1                 ;211
00032c  e12fff1e          BX       lr
;;;215    
                          ENDP

                  serialSetWake PROC
;;;216    void serialSetWake(BOOL setWake)
000330  e59f1078          LDR      r1,|L1.944|
;;;217    {
;;;218    	if(setWake == TRUE)
000334  e3500001          CMP      r0,#1
;;;219    	{
;;;220    		IO0_INT_EN_R &= ~(1 << GPIO_PIN_RX3);
;;;221    		PINSEL0 |= (UART3_SEL << RXD3_SEL); 
000338  e2812901          ADD      r2,r1,#0x4000
00033c  0a000006          BEQ      |L1.860|
;;;222    		bReceivedMessageLength = 0;
;;;223    	}
;;;224    	else
;;;225    	{
;;;226    		PINSEL0 &= ~(UART3_SEL << RXD3_SEL); 
000340  e5920000          LDR      r0,[r2,#0]
000344  e3c00008          BIC      r0,r0,#8
000348  e5820000          STR      r0,[r2,#0]
;;;227    		IO0_INT_EN_R |= (1 << GPIO_PIN_RX3);
00034c  e5910090          LDR      r0,[r1,#0x90]
000350  e3800002          ORR      r0,r0,#2
000354  e5810090          STR      r0,[r1,#0x90]
;;;228    	}
;;;229    }
000358  e12fff1e          BX       lr
                  |L1.860|
00035c  e5910090          LDR      r0,[r1,#0x90]         ;220
000360  e3c00002          BIC      r0,r0,#2              ;220
000364  e5810090          STR      r0,[r1,#0x90]         ;220
000368  e5920000          LDR      r0,[r2,#0]            ;221
00036c  e3800008          ORR      r0,r0,#8              ;221
000370  e5820000          STR      r0,[r2,#0]            ;221
000374  e59f1008          LDR      r1,|L1.900|
000378  e3a00000          MOV      r0,#0                 ;222
00037c  e5c10003          STRB     r0,[r1,#3]            ;222  ; bReceivedMessageLength
000380  e12fff1e          BX       lr
                  |L1.900|
                          DCD      ||.data||
                  |L1.904|
                          DCD      0xe007c000
                  |L1.908|
                          DCD      ||.bss||
                  |L1.912|
                          DCD      0xe002c000
                  |L1.916|
                          DCD      ||.data||+0x10
                  |L1.920|
                          DCD      ||.bss||+0x100
                  |L1.924|
00039c  71756974          DCB      "quit",0
0003a0  00      
0003a1  00                DCB      0
0003a2  00                DCB      0
0003a3  00                DCB      0
                  |L1.932|
                          DCD      0x00002710
                  |L1.936|
                          DCD      ||.bss||+0x300
                  |L1.940|
                          DCD      ||.bss||+0x200
                  |L1.944|
                          DCD      0xe0028000
                          ENDP

                  serialGetQuitFlag PROC
;;;230    
;;;231    BOOL serialGetQuitFlag(void)
0003b4  e51f1038          LDR      r1,|L1.900|
;;;232    {
;;;233    	BOOL returnValue = FALSE;
0003b8  e3a00000          MOV      r0,#0
;;;234    	
;;;235    	if(serialQuitFlag == TRUE)
0003bc  e5d12004          LDRB     r2,[r1,#4]  ; serialQuitFlag
0003c0  e3520001          CMP      r2,#1
;;;236    	{
;;;237    		returnValue = TRUE;
;;;238    		serialQuitFlag = FALSE;
0003c4  03a02000          MOVEQ    r2,#0
0003c8  03a00001          MOVEQ    r0,#1                 ;237
0003cc  05c12004          STRBEQ   r2,[r1,#4]  ; serialQuitFlag
;;;239    	}
;;;240    	
;;;241    	return returnValue;
;;;242    }
0003d0  e12fff1e          BX       lr
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  rxFIFO
                          %        256
                  bReceivedMessage
                          %        256
                  bSMessage
                          %        256
                  txFIFO
                          %        2048

                          AREA ||.data||, DATA, ALIGN=2

                  bSMessageLength
000000  00                DCB      0x00
                  bMessageReceived
000001  00                DCB      0x00
                  bTimerSet
000002  00                DCB      0x00
                  bReceivedMessageLength
000003  00                DCB      0x00
                  serialQuitFlag
000004  00                DCB      0x00
                  sendEmpty
000005  01                DCB      0x01
                  receiveEmpty
000006  01                DCB      0x01
                  nRxAddToIndex
000007  00                DCB      0x00
                  nRxRemoveFromIndex
000008  0000              DCB      0x00,0x00
                  nTxRemoveFromIndex
00000a  0000              DCB      0x00,0x00
                  nTxAddToIndex
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  ReceiveTimeoutTimer
                          %        8
